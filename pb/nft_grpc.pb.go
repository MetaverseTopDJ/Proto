// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NFTServiceClient is the client API for NFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFTServiceClient interface {
	// 智能合约
	Contact(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContactResponse, error)
	ContactPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*ContactPaginationResponse, error)
	CreateContact(ctx context.Context, in *CreateContactPost, opts ...grpc.CallOption) (*ContactResponse, error)
	UpdateContact(ctx context.Context, in *UpdateContactPost, opts ...grpc.CallOption) (*ContactResponse, error)
	ChangeContactStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*ContactResponse, error)
}

type nFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNFTServiceClient(cc grpc.ClientConnInterface) NFTServiceClient {
	return &nFTServiceClient{cc}
}

func (c *nFTServiceClient) Contact(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/Contact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ContactPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*ContactPaginationResponse, error) {
	out := new(ContactPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ContactPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CreateContact(ctx context.Context, in *CreateContactPost, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CreateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) UpdateContact(ctx context.Context, in *UpdateContactPost, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/UpdateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ChangeContactStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ChangeContactStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFTServiceServer is the server API for NFTService service.
// All implementations must embed UnimplementedNFTServiceServer
// for forward compatibility
type NFTServiceServer interface {
	// 智能合约
	Contact(context.Context, *InfoPost) (*ContactResponse, error)
	ContactPagination(context.Context, *PaginationPost) (*ContactPaginationResponse, error)
	CreateContact(context.Context, *CreateContactPost) (*ContactResponse, error)
	UpdateContact(context.Context, *UpdateContactPost) (*ContactResponse, error)
	ChangeContactStatus(context.Context, *ChangeStatusPost) (*ContactResponse, error)
	mustEmbedUnimplementedNFTServiceServer()
}

// UnimplementedNFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNFTServiceServer struct {
}

func (UnimplementedNFTServiceServer) Contact(context.Context, *InfoPost) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contact not implemented")
}
func (UnimplementedNFTServiceServer) ContactPagination(context.Context, *PaginationPost) (*ContactPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPagination not implemented")
}
func (UnimplementedNFTServiceServer) CreateContact(context.Context, *CreateContactPost) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedNFTServiceServer) UpdateContact(context.Context, *UpdateContactPost) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedNFTServiceServer) ChangeContactStatus(context.Context, *ChangeStatusPost) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeContactStatus not implemented")
}
func (UnimplementedNFTServiceServer) mustEmbedUnimplementedNFTServiceServer() {}

// UnsafeNFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFTServiceServer will
// result in compilation errors.
type UnsafeNFTServiceServer interface {
	mustEmbedUnimplementedNFTServiceServer()
}

func RegisterNFTServiceServer(s grpc.ServiceRegistrar, srv NFTServiceServer) {
	s.RegisterService(&NFTService_ServiceDesc, srv)
}

func _NFTService_Contact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).Contact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/Contact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).Contact(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ContactPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ContactPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ContactPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ContactPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CreateContact(ctx, req.(*CreateContactPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).UpdateContact(ctx, req.(*UpdateContactPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ChangeContactStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ChangeContactStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ChangeContactStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ChangeContactStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

// NFTService_ServiceDesc is the grpc.ServiceDesc for NFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nft.NFTService",
	HandlerType: (*NFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Contact",
			Handler:    _NFTService_Contact_Handler,
		},
		{
			MethodName: "ContactPagination",
			Handler:    _NFTService_ContactPagination_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _NFTService_CreateContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _NFTService_UpdateContact_Handler,
		},
		{
			MethodName: "ChangeContactStatus",
			Handler:    _NFTService_ChangeContactStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nft/nft.proto",
}
