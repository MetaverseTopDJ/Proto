// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NFTServiceClient is the client API for NFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFTServiceClient interface {
	// 作者
	Author(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	AuthorDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*SimpleAuthorResponse, error)
	HotAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error)
	CacheAllAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error)
	AuthorPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AuthorPaginationResponse, error)
	CreateAuthor(ctx context.Context, in *CreateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	ChangeAuthorStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	// 作品
	Work(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkResponse, error)
	WorkDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkDetailResponse, error)
	RecommendWorks(ctx context.Context, in *RecommendWorksPost, opts ...grpc.CallOption) (*RecommendWorksResponse, error)
	AuthorWorkPagination(ctx context.Context, in *AuthorWorkPaginationPost, opts ...grpc.CallOption) (*AuthorWorkPaginationResponse, error)
	WorkPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*WorkPaginationResponse, error)
	CreateWork(ctx context.Context, in *CreateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error)
	UpdateWork(ctx context.Context, in *UpdateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error)
	ChangeWorkStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WorkResponse, error)
	// 盲盒
	BlindBox(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	BlindBoxCount(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error)
	BlindBoxTop(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxTopResponse, error)
	BlindBoxTopCount(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error)
	BlindBoxPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*BlindBoxPaginationResponse, error)
	CreateBlindBox(ctx context.Context, in *CreateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	UpdateBlindBox(ctx context.Context, in *UpdateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	StartBlindBox(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	// 集卡
	Collect(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectResponse, error)
	CollectDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectDetailResponse, error)
	CollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*CollectPaginationResponse, error)
	SimpleCollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*SimpleCollectPaginationResponse, error)
	CreateCollect(ctx context.Context, in *CreateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error)
	UpdateCollect(ctx context.Context, in *UpdateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error)
	ModifyCollect(ctx context.Context, in *ModifyCollectPost, opts ...grpc.CallOption) (*ResultResponse, error)
	ChangeCollectStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*CollectResponse, error)
	// 免费盲盒
	BlindBoxExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxExchangeResponse, error)
	MemberBlindBoxExchange(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error)
	AddressBlindBoxExchange(ctx context.Context, in *AddressBlindBoxExchangePost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error)
	// 集卡交互
	GenCollectSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	CollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectExchangeResponse, error)
	CheckCollectExchangeTx(ctx context.Context, in *CheckCollectExchangePost, opts ...grpc.CallOption) (*CheckResponse, error)
	CheckBlindBoxExchangeTx(ctx context.Context, in *CheckBlindExchangePost, opts ...grpc.CallOption) (*CheckResponse, error)
	// 合约
	NftContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContractResponse, error)
	NftContracts(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractsResponse, error)
	NftContractAddress(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractAddressResponse, error)
	NftContractPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*ContractPaginationResponse, error)
	CreateNftContract(ctx context.Context, in *CreateContractPost, opts ...grpc.CallOption) (*ContractResponse, error)
	UpdateNftContract(ctx context.Context, in *UpdateContractPost, opts ...grpc.CallOption) (*ContractResponse, error)
	ChangeNftContractStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*ContractResponse, error)
	// NFT
	CheckBlindBoxTx(ctx context.Context, in *CheckBlindBoxTxPost, opts ...grpc.CallOption) (*CheckResponse, error)
	MemberNftPagination(ctx context.Context, in *MemberNftPaginationPost, opts ...grpc.CallOption) (*MemberNftPaginationResponse, error)
	NftMemberPagination(ctx context.Context, in *NftMemberPaginationPost, opts ...grpc.CallOption) (*NftMemberPaginationResponse, error)
}

type nFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNFTServiceClient(cc grpc.ClientConnInterface) NFTServiceClient {
	return &nFTServiceClient{cc}
}

func (c *nFTServiceClient) Author(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/Author", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) AuthorDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*SimpleAuthorResponse, error) {
	out := new(SimpleAuthorResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/AuthorDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) HotAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error) {
	out := new(HotAuthorsResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/HotAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CacheAllAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error) {
	out := new(HotAuthorsResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CacheAllAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) AuthorPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AuthorPaginationResponse, error) {
	out := new(AuthorPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/AuthorPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CreateAuthor(ctx context.Context, in *CreateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) UpdateAuthor(ctx context.Context, in *UpdateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ChangeAuthorStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ChangeAuthorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) Work(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/Work", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) WorkDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkDetailResponse, error) {
	out := new(WorkDetailResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/WorkDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) RecommendWorks(ctx context.Context, in *RecommendWorksPost, opts ...grpc.CallOption) (*RecommendWorksResponse, error) {
	out := new(RecommendWorksResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/RecommendWorks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) AuthorWorkPagination(ctx context.Context, in *AuthorWorkPaginationPost, opts ...grpc.CallOption) (*AuthorWorkPaginationResponse, error) {
	out := new(AuthorWorkPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/AuthorWorkPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) WorkPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*WorkPaginationResponse, error) {
	out := new(WorkPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/WorkPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CreateWork(ctx context.Context, in *CreateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CreateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) UpdateWork(ctx context.Context, in *UpdateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/UpdateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ChangeWorkStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ChangeWorkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) BlindBox(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/BlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) BlindBoxCount(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error) {
	out := new(BlindBoxCountResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/BlindBoxCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) BlindBoxTop(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxTopResponse, error) {
	out := new(BlindBoxTopResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/BlindBoxTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) BlindBoxTopCount(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error) {
	out := new(BlindBoxCountResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/BlindBoxTopCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) BlindBoxPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*BlindBoxPaginationResponse, error) {
	out := new(BlindBoxPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/BlindBoxPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CreateBlindBox(ctx context.Context, in *CreateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CreateBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) UpdateBlindBox(ctx context.Context, in *UpdateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/UpdateBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) StartBlindBox(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/StartBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) Collect(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CollectDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectDetailResponse, error) {
	out := new(CollectDetailResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CollectDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*CollectPaginationResponse, error) {
	out := new(CollectPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CollectPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) SimpleCollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*SimpleCollectPaginationResponse, error) {
	out := new(SimpleCollectPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/SimpleCollectPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CreateCollect(ctx context.Context, in *CreateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CreateCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) UpdateCollect(ctx context.Context, in *UpdateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/UpdateCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ModifyCollect(ctx context.Context, in *ModifyCollectPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ModifyCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ChangeCollectStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ChangeCollectStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) BlindBoxExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxExchangeResponse, error) {
	out := new(BlindBoxExchangeResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/BlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) MemberBlindBoxExchange(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error) {
	out := new(CountBlindBoxExchangeResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/MemberBlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) AddressBlindBoxExchange(ctx context.Context, in *AddressBlindBoxExchangePost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error) {
	out := new(CountBlindBoxExchangeResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/AddressBlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) GenCollectSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/GenCollectSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectExchangeResponse, error) {
	out := new(CollectExchangeResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CollectExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CheckCollectExchangeTx(ctx context.Context, in *CheckCollectExchangePost, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CheckCollectExchangeTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CheckBlindBoxExchangeTx(ctx context.Context, in *CheckBlindExchangePost, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CheckBlindBoxExchangeTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) NftContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/NftContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) NftContracts(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractsResponse, error) {
	out := new(ContractsResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/NftContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) NftContractAddress(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractAddressResponse, error) {
	out := new(ContractAddressResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/NftContractAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) NftContractPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*ContractPaginationResponse, error) {
	out := new(ContractPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/NftContractPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CreateNftContract(ctx context.Context, in *CreateContractPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CreateNftContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) UpdateNftContract(ctx context.Context, in *UpdateContractPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/UpdateNftContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) ChangeNftContractStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/ChangeNftContractStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) CheckBlindBoxTx(ctx context.Context, in *CheckBlindBoxTxPost, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/CheckBlindBoxTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) MemberNftPagination(ctx context.Context, in *MemberNftPaginationPost, opts ...grpc.CallOption) (*MemberNftPaginationResponse, error) {
	out := new(MemberNftPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/MemberNftPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) NftMemberPagination(ctx context.Context, in *NftMemberPaginationPost, opts ...grpc.CallOption) (*NftMemberPaginationResponse, error) {
	out := new(NftMemberPaginationResponse)
	err := c.cc.Invoke(ctx, "/nft.NFTService/NftMemberPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFTServiceServer is the server API for NFTService service.
// All implementations must embed UnimplementedNFTServiceServer
// for forward compatibility
type NFTServiceServer interface {
	// 作者
	Author(context.Context, *InfoPost) (*AuthorResponse, error)
	AuthorDetail(context.Context, *InfoPost) (*SimpleAuthorResponse, error)
	HotAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error)
	CacheAllAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error)
	AuthorPagination(context.Context, *PaginationPost) (*AuthorPaginationResponse, error)
	CreateAuthor(context.Context, *CreateAuthorPost) (*AuthorResponse, error)
	UpdateAuthor(context.Context, *UpdateAuthorPost) (*AuthorResponse, error)
	ChangeAuthorStatus(context.Context, *ChangeStatusPost) (*AuthorResponse, error)
	// 作品
	Work(context.Context, *InfoPost) (*WorkResponse, error)
	WorkDetail(context.Context, *InfoPost) (*WorkDetailResponse, error)
	RecommendWorks(context.Context, *RecommendWorksPost) (*RecommendWorksResponse, error)
	AuthorWorkPagination(context.Context, *AuthorWorkPaginationPost) (*AuthorWorkPaginationResponse, error)
	WorkPagination(context.Context, *PaginationPost) (*WorkPaginationResponse, error)
	CreateWork(context.Context, *CreateWorkPost) (*WorkResponse, error)
	UpdateWork(context.Context, *UpdateWorkPost) (*WorkResponse, error)
	ChangeWorkStatus(context.Context, *ChangeStatusPost) (*WorkResponse, error)
	// 盲盒
	BlindBox(context.Context, *InfoPost) (*BlindBoxResponse, error)
	BlindBoxCount(context.Context, *InfoPost) (*BlindBoxCountResponse, error)
	BlindBoxTop(context.Context, *EmptyPost) (*BlindBoxTopResponse, error)
	BlindBoxTopCount(context.Context, *EmptyPost) (*BlindBoxCountResponse, error)
	BlindBoxPagination(context.Context, *PaginationPost) (*BlindBoxPaginationResponse, error)
	CreateBlindBox(context.Context, *CreateBlindBoxPost) (*BlindBoxResponse, error)
	UpdateBlindBox(context.Context, *UpdateBlindBoxPost) (*BlindBoxResponse, error)
	StartBlindBox(context.Context, *ChangeStatusPost) (*BlindBoxResponse, error)
	// 集卡
	Collect(context.Context, *InfoPost) (*CollectResponse, error)
	CollectDetail(context.Context, *InfoPost) (*CollectDetailResponse, error)
	CollectPagination(context.Context, *PaginationPost) (*CollectPaginationResponse, error)
	SimpleCollectPagination(context.Context, *PaginationPost) (*SimpleCollectPaginationResponse, error)
	CreateCollect(context.Context, *CreateCollectPost) (*CollectResponse, error)
	UpdateCollect(context.Context, *UpdateCollectPost) (*CollectResponse, error)
	ModifyCollect(context.Context, *ModifyCollectPost) (*ResultResponse, error)
	ChangeCollectStatus(context.Context, *ChangeStatusPost) (*CollectResponse, error)
	// 免费盲盒
	BlindBoxExchange(context.Context, *InfoPost) (*BlindBoxExchangeResponse, error)
	MemberBlindBoxExchange(context.Context, *EmptyPost) (*CountBlindBoxExchangeResponse, error)
	AddressBlindBoxExchange(context.Context, *AddressBlindBoxExchangePost) (*CountBlindBoxExchangeResponse, error)
	// 集卡交互
	GenCollectSnapshot(context.Context, *InfoPost) (*ResultResponse, error)
	CollectExchange(context.Context, *InfoPost) (*CollectExchangeResponse, error)
	CheckCollectExchangeTx(context.Context, *CheckCollectExchangePost) (*CheckResponse, error)
	CheckBlindBoxExchangeTx(context.Context, *CheckBlindExchangePost) (*CheckResponse, error)
	// 合约
	NftContract(context.Context, *InfoPost) (*ContractResponse, error)
	NftContracts(context.Context, *EmptyPost) (*ContractsResponse, error)
	NftContractAddress(context.Context, *EmptyPost) (*ContractAddressResponse, error)
	NftContractPagination(context.Context, *PaginationPost) (*ContractPaginationResponse, error)
	CreateNftContract(context.Context, *CreateContractPost) (*ContractResponse, error)
	UpdateNftContract(context.Context, *UpdateContractPost) (*ContractResponse, error)
	ChangeNftContractStatus(context.Context, *ChangeStatusPost) (*ContractResponse, error)
	// NFT
	CheckBlindBoxTx(context.Context, *CheckBlindBoxTxPost) (*CheckResponse, error)
	MemberNftPagination(context.Context, *MemberNftPaginationPost) (*MemberNftPaginationResponse, error)
	NftMemberPagination(context.Context, *NftMemberPaginationPost) (*NftMemberPaginationResponse, error)
	mustEmbedUnimplementedNFTServiceServer()
}

// UnimplementedNFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNFTServiceServer struct {
}

func (UnimplementedNFTServiceServer) Author(context.Context, *InfoPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Author not implemented")
}
func (UnimplementedNFTServiceServer) AuthorDetail(context.Context, *InfoPost) (*SimpleAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorDetail not implemented")
}
func (UnimplementedNFTServiceServer) HotAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotAuthors not implemented")
}
func (UnimplementedNFTServiceServer) CacheAllAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheAllAuthors not implemented")
}
func (UnimplementedNFTServiceServer) AuthorPagination(context.Context, *PaginationPost) (*AuthorPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorPagination not implemented")
}
func (UnimplementedNFTServiceServer) CreateAuthor(context.Context, *CreateAuthorPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedNFTServiceServer) UpdateAuthor(context.Context, *UpdateAuthorPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedNFTServiceServer) ChangeAuthorStatus(context.Context, *ChangeStatusPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAuthorStatus not implemented")
}
func (UnimplementedNFTServiceServer) Work(context.Context, *InfoPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Work not implemented")
}
func (UnimplementedNFTServiceServer) WorkDetail(context.Context, *InfoPost) (*WorkDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkDetail not implemented")
}
func (UnimplementedNFTServiceServer) RecommendWorks(context.Context, *RecommendWorksPost) (*RecommendWorksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendWorks not implemented")
}
func (UnimplementedNFTServiceServer) AuthorWorkPagination(context.Context, *AuthorWorkPaginationPost) (*AuthorWorkPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorWorkPagination not implemented")
}
func (UnimplementedNFTServiceServer) WorkPagination(context.Context, *PaginationPost) (*WorkPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkPagination not implemented")
}
func (UnimplementedNFTServiceServer) CreateWork(context.Context, *CreateWorkPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWork not implemented")
}
func (UnimplementedNFTServiceServer) UpdateWork(context.Context, *UpdateWorkPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWork not implemented")
}
func (UnimplementedNFTServiceServer) ChangeWorkStatus(context.Context, *ChangeStatusPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWorkStatus not implemented")
}
func (UnimplementedNFTServiceServer) BlindBox(context.Context, *InfoPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBox not implemented")
}
func (UnimplementedNFTServiceServer) BlindBoxCount(context.Context, *InfoPost) (*BlindBoxCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxCount not implemented")
}
func (UnimplementedNFTServiceServer) BlindBoxTop(context.Context, *EmptyPost) (*BlindBoxTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxTop not implemented")
}
func (UnimplementedNFTServiceServer) BlindBoxTopCount(context.Context, *EmptyPost) (*BlindBoxCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxTopCount not implemented")
}
func (UnimplementedNFTServiceServer) BlindBoxPagination(context.Context, *PaginationPost) (*BlindBoxPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxPagination not implemented")
}
func (UnimplementedNFTServiceServer) CreateBlindBox(context.Context, *CreateBlindBoxPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlindBox not implemented")
}
func (UnimplementedNFTServiceServer) UpdateBlindBox(context.Context, *UpdateBlindBoxPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlindBox not implemented")
}
func (UnimplementedNFTServiceServer) StartBlindBox(context.Context, *ChangeStatusPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBlindBox not implemented")
}
func (UnimplementedNFTServiceServer) Collect(context.Context, *InfoPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedNFTServiceServer) CollectDetail(context.Context, *InfoPost) (*CollectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectDetail not implemented")
}
func (UnimplementedNFTServiceServer) CollectPagination(context.Context, *PaginationPost) (*CollectPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectPagination not implemented")
}
func (UnimplementedNFTServiceServer) SimpleCollectPagination(context.Context, *PaginationPost) (*SimpleCollectPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleCollectPagination not implemented")
}
func (UnimplementedNFTServiceServer) CreateCollect(context.Context, *CreateCollectPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollect not implemented")
}
func (UnimplementedNFTServiceServer) UpdateCollect(context.Context, *UpdateCollectPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollect not implemented")
}
func (UnimplementedNFTServiceServer) ModifyCollect(context.Context, *ModifyCollectPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCollect not implemented")
}
func (UnimplementedNFTServiceServer) ChangeCollectStatus(context.Context, *ChangeStatusPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCollectStatus not implemented")
}
func (UnimplementedNFTServiceServer) BlindBoxExchange(context.Context, *InfoPost) (*BlindBoxExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxExchange not implemented")
}
func (UnimplementedNFTServiceServer) MemberBlindBoxExchange(context.Context, *EmptyPost) (*CountBlindBoxExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberBlindBoxExchange not implemented")
}
func (UnimplementedNFTServiceServer) AddressBlindBoxExchange(context.Context, *AddressBlindBoxExchangePost) (*CountBlindBoxExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressBlindBoxExchange not implemented")
}
func (UnimplementedNFTServiceServer) GenCollectSnapshot(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCollectSnapshot not implemented")
}
func (UnimplementedNFTServiceServer) CollectExchange(context.Context, *InfoPost) (*CollectExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectExchange not implemented")
}
func (UnimplementedNFTServiceServer) CheckCollectExchangeTx(context.Context, *CheckCollectExchangePost) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCollectExchangeTx not implemented")
}
func (UnimplementedNFTServiceServer) CheckBlindBoxExchangeTx(context.Context, *CheckBlindExchangePost) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlindBoxExchangeTx not implemented")
}
func (UnimplementedNFTServiceServer) NftContract(context.Context, *InfoPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftContract not implemented")
}
func (UnimplementedNFTServiceServer) NftContracts(context.Context, *EmptyPost) (*ContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftContracts not implemented")
}
func (UnimplementedNFTServiceServer) NftContractAddress(context.Context, *EmptyPost) (*ContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftContractAddress not implemented")
}
func (UnimplementedNFTServiceServer) NftContractPagination(context.Context, *PaginationPost) (*ContractPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftContractPagination not implemented")
}
func (UnimplementedNFTServiceServer) CreateNftContract(context.Context, *CreateContractPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNftContract not implemented")
}
func (UnimplementedNFTServiceServer) UpdateNftContract(context.Context, *UpdateContractPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNftContract not implemented")
}
func (UnimplementedNFTServiceServer) ChangeNftContractStatus(context.Context, *ChangeStatusPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNftContractStatus not implemented")
}
func (UnimplementedNFTServiceServer) CheckBlindBoxTx(context.Context, *CheckBlindBoxTxPost) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlindBoxTx not implemented")
}
func (UnimplementedNFTServiceServer) MemberNftPagination(context.Context, *MemberNftPaginationPost) (*MemberNftPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberNftPagination not implemented")
}
func (UnimplementedNFTServiceServer) NftMemberPagination(context.Context, *NftMemberPaginationPost) (*NftMemberPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftMemberPagination not implemented")
}
func (UnimplementedNFTServiceServer) mustEmbedUnimplementedNFTServiceServer() {}

// UnsafeNFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFTServiceServer will
// result in compilation errors.
type UnsafeNFTServiceServer interface {
	mustEmbedUnimplementedNFTServiceServer()
}

func RegisterNFTServiceServer(s grpc.ServiceRegistrar, srv NFTServiceServer) {
	s.RegisterService(&NFTService_ServiceDesc, srv)
}

func _NFTService_Author_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).Author(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/Author",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).Author(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_AuthorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).AuthorDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/AuthorDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).AuthorDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_HotAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).HotAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/HotAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).HotAuthors(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CacheAllAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CacheAllAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CacheAllAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CacheAllAuthors(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_AuthorPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).AuthorPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/AuthorPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).AuthorPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CreateAuthor(ctx, req.(*CreateAuthorPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).UpdateAuthor(ctx, req.(*UpdateAuthorPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ChangeAuthorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ChangeAuthorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ChangeAuthorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ChangeAuthorStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/Work",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).Work(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_WorkDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).WorkDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/WorkDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).WorkDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_RecommendWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendWorksPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).RecommendWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/RecommendWorks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).RecommendWorks(ctx, req.(*RecommendWorksPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_AuthorWorkPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorWorkPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).AuthorWorkPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/AuthorWorkPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).AuthorWorkPagination(ctx, req.(*AuthorWorkPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_WorkPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).WorkPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/WorkPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).WorkPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CreateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CreateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CreateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CreateWork(ctx, req.(*CreateWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/UpdateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).UpdateWork(ctx, req.(*UpdateWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ChangeWorkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ChangeWorkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ChangeWorkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ChangeWorkStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_BlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).BlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/BlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).BlindBox(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_BlindBoxCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).BlindBoxCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/BlindBoxCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).BlindBoxCount(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_BlindBoxTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).BlindBoxTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/BlindBoxTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).BlindBoxTop(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_BlindBoxTopCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).BlindBoxTopCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/BlindBoxTopCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).BlindBoxTopCount(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_BlindBoxPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).BlindBoxPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/BlindBoxPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).BlindBoxPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CreateBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlindBoxPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CreateBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CreateBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CreateBlindBox(ctx, req.(*CreateBlindBoxPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_UpdateBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlindBoxPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).UpdateBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/UpdateBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).UpdateBlindBox(ctx, req.(*UpdateBlindBoxPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_StartBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).StartBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/StartBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).StartBlindBox(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).Collect(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CollectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CollectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CollectDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CollectDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CollectPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CollectPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CollectPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CollectPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_SimpleCollectPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).SimpleCollectPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/SimpleCollectPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).SimpleCollectPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CreateCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CreateCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CreateCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CreateCollect(ctx, req.(*CreateCollectPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_UpdateCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).UpdateCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/UpdateCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).UpdateCollect(ctx, req.(*UpdateCollectPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ModifyCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCollectPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ModifyCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ModifyCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ModifyCollect(ctx, req.(*ModifyCollectPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ChangeCollectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ChangeCollectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ChangeCollectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ChangeCollectStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_BlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).BlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/BlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).BlindBoxExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_MemberBlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).MemberBlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/MemberBlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).MemberBlindBoxExchange(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_AddressBlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressBlindBoxExchangePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).AddressBlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/AddressBlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).AddressBlindBoxExchange(ctx, req.(*AddressBlindBoxExchangePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_GenCollectSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).GenCollectSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/GenCollectSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).GenCollectSnapshot(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CollectExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CollectExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CollectExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CollectExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CheckCollectExchangeTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCollectExchangePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CheckCollectExchangeTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CheckCollectExchangeTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CheckCollectExchangeTx(ctx, req.(*CheckCollectExchangePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CheckBlindBoxExchangeTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlindExchangePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CheckBlindBoxExchangeTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CheckBlindBoxExchangeTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CheckBlindBoxExchangeTx(ctx, req.(*CheckBlindExchangePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_NftContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).NftContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/NftContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).NftContract(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_NftContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).NftContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/NftContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).NftContracts(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_NftContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).NftContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/NftContractAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).NftContractAddress(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_NftContractPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).NftContractPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/NftContractPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).NftContractPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CreateNftContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CreateNftContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CreateNftContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CreateNftContract(ctx, req.(*CreateContractPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_UpdateNftContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).UpdateNftContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/UpdateNftContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).UpdateNftContract(ctx, req.(*UpdateContractPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_ChangeNftContractStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).ChangeNftContractStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/ChangeNftContractStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).ChangeNftContractStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_CheckBlindBoxTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlindBoxTxPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).CheckBlindBoxTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/CheckBlindBoxTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).CheckBlindBoxTx(ctx, req.(*CheckBlindBoxTxPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_MemberNftPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberNftPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).MemberNftPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/MemberNftPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).MemberNftPagination(ctx, req.(*MemberNftPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_NftMemberPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftMemberPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).NftMemberPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nft.NFTService/NftMemberPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).NftMemberPagination(ctx, req.(*NftMemberPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

// NFTService_ServiceDesc is the grpc.ServiceDesc for NFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nft.NFTService",
	HandlerType: (*NFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Author",
			Handler:    _NFTService_Author_Handler,
		},
		{
			MethodName: "AuthorDetail",
			Handler:    _NFTService_AuthorDetail_Handler,
		},
		{
			MethodName: "HotAuthors",
			Handler:    _NFTService_HotAuthors_Handler,
		},
		{
			MethodName: "CacheAllAuthors",
			Handler:    _NFTService_CacheAllAuthors_Handler,
		},
		{
			MethodName: "AuthorPagination",
			Handler:    _NFTService_AuthorPagination_Handler,
		},
		{
			MethodName: "CreateAuthor",
			Handler:    _NFTService_CreateAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _NFTService_UpdateAuthor_Handler,
		},
		{
			MethodName: "ChangeAuthorStatus",
			Handler:    _NFTService_ChangeAuthorStatus_Handler,
		},
		{
			MethodName: "Work",
			Handler:    _NFTService_Work_Handler,
		},
		{
			MethodName: "WorkDetail",
			Handler:    _NFTService_WorkDetail_Handler,
		},
		{
			MethodName: "RecommendWorks",
			Handler:    _NFTService_RecommendWorks_Handler,
		},
		{
			MethodName: "AuthorWorkPagination",
			Handler:    _NFTService_AuthorWorkPagination_Handler,
		},
		{
			MethodName: "WorkPagination",
			Handler:    _NFTService_WorkPagination_Handler,
		},
		{
			MethodName: "CreateWork",
			Handler:    _NFTService_CreateWork_Handler,
		},
		{
			MethodName: "UpdateWork",
			Handler:    _NFTService_UpdateWork_Handler,
		},
		{
			MethodName: "ChangeWorkStatus",
			Handler:    _NFTService_ChangeWorkStatus_Handler,
		},
		{
			MethodName: "BlindBox",
			Handler:    _NFTService_BlindBox_Handler,
		},
		{
			MethodName: "BlindBoxCount",
			Handler:    _NFTService_BlindBoxCount_Handler,
		},
		{
			MethodName: "BlindBoxTop",
			Handler:    _NFTService_BlindBoxTop_Handler,
		},
		{
			MethodName: "BlindBoxTopCount",
			Handler:    _NFTService_BlindBoxTopCount_Handler,
		},
		{
			MethodName: "BlindBoxPagination",
			Handler:    _NFTService_BlindBoxPagination_Handler,
		},
		{
			MethodName: "CreateBlindBox",
			Handler:    _NFTService_CreateBlindBox_Handler,
		},
		{
			MethodName: "UpdateBlindBox",
			Handler:    _NFTService_UpdateBlindBox_Handler,
		},
		{
			MethodName: "StartBlindBox",
			Handler:    _NFTService_StartBlindBox_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _NFTService_Collect_Handler,
		},
		{
			MethodName: "CollectDetail",
			Handler:    _NFTService_CollectDetail_Handler,
		},
		{
			MethodName: "CollectPagination",
			Handler:    _NFTService_CollectPagination_Handler,
		},
		{
			MethodName: "SimpleCollectPagination",
			Handler:    _NFTService_SimpleCollectPagination_Handler,
		},
		{
			MethodName: "CreateCollect",
			Handler:    _NFTService_CreateCollect_Handler,
		},
		{
			MethodName: "UpdateCollect",
			Handler:    _NFTService_UpdateCollect_Handler,
		},
		{
			MethodName: "ModifyCollect",
			Handler:    _NFTService_ModifyCollect_Handler,
		},
		{
			MethodName: "ChangeCollectStatus",
			Handler:    _NFTService_ChangeCollectStatus_Handler,
		},
		{
			MethodName: "BlindBoxExchange",
			Handler:    _NFTService_BlindBoxExchange_Handler,
		},
		{
			MethodName: "MemberBlindBoxExchange",
			Handler:    _NFTService_MemberBlindBoxExchange_Handler,
		},
		{
			MethodName: "AddressBlindBoxExchange",
			Handler:    _NFTService_AddressBlindBoxExchange_Handler,
		},
		{
			MethodName: "GenCollectSnapshot",
			Handler:    _NFTService_GenCollectSnapshot_Handler,
		},
		{
			MethodName: "CollectExchange",
			Handler:    _NFTService_CollectExchange_Handler,
		},
		{
			MethodName: "CheckCollectExchangeTx",
			Handler:    _NFTService_CheckCollectExchangeTx_Handler,
		},
		{
			MethodName: "CheckBlindBoxExchangeTx",
			Handler:    _NFTService_CheckBlindBoxExchangeTx_Handler,
		},
		{
			MethodName: "NftContract",
			Handler:    _NFTService_NftContract_Handler,
		},
		{
			MethodName: "NftContracts",
			Handler:    _NFTService_NftContracts_Handler,
		},
		{
			MethodName: "NftContractAddress",
			Handler:    _NFTService_NftContractAddress_Handler,
		},
		{
			MethodName: "NftContractPagination",
			Handler:    _NFTService_NftContractPagination_Handler,
		},
		{
			MethodName: "CreateNftContract",
			Handler:    _NFTService_CreateNftContract_Handler,
		},
		{
			MethodName: "UpdateNftContract",
			Handler:    _NFTService_UpdateNftContract_Handler,
		},
		{
			MethodName: "ChangeNftContractStatus",
			Handler:    _NFTService_ChangeNftContractStatus_Handler,
		},
		{
			MethodName: "CheckBlindBoxTx",
			Handler:    _NFTService_CheckBlindBoxTx_Handler,
		},
		{
			MethodName: "MemberNftPagination",
			Handler:    _NFTService_MemberNftPagination_Handler,
		},
		{
			MethodName: "NftMemberPagination",
			Handler:    _NFTService_NftMemberPagination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nft/nft.proto",
}
