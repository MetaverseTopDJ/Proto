// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: remix/remix.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Remix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId   uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Series       string `protobuf:"bytes,3,opt,name=series,proto3" json:"series"`
	Title        string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle     string `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Introduction string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction"`
	Cover        string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover"`
	Background   string `protobuf:"bytes,9,opt,name=background,proto3" json:"background"`
	Price        uint64 `protobuf:"varint,10,opt,name=price,proto3" json:"price"`
	Decimal      uint64 `protobuf:"varint,11,opt,name=decimal,proto3" json:"decimal"`
	Top          bool   `protobuf:"varint,12,opt,name=top,proto3" json:"top"`
	Status       uint64 `protobuf:"varint,13,opt,name=status,proto3" json:"status"`
	CreatedAt    string `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt    string `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *Remix) Reset() {
	*x = Remix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remix) ProtoMessage() {}

func (x *Remix) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remix.ProtoReflect.Descriptor instead.
func (*Remix) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{0}
}

func (x *Remix) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Remix) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *Remix) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *Remix) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Remix) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Remix) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Remix) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Remix) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Remix) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *Remix) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Remix) GetDecimal() uint64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *Remix) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

func (x *Remix) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Remix) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Remix) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// VaildRemix 返回有效的互动
type VaildRemix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId   uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Series       string `protobuf:"bytes,3,opt,name=series,proto3" json:"series"`
	Title        string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle     string `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Introduction string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction"`
	Cover        string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover"`
	Background   string `protobuf:"bytes,9,opt,name=background,proto3" json:"background"`
	Price        uint64 `protobuf:"varint,10,opt,name=price,proto3" json:"price"`
	Decimal      uint64 `protobuf:"varint,11,opt,name=decimal,proto3" json:"decimal"`
	StartAt      uint64 `protobuf:"varint,12,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt        uint64 `protobuf:"varint,13,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	Open         bool   `protobuf:"varint,14,opt,name=open,proto3" json:"open"`
	Free         bool   `protobuf:"varint,15,opt,name=free,proto3" json:"free"`
	Total        uint64 `protobuf:"varint,16,opt,name=total,proto3" json:"total"`
	Remain       uint64 `protobuf:"varint,17,opt,name=remain,proto3" json:"remain"`
	Contract     string `protobuf:"bytes,18,opt,name=contract,proto3" json:"contract"`
}

func (x *VaildRemix) Reset() {
	*x = VaildRemix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaildRemix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaildRemix) ProtoMessage() {}

func (x *VaildRemix) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaildRemix.ProtoReflect.Descriptor instead.
func (*VaildRemix) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{1}
}

func (x *VaildRemix) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VaildRemix) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *VaildRemix) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *VaildRemix) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VaildRemix) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *VaildRemix) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VaildRemix) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *VaildRemix) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *VaildRemix) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *VaildRemix) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *VaildRemix) GetDecimal() uint64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *VaildRemix) GetStartAt() uint64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *VaildRemix) GetEndAt() uint64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *VaildRemix) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *VaildRemix) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *VaildRemix) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VaildRemix) GetRemain() uint64 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *VaildRemix) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

// OpenseaAssetPost 获取 Opensea 上的资产
type OpenseaAssetPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract"`
	Token    uint64 `protobuf:"varint,2,opt,name=token,proto3" json:"token"`
}

func (x *OpenseaAssetPost) Reset() {
	*x = OpenseaAssetPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenseaAssetPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenseaAssetPost) ProtoMessage() {}

func (x *OpenseaAssetPost) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenseaAssetPost.ProtoReflect.Descriptor instead.
func (*OpenseaAssetPost) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{2}
}

func (x *OpenseaAssetPost) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *OpenseaAssetPost) GetToken() uint64 {
	if x != nil {
		return x.Token
	}
	return 0
}

// RemixMintPost 互动 Mint
type RemixMintPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract"`
	Token    uint64 `protobuf:"varint,2,opt,name=token,proto3" json:"token"`
}

func (x *RemixMintPost) Reset() {
	*x = RemixMintPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixMintPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixMintPost) ProtoMessage() {}

func (x *RemixMintPost) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixMintPost.ProtoReflect.Descriptor instead.
func (*RemixMintPost) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{3}
}

func (x *RemixMintPost) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *RemixMintPost) GetToken() uint64 {
	if x != nil {
		return x.Token
	}
	return 0
}

// CheckRemixMintPost 检查 Mint 结果
type CheckRemixMintPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash"`
}

func (x *CheckRemixMintPost) Reset() {
	*x = CheckRemixMintPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRemixMintPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRemixMintPost) ProtoMessage() {}

func (x *CheckRemixMintPost) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRemixMintPost.ProtoReflect.Descriptor instead.
func (*CheckRemixMintPost) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{4}
}

func (x *CheckRemixMintPost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckRemixMintPost) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// RemixPost 创建 互动
type CreateRemixPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Series       string `protobuf:"bytes,3,opt,name=series,proto3" json:"series"`
	Title        string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle     string `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Introduction string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction"`
	Cover        string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover"`
	Background   string `protobuf:"bytes,9,opt,name=background,proto3" json:"background"`
	Price        uint64 `protobuf:"varint,10,opt,name=price,proto3" json:"price"`
	Decimal      uint64 `protobuf:"varint,11,opt,name=decimal,proto3" json:"decimal"`
	Top          bool   `protobuf:"varint,12,opt,name=top,proto3" json:"top"`
}

func (x *CreateRemixPost) Reset() {
	*x = CreateRemixPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemixPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemixPost) ProtoMessage() {}

func (x *CreateRemixPost) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemixPost.ProtoReflect.Descriptor instead.
func (*CreateRemixPost) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRemixPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateRemixPost) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *CreateRemixPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateRemixPost) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *CreateRemixPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRemixPost) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *CreateRemixPost) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CreateRemixPost) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *CreateRemixPost) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateRemixPost) GetDecimal() uint64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *CreateRemixPost) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

// UpdateRemixPost 更新 互动
type UpdateRemixPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId   uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Series       string `protobuf:"bytes,3,opt,name=series,proto3" json:"series"`
	Title        string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle     string `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Introduction string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction"`
	Cover        string `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover"`
	Background   string `protobuf:"bytes,9,opt,name=background,proto3" json:"background"`
	Price        uint64 `protobuf:"varint,10,opt,name=price,proto3" json:"price"`
	Decimal      uint64 `protobuf:"varint,11,opt,name=decimal,proto3" json:"decimal"`
	Top          bool   `protobuf:"varint,12,opt,name=top,proto3" json:"top"`
}

func (x *UpdateRemixPost) Reset() {
	*x = UpdateRemixPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRemixPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemixPost) ProtoMessage() {}

func (x *UpdateRemixPost) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemixPost.ProtoReflect.Descriptor instead.
func (*UpdateRemixPost) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRemixPost) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRemixPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateRemixPost) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *UpdateRemixPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateRemixPost) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *UpdateRemixPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateRemixPost) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *UpdateRemixPost) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *UpdateRemixPost) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *UpdateRemixPost) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateRemixPost) GetDecimal() uint64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *UpdateRemixPost) GetTop() bool {
	if x != nil {
		return x.Top
	}
	return false
}

// OpenseaAssetResponse 检查资产返回
type CheckOpenseaAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                           `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *CheckOpenseaAssetResponse_Asset `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CheckOpenseaAssetResponse) Reset() {
	*x = CheckOpenseaAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOpenseaAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOpenseaAssetResponse) ProtoMessage() {}

func (x *CheckOpenseaAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOpenseaAssetResponse.ProtoReflect.Descriptor instead.
func (*CheckOpenseaAssetResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{7}
}

func (x *CheckOpenseaAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckOpenseaAssetResponse) GetData() *CheckOpenseaAssetResponse_Asset {
	if x != nil {
		return x.Data
	}
	return nil
}

// PreRemixMintResponse 返回 预先 Mint 数据
type PreRemixMintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                        `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *PreRemixMintResponse_PreMint `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *PreRemixMintResponse) Reset() {
	*x = PreRemixMintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreRemixMintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreRemixMintResponse) ProtoMessage() {}

func (x *PreRemixMintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreRemixMintResponse.ProtoReflect.Descriptor instead.
func (*PreRemixMintResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{8}
}

func (x *PreRemixMintResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PreRemixMintResponse) GetData() *PreRemixMintResponse_PreMint {
	if x != nil {
		return x.Data
	}
	return nil
}

// RemixSignatureResponse 免费 Mint 返回
type RemixSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                       `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *RemixSignatureResponse_Sign `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *RemixSignatureResponse) Reset() {
	*x = RemixSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixSignatureResponse) ProtoMessage() {}

func (x *RemixSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixSignatureResponse.ProtoReflect.Descriptor instead.
func (*RemixSignatureResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{9}
}

func (x *RemixSignatureResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemixSignatureResponse) GetData() *RemixSignatureResponse_Sign {
	if x != nil {
		return x.Data
	}
	return nil
}

// RemixResponse 返回
type RemixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *Remix `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *RemixResponse) Reset() {
	*x = RemixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixResponse) ProtoMessage() {}

func (x *RemixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixResponse.ProtoReflect.Descriptor instead.
func (*RemixResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{10}
}

func (x *RemixResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemixResponse) GetData() *Remix {
	if x != nil {
		return x.Data
	}
	return nil
}

// VaildRemixResponse 返回有效的 联动
type VaildRemixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *VaildRemix `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *VaildRemixResponse) Reset() {
	*x = VaildRemixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaildRemixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaildRemixResponse) ProtoMessage() {}

func (x *VaildRemixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaildRemixResponse.ProtoReflect.Descriptor instead.
func (*VaildRemixResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{11}
}

func (x *VaildRemixResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VaildRemixResponse) GetData() *VaildRemix {
	if x != nil {
		return x.Data
	}
	return nil
}

// RemixsResponse 返回 列表
type RemixsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    []*Remix `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *RemixsResponse) Reset() {
	*x = RemixsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixsResponse) ProtoMessage() {}

func (x *RemixsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixsResponse.ProtoReflect.Descriptor instead.
func (*RemixsResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{12}
}

func (x *RemixsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemixsResponse) GetData() []*Remix {
	if x != nil {
		return x.Data
	}
	return nil
}

// RemixPaginationResponse 返回 分页
type RemixPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                          `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *RemixPaginationResponse_Remixs `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *RemixPaginationResponse) Reset() {
	*x = RemixPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixPaginationResponse) ProtoMessage() {}

func (x *RemixPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixPaginationResponse.ProtoReflect.Descriptor instead.
func (*RemixPaginationResponse) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{13}
}

func (x *RemixPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemixPaginationResponse) GetData() *RemixPaginationResponse_Remixs {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckOpenseaAssetResponse_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mint  bool   `protobuf:"varint,1,opt,name=mint,proto3" json:"mint"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	URL   string `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL"`
}

func (x *CheckOpenseaAssetResponse_Asset) Reset() {
	*x = CheckOpenseaAssetResponse_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOpenseaAssetResponse_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOpenseaAssetResponse_Asset) ProtoMessage() {}

func (x *CheckOpenseaAssetResponse_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOpenseaAssetResponse_Asset.ProtoReflect.Descriptor instead.
func (*CheckOpenseaAssetResponse_Asset) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CheckOpenseaAssetResponse_Asset) GetMint() bool {
	if x != nil {
		return x.Mint
	}
	return false
}

func (x *CheckOpenseaAssetResponse_Asset) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CheckOpenseaAssetResponse_Asset) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type PreRemixMintResponse_PreMint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price   uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price"`
	Decimal uint64 `protobuf:"varint,2,opt,name=decimal,proto3" json:"decimal"`
	Free    bool   `protobuf:"varint,3,opt,name=free,proto3" json:"free"`
}

func (x *PreRemixMintResponse_PreMint) Reset() {
	*x = PreRemixMintResponse_PreMint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreRemixMintResponse_PreMint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreRemixMintResponse_PreMint) ProtoMessage() {}

func (x *PreRemixMintResponse_PreMint) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreRemixMintResponse_PreMint.ProtoReflect.Descriptor instead.
func (*PreRemixMintResponse_PreMint) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PreRemixMintResponse_PreMint) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PreRemixMintResponse_PreMint) GetDecimal() uint64 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *PreRemixMintResponse_PreMint) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

type RemixSignatureResponse_Sign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract  string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address"`
	Code      uint64 `protobuf:"varint,3,opt,name=code,proto3" json:"code"`
	Price     uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price"`
	Num       uint64 `protobuf:"varint,5,opt,name=num,proto3" json:"num"`
	Signature string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature"`
	Timestamp uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp"`
}

func (x *RemixSignatureResponse_Sign) Reset() {
	*x = RemixSignatureResponse_Sign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixSignatureResponse_Sign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixSignatureResponse_Sign) ProtoMessage() {}

func (x *RemixSignatureResponse_Sign) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixSignatureResponse_Sign.ProtoReflect.Descriptor instead.
func (*RemixSignatureResponse_Sign) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{9, 0}
}

func (x *RemixSignatureResponse_Sign) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *RemixSignatureResponse_Sign) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RemixSignatureResponse_Sign) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RemixSignatureResponse_Sign) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RemixSignatureResponse_Sign) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RemixSignatureResponse_Sign) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *RemixSignatureResponse_Sign) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RemixPaginationResponse_Remixs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*Remix `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *RemixPaginationResponse_Remixs) Reset() {
	*x = RemixPaginationResponse_Remixs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remix_remix_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemixPaginationResponse_Remixs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixPaginationResponse_Remixs) ProtoMessage() {}

func (x *RemixPaginationResponse_Remixs) ProtoReflect() protoreflect.Message {
	mi := &file_remix_remix_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixPaginationResponse_Remixs.ProtoReflect.Descriptor instead.
func (*RemixPaginationResponse_Remixs) Descriptor() ([]byte, []int) {
	return file_remix_remix_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RemixPaginationResponse_Remixs) GetList() []*Remix {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RemixPaginationResponse_Remixs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_remix_remix_proto protoreflect.FileDescriptor

var file_remix_remix_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x72, 0x65,
	0x6d, 0x69, 0x78, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x72, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x72,
	0x65, 0x6d, 0x69, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2f, 0x72, 0x65, 0x6d, 0x69, 0x78,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0a, 0x05, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd8,
	0x03, 0x0a, 0x0a, 0x56, 0x61, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x44, 0x0a, 0x10, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x41, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x4d, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x22, 0xcb,
	0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x22, 0xb6, 0x01, 0x0a,
	0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x43, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x50,
	0x72, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x4d, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x22, 0xa1, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69,
	0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb4, 0x01,
	0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x55, 0x0a, 0x12, 0x56, 0x61, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x56, 0x61, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69,
	0x78, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x40, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x73, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xcd, 0x13, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x69, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e,
	0x74, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x50, 0x72, 0x65,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x46, 0x72, 0x65, 0x65,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x52,
	0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78,
	0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x78, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x69, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x05, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x65, 0x6d,
	0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x56, 0x61, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x56, 0x61, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65,
	0x6d, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x08, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72,
	0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x73, 0x12, 0x10,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x69, 0x78, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72,
	0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69,
	0x78, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0b, 0x44, 0x6f, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x16,
	0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x44, 0x6f, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x6d, 0x69,
	0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65,
	0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65,
	0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72,
	0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e,
	0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65,
	0x6d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x17, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6d,
	0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65,
	0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x6d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72,
	0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x15, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_remix_remix_proto_rawDescOnce sync.Once
	file_remix_remix_proto_rawDescData = file_remix_remix_proto_rawDesc
)

func file_remix_remix_proto_rawDescGZIP() []byte {
	file_remix_remix_proto_rawDescOnce.Do(func() {
		file_remix_remix_proto_rawDescData = protoimpl.X.CompressGZIP(file_remix_remix_proto_rawDescData)
	})
	return file_remix_remix_proto_rawDescData
}

var file_remix_remix_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_remix_remix_proto_goTypes = []interface{}{
	(*Remix)(nil),                               // 0: remix.Remix
	(*VaildRemix)(nil),                          // 1: remix.VaildRemix
	(*OpenseaAssetPost)(nil),                    // 2: remix.OpenseaAssetPost
	(*RemixMintPost)(nil),                       // 3: remix.RemixMintPost
	(*CheckRemixMintPost)(nil),                  // 4: remix.CheckRemixMintPost
	(*CreateRemixPost)(nil),                     // 5: remix.CreateRemixPost
	(*UpdateRemixPost)(nil),                     // 6: remix.UpdateRemixPost
	(*CheckOpenseaAssetResponse)(nil),           // 7: remix.CheckOpenseaAssetResponse
	(*PreRemixMintResponse)(nil),                // 8: remix.PreRemixMintResponse
	(*RemixSignatureResponse)(nil),              // 9: remix.RemixSignatureResponse
	(*RemixResponse)(nil),                       // 10: remix.RemixResponse
	(*VaildRemixResponse)(nil),                  // 11: remix.VaildRemixResponse
	(*RemixsResponse)(nil),                      // 12: remix.RemixsResponse
	(*RemixPaginationResponse)(nil),             // 13: remix.RemixPaginationResponse
	(*CheckOpenseaAssetResponse_Asset)(nil),     // 14: remix.CheckOpenseaAssetResponse.Asset
	(*PreRemixMintResponse_PreMint)(nil),        // 15: remix.PreRemixMintResponse.PreMint
	(*RemixSignatureResponse_Sign)(nil),         // 16: remix.RemixSignatureResponse.Sign
	(*RemixPaginationResponse_Remixs)(nil),      // 17: remix.RemixPaginationResponse.Remixs
	(*EmptyPost)(nil),                           // 18: global.EmptyPost
	(*InfoPost)(nil),                            // 19: global.InfoPost
	(*PaginationPost)(nil),                      // 20: global.PaginationPost
	(*DoRemixWorkPost)(nil),                     // 21: remix.DoRemixWorkPost
	(*RemixWorkPaginationPost)(nil),             // 22: remix.RemixWorkPaginationPost
	(*CreateRemixWorkPost)(nil),                 // 23: remix.CreateRemixWorkPost
	(*UpdateRemixWorkPost)(nil),                 // 24: remix.UpdateRemixWorkPost
	(*RemixExchangePaginationPost)(nil),         // 25: remix.RemixExchangePaginationPost
	(*RemixWhiteAddressPaginationPost)(nil),     // 26: remix.RemixWhiteAddressPaginationPost
	(*CreateRemixWhiteAddressPost)(nil),         // 27: remix.CreateRemixWhiteAddressPost
	(*RemoveRemixWhiteAddressPost)(nil),         // 28: remix.RemoveRemixWhiteAddressPost
	(*RemixStagePost)(nil),                      // 29: remix.RemixStagePost
	(*ModifyRemixStagePost)(nil),                // 30: remix.ModifyRemixStagePost
	(*CreateContractPost)(nil),                  // 31: global.CreateContractPost
	(*UpdateContractPost)(nil),                  // 32: global.UpdateContractPost
	(*ResultResponse)(nil),                      // 33: global.ResultResponse
	(*RemixWorkResponse)(nil),                   // 34: remix.RemixWorkResponse
	(*RemixWorkPaginationResponse)(nil),         // 35: remix.RemixWorkPaginationResponse
	(*RemixExchangePaginationResponse)(nil),     // 36: remix.RemixExchangePaginationResponse
	(*RemixWhiteAddressPaginationResponse)(nil), // 37: remix.RemixWhiteAddressPaginationResponse
	(*RemixStageResponse)(nil),                  // 38: remix.RemixStageResponse
	(*RemixStagesResponse)(nil),                 // 39: remix.RemixStagesResponse
	(*RemixStagePaginationResponse)(nil),        // 40: remix.RemixStagePaginationResponse
	(*ContractResponse)(nil),                    // 41: global.ContractResponse
	(*ContractsResponse)(nil),                   // 42: global.ContractsResponse
	(*ContractPaginationResponse)(nil),          // 43: global.ContractPaginationResponse
}
var file_remix_remix_proto_depIdxs = []int32{
	14, // 0: remix.CheckOpenseaAssetResponse.data:type_name -> remix.CheckOpenseaAssetResponse.Asset
	15, // 1: remix.PreRemixMintResponse.data:type_name -> remix.PreRemixMintResponse.PreMint
	16, // 2: remix.RemixSignatureResponse.data:type_name -> remix.RemixSignatureResponse.Sign
	0,  // 3: remix.RemixResponse.data:type_name -> remix.Remix
	1,  // 4: remix.VaildRemixResponse.data:type_name -> remix.VaildRemix
	0,  // 5: remix.RemixsResponse.data:type_name -> remix.Remix
	17, // 6: remix.RemixPaginationResponse.data:type_name -> remix.RemixPaginationResponse.Remixs
	0,  // 7: remix.RemixPaginationResponse.Remixs.list:type_name -> remix.Remix
	2,  // 8: remix.RemixService.CheckRemixOpenseaAsset:input_type -> remix.OpenseaAssetPost
	18, // 9: remix.RemixService.PreRemixMint:input_type -> global.EmptyPost
	3,  // 10: remix.RemixService.RemixFreeMint:input_type -> remix.RemixMintPost
	3,  // 11: remix.RemixService.RemixMint:input_type -> remix.RemixMintPost
	4,  // 12: remix.RemixService.CheckRemixMint:input_type -> remix.CheckRemixMintPost
	19, // 13: remix.RemixService.Remix:input_type -> global.InfoPost
	18, // 14: remix.RemixService.VaildRemix:input_type -> global.EmptyPost
	19, // 15: remix.RemixService.RemixByContract:input_type -> global.InfoPost
	18, // 16: remix.RemixService.TopRemix:input_type -> global.EmptyPost
	19, // 17: remix.RemixService.Remixs:input_type -> global.InfoPost
	20, // 18: remix.RemixService.RemixPagination:input_type -> global.PaginationPost
	5,  // 19: remix.RemixService.CreateRemix:input_type -> remix.CreateRemixPost
	6,  // 20: remix.RemixService.UpdateRemix:input_type -> remix.UpdateRemixPost
	19, // 21: remix.RemixService.RemixWork:input_type -> global.InfoPost
	21, // 22: remix.RemixService.DoRemixWork:input_type -> remix.DoRemixWorkPost
	19, // 23: remix.RemixService.UseWork:input_type -> global.InfoPost
	22, // 24: remix.RemixService.RemixWorkPagination:input_type -> remix.RemixWorkPaginationPost
	23, // 25: remix.RemixService.CreateRemixWork:input_type -> remix.CreateRemixWorkPost
	24, // 26: remix.RemixService.UpdateRemixWork:input_type -> remix.UpdateRemixWorkPost
	25, // 27: remix.RemixService.RemixExchangePagination:input_type -> remix.RemixExchangePaginationPost
	26, // 28: remix.RemixService.RemixWhiteAddressPagination:input_type -> remix.RemixWhiteAddressPaginationPost
	27, // 29: remix.RemixService.CreateRemixWhiteAddress:input_type -> remix.CreateRemixWhiteAddressPost
	28, // 30: remix.RemixService.RemoveRemixWhiteAddress:input_type -> remix.RemoveRemixWhiteAddressPost
	29, // 31: remix.RemixService.BlindBoxStage:input_type -> remix.RemixStagePost
	19, // 32: remix.RemixService.BlindBoxStages:input_type -> global.InfoPost
	19, // 33: remix.RemixService.BlindBoxStagePagination:input_type -> global.InfoPost
	30, // 34: remix.RemixService.CreateBlindBoxStage:input_type -> remix.ModifyRemixStagePost
	30, // 35: remix.RemixService.UpdateBlindBoxStage:input_type -> remix.ModifyRemixStagePost
	29, // 36: remix.RemixService.RemoveBlindBoxStage:input_type -> remix.RemixStagePost
	19, // 37: remix.RemixService.RemixContract:input_type -> global.InfoPost
	18, // 38: remix.RemixService.RemixContracts:input_type -> global.EmptyPost
	20, // 39: remix.RemixService.RemixContractPagination:input_type -> global.PaginationPost
	31, // 40: remix.RemixService.CreateRemixContract:input_type -> global.CreateContractPost
	32, // 41: remix.RemixService.UpdateRemixContract:input_type -> global.UpdateContractPost
	7,  // 42: remix.RemixService.CheckRemixOpenseaAsset:output_type -> remix.CheckOpenseaAssetResponse
	8,  // 43: remix.RemixService.PreRemixMint:output_type -> remix.PreRemixMintResponse
	9,  // 44: remix.RemixService.RemixFreeMint:output_type -> remix.RemixSignatureResponse
	33, // 45: remix.RemixService.RemixMint:output_type -> global.ResultResponse
	33, // 46: remix.RemixService.CheckRemixMint:output_type -> global.ResultResponse
	10, // 47: remix.RemixService.Remix:output_type -> remix.RemixResponse
	11, // 48: remix.RemixService.VaildRemix:output_type -> remix.VaildRemixResponse
	10, // 49: remix.RemixService.RemixByContract:output_type -> remix.RemixResponse
	10, // 50: remix.RemixService.TopRemix:output_type -> remix.RemixResponse
	12, // 51: remix.RemixService.Remixs:output_type -> remix.RemixsResponse
	13, // 52: remix.RemixService.RemixPagination:output_type -> remix.RemixPaginationResponse
	10, // 53: remix.RemixService.CreateRemix:output_type -> remix.RemixResponse
	10, // 54: remix.RemixService.UpdateRemix:output_type -> remix.RemixResponse
	34, // 55: remix.RemixService.RemixWork:output_type -> remix.RemixWorkResponse
	34, // 56: remix.RemixService.DoRemixWork:output_type -> remix.RemixWorkResponse
	33, // 57: remix.RemixService.UseWork:output_type -> global.ResultResponse
	35, // 58: remix.RemixService.RemixWorkPagination:output_type -> remix.RemixWorkPaginationResponse
	34, // 59: remix.RemixService.CreateRemixWork:output_type -> remix.RemixWorkResponse
	34, // 60: remix.RemixService.UpdateRemixWork:output_type -> remix.RemixWorkResponse
	36, // 61: remix.RemixService.RemixExchangePagination:output_type -> remix.RemixExchangePaginationResponse
	37, // 62: remix.RemixService.RemixWhiteAddressPagination:output_type -> remix.RemixWhiteAddressPaginationResponse
	33, // 63: remix.RemixService.CreateRemixWhiteAddress:output_type -> global.ResultResponse
	33, // 64: remix.RemixService.RemoveRemixWhiteAddress:output_type -> global.ResultResponse
	38, // 65: remix.RemixService.BlindBoxStage:output_type -> remix.RemixStageResponse
	39, // 66: remix.RemixService.BlindBoxStages:output_type -> remix.RemixStagesResponse
	40, // 67: remix.RemixService.BlindBoxStagePagination:output_type -> remix.RemixStagePaginationResponse
	38, // 68: remix.RemixService.CreateBlindBoxStage:output_type -> remix.RemixStageResponse
	38, // 69: remix.RemixService.UpdateBlindBoxStage:output_type -> remix.RemixStageResponse
	33, // 70: remix.RemixService.RemoveBlindBoxStage:output_type -> global.ResultResponse
	41, // 71: remix.RemixService.RemixContract:output_type -> global.ContractResponse
	42, // 72: remix.RemixService.RemixContracts:output_type -> global.ContractsResponse
	43, // 73: remix.RemixService.RemixContractPagination:output_type -> global.ContractPaginationResponse
	41, // 74: remix.RemixService.CreateRemixContract:output_type -> global.ContractResponse
	41, // 75: remix.RemixService.UpdateRemixContract:output_type -> global.ContractResponse
	42, // [42:76] is the sub-list for method output_type
	8,  // [8:42] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_remix_remix_proto_init() }
func file_remix_remix_proto_init() {
	if File_remix_remix_proto != nil {
		return
	}
	file_global_global_proto_init()
	file_global_contract_proto_init()
	file_remix_remix_work_proto_init()
	file_remix_remix_stage_proto_init()
	file_remix_remix_exchange_proto_init()
	file_remix_remix_white_address_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_remix_remix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Remix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaildRemix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenseaAssetPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixMintPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRemixMintPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemixPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRemixPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOpenseaAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreRemixMintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaildRemixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOpenseaAssetResponse_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreRemixMintResponse_PreMint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixSignatureResponse_Sign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remix_remix_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemixPaginationResponse_Remixs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_remix_remix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_remix_remix_proto_goTypes,
		DependencyIndexes: file_remix_remix_proto_depIdxs,
		MessageInfos:      file_remix_remix_proto_msgTypes,
	}.Build()
	File_remix_remix_proto = out.File
	file_remix_remix_proto_rawDesc = nil
	file_remix_remix_proto_goTypes = nil
	file_remix_remix_proto_depIdxs = nil
}
