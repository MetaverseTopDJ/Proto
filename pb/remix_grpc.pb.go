// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemixServiceClient is the client API for RemixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemixServiceClient interface {
	// 互动
	CheckRemixOpenseaAsset(ctx context.Context, in *OpenseaAssetPost, opts ...grpc.CallOption) (*CheckOpenseaAssetResponse, error)
	PreRemixMint(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*PreRemixMintResponse, error)
	RemixFreeMint(ctx context.Context, in *RemixMintPost, opts ...grpc.CallOption) (*RemixSignatureResponse, error)
	RemixMint(ctx context.Context, in *RemixMintPost, opts ...grpc.CallOption) (*ResultResponse, error)
	CheckRemixMint(ctx context.Context, in *CheckRemixMintPost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 互动
	Remix(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixResponse, error)
	VaildRemix(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*VaildRemixResponse, error)
	RemixByContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixResponse, error)
	TopRemix(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*RemixResponse, error)
	Remixs(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixsResponse, error)
	RemixPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*RemixPaginationResponse, error)
	CreateRemix(ctx context.Context, in *CreateRemixPost, opts ...grpc.CallOption) (*RemixResponse, error)
	UpdateRemix(ctx context.Context, in *UpdateRemixPost, opts ...grpc.CallOption) (*RemixResponse, error)
	// 互动资源
	RemixWork(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixWorkResponse, error)
	DoRemixWork(ctx context.Context, in *DoRemixWorkPost, opts ...grpc.CallOption) (*RemixWorkResponse, error)
	UseWork(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	RemixWorkPagination(ctx context.Context, in *RemixWorkPaginationPost, opts ...grpc.CallOption) (*RemixWorkPaginationResponse, error)
	CreateRemixWork(ctx context.Context, in *CreateRemixWorkPost, opts ...grpc.CallOption) (*RemixWorkResponse, error)
	UpdateRemixWork(ctx context.Context, in *UpdateRemixWorkPost, opts ...grpc.CallOption) (*RemixWorkResponse, error)
	// 互动兑换记录
	RemixExchangePagination(ctx context.Context, in *RemixExchangePaginationPost, opts ...grpc.CallOption) (*RemixExchangePaginationResponse, error)
	// 互动白名单
	RemixWhiteAddressPagination(ctx context.Context, in *RemixWhiteAddressPaginationPost, opts ...grpc.CallOption) (*RemixWhiteAddressPaginationResponse, error)
	CreateRemixWhiteAddress(ctx context.Context, in *CreateRemixWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error)
	RemoveRemixWhiteAddress(ctx context.Context, in *RemoveRemixWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 互动阶段
	BlindBoxStage(ctx context.Context, in *RemixStagePost, opts ...grpc.CallOption) (*RemixStageResponse, error)
	BlindBoxStages(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixStagesResponse, error)
	BlindBoxStagePagination(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixStagePaginationResponse, error)
	CreateBlindBoxStage(ctx context.Context, in *ModifyRemixStagePost, opts ...grpc.CallOption) (*RemixStageResponse, error)
	UpdateBlindBoxStage(ctx context.Context, in *ModifyRemixStagePost, opts ...grpc.CallOption) (*RemixStageResponse, error)
	RemoveBlindBoxStage(ctx context.Context, in *RemixStagePost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 互动合约
	RemixContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContractResponse, error)
	RemixContracts(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractsResponse, error)
	RemixContractPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*ContractPaginationResponse, error)
	CreateRemixContract(ctx context.Context, in *CreateContractPost, opts ...grpc.CallOption) (*ContractResponse, error)
	UpdateRemixContract(ctx context.Context, in *UpdateContractPost, opts ...grpc.CallOption) (*ContractResponse, error)
}

type remixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemixServiceClient(cc grpc.ClientConnInterface) RemixServiceClient {
	return &remixServiceClient{cc}
}

func (c *remixServiceClient) CheckRemixOpenseaAsset(ctx context.Context, in *OpenseaAssetPost, opts ...grpc.CallOption) (*CheckOpenseaAssetResponse, error) {
	out := new(CheckOpenseaAssetResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CheckRemixOpenseaAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) PreRemixMint(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*PreRemixMintResponse, error) {
	out := new(PreRemixMintResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/PreRemixMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixFreeMint(ctx context.Context, in *RemixMintPost, opts ...grpc.CallOption) (*RemixSignatureResponse, error) {
	out := new(RemixSignatureResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixFreeMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixMint(ctx context.Context, in *RemixMintPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) CheckRemixMint(ctx context.Context, in *CheckRemixMintPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CheckRemixMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) Remix(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixResponse, error) {
	out := new(RemixResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/Remix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) VaildRemix(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*VaildRemixResponse, error) {
	out := new(VaildRemixResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/VaildRemix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixByContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixResponse, error) {
	out := new(RemixResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) TopRemix(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*RemixResponse, error) {
	out := new(RemixResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/TopRemix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) Remixs(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixsResponse, error) {
	out := new(RemixsResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/Remixs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*RemixPaginationResponse, error) {
	out := new(RemixPaginationResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) CreateRemix(ctx context.Context, in *CreateRemixPost, opts ...grpc.CallOption) (*RemixResponse, error) {
	out := new(RemixResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CreateRemix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) UpdateRemix(ctx context.Context, in *UpdateRemixPost, opts ...grpc.CallOption) (*RemixResponse, error) {
	out := new(RemixResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/UpdateRemix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixWork(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixWorkResponse, error) {
	out := new(RemixWorkResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) DoRemixWork(ctx context.Context, in *DoRemixWorkPost, opts ...grpc.CallOption) (*RemixWorkResponse, error) {
	out := new(RemixWorkResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/DoRemixWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) UseWork(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/UseWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixWorkPagination(ctx context.Context, in *RemixWorkPaginationPost, opts ...grpc.CallOption) (*RemixWorkPaginationResponse, error) {
	out := new(RemixWorkPaginationResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixWorkPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) CreateRemixWork(ctx context.Context, in *CreateRemixWorkPost, opts ...grpc.CallOption) (*RemixWorkResponse, error) {
	out := new(RemixWorkResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CreateRemixWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) UpdateRemixWork(ctx context.Context, in *UpdateRemixWorkPost, opts ...grpc.CallOption) (*RemixWorkResponse, error) {
	out := new(RemixWorkResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/UpdateRemixWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixExchangePagination(ctx context.Context, in *RemixExchangePaginationPost, opts ...grpc.CallOption) (*RemixExchangePaginationResponse, error) {
	out := new(RemixExchangePaginationResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixExchangePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixWhiteAddressPagination(ctx context.Context, in *RemixWhiteAddressPaginationPost, opts ...grpc.CallOption) (*RemixWhiteAddressPaginationResponse, error) {
	out := new(RemixWhiteAddressPaginationResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixWhiteAddressPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) CreateRemixWhiteAddress(ctx context.Context, in *CreateRemixWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CreateRemixWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemoveRemixWhiteAddress(ctx context.Context, in *RemoveRemixWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemoveRemixWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) BlindBoxStage(ctx context.Context, in *RemixStagePost, opts ...grpc.CallOption) (*RemixStageResponse, error) {
	out := new(RemixStageResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/BlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) BlindBoxStages(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixStagesResponse, error) {
	out := new(RemixStagesResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/BlindBoxStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) BlindBoxStagePagination(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*RemixStagePaginationResponse, error) {
	out := new(RemixStagePaginationResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/BlindBoxStagePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) CreateBlindBoxStage(ctx context.Context, in *ModifyRemixStagePost, opts ...grpc.CallOption) (*RemixStageResponse, error) {
	out := new(RemixStageResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CreateBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) UpdateBlindBoxStage(ctx context.Context, in *ModifyRemixStagePost, opts ...grpc.CallOption) (*RemixStageResponse, error) {
	out := new(RemixStageResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/UpdateBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemoveBlindBoxStage(ctx context.Context, in *RemixStagePost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemoveBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixContracts(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractsResponse, error) {
	out := new(ContractsResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) RemixContractPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*ContractPaginationResponse, error) {
	out := new(ContractPaginationResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/RemixContractPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) CreateRemixContract(ctx context.Context, in *CreateContractPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/CreateRemixContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remixServiceClient) UpdateRemixContract(ctx context.Context, in *UpdateContractPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/remix.RemixService/UpdateRemixContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemixServiceServer is the server API for RemixService service.
// All implementations must embed UnimplementedRemixServiceServer
// for forward compatibility
type RemixServiceServer interface {
	// 互动
	CheckRemixOpenseaAsset(context.Context, *OpenseaAssetPost) (*CheckOpenseaAssetResponse, error)
	PreRemixMint(context.Context, *EmptyPost) (*PreRemixMintResponse, error)
	RemixFreeMint(context.Context, *RemixMintPost) (*RemixSignatureResponse, error)
	RemixMint(context.Context, *RemixMintPost) (*ResultResponse, error)
	CheckRemixMint(context.Context, *CheckRemixMintPost) (*ResultResponse, error)
	// 互动
	Remix(context.Context, *InfoPost) (*RemixResponse, error)
	VaildRemix(context.Context, *EmptyPost) (*VaildRemixResponse, error)
	RemixByContract(context.Context, *InfoPost) (*RemixResponse, error)
	TopRemix(context.Context, *EmptyPost) (*RemixResponse, error)
	Remixs(context.Context, *InfoPost) (*RemixsResponse, error)
	RemixPagination(context.Context, *PaginationPost) (*RemixPaginationResponse, error)
	CreateRemix(context.Context, *CreateRemixPost) (*RemixResponse, error)
	UpdateRemix(context.Context, *UpdateRemixPost) (*RemixResponse, error)
	// 互动资源
	RemixWork(context.Context, *InfoPost) (*RemixWorkResponse, error)
	DoRemixWork(context.Context, *DoRemixWorkPost) (*RemixWorkResponse, error)
	UseWork(context.Context, *InfoPost) (*ResultResponse, error)
	RemixWorkPagination(context.Context, *RemixWorkPaginationPost) (*RemixWorkPaginationResponse, error)
	CreateRemixWork(context.Context, *CreateRemixWorkPost) (*RemixWorkResponse, error)
	UpdateRemixWork(context.Context, *UpdateRemixWorkPost) (*RemixWorkResponse, error)
	// 互动兑换记录
	RemixExchangePagination(context.Context, *RemixExchangePaginationPost) (*RemixExchangePaginationResponse, error)
	// 互动白名单
	RemixWhiteAddressPagination(context.Context, *RemixWhiteAddressPaginationPost) (*RemixWhiteAddressPaginationResponse, error)
	CreateRemixWhiteAddress(context.Context, *CreateRemixWhiteAddressPost) (*ResultResponse, error)
	RemoveRemixWhiteAddress(context.Context, *RemoveRemixWhiteAddressPost) (*ResultResponse, error)
	// 互动阶段
	BlindBoxStage(context.Context, *RemixStagePost) (*RemixStageResponse, error)
	BlindBoxStages(context.Context, *InfoPost) (*RemixStagesResponse, error)
	BlindBoxStagePagination(context.Context, *InfoPost) (*RemixStagePaginationResponse, error)
	CreateBlindBoxStage(context.Context, *ModifyRemixStagePost) (*RemixStageResponse, error)
	UpdateBlindBoxStage(context.Context, *ModifyRemixStagePost) (*RemixStageResponse, error)
	RemoveBlindBoxStage(context.Context, *RemixStagePost) (*ResultResponse, error)
	// 互动合约
	RemixContract(context.Context, *InfoPost) (*ContractResponse, error)
	RemixContracts(context.Context, *EmptyPost) (*ContractsResponse, error)
	RemixContractPagination(context.Context, *PaginationPost) (*ContractPaginationResponse, error)
	CreateRemixContract(context.Context, *CreateContractPost) (*ContractResponse, error)
	UpdateRemixContract(context.Context, *UpdateContractPost) (*ContractResponse, error)
	mustEmbedUnimplementedRemixServiceServer()
}

// UnimplementedRemixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemixServiceServer struct {
}

func (UnimplementedRemixServiceServer) CheckRemixOpenseaAsset(context.Context, *OpenseaAssetPost) (*CheckOpenseaAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRemixOpenseaAsset not implemented")
}
func (UnimplementedRemixServiceServer) PreRemixMint(context.Context, *EmptyPost) (*PreRemixMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreRemixMint not implemented")
}
func (UnimplementedRemixServiceServer) RemixFreeMint(context.Context, *RemixMintPost) (*RemixSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixFreeMint not implemented")
}
func (UnimplementedRemixServiceServer) RemixMint(context.Context, *RemixMintPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixMint not implemented")
}
func (UnimplementedRemixServiceServer) CheckRemixMint(context.Context, *CheckRemixMintPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRemixMint not implemented")
}
func (UnimplementedRemixServiceServer) Remix(context.Context, *InfoPost) (*RemixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remix not implemented")
}
func (UnimplementedRemixServiceServer) VaildRemix(context.Context, *EmptyPost) (*VaildRemixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaildRemix not implemented")
}
func (UnimplementedRemixServiceServer) RemixByContract(context.Context, *InfoPost) (*RemixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixByContract not implemented")
}
func (UnimplementedRemixServiceServer) TopRemix(context.Context, *EmptyPost) (*RemixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopRemix not implemented")
}
func (UnimplementedRemixServiceServer) Remixs(context.Context, *InfoPost) (*RemixsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remixs not implemented")
}
func (UnimplementedRemixServiceServer) RemixPagination(context.Context, *PaginationPost) (*RemixPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixPagination not implemented")
}
func (UnimplementedRemixServiceServer) CreateRemix(context.Context, *CreateRemixPost) (*RemixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemix not implemented")
}
func (UnimplementedRemixServiceServer) UpdateRemix(context.Context, *UpdateRemixPost) (*RemixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemix not implemented")
}
func (UnimplementedRemixServiceServer) RemixWork(context.Context, *InfoPost) (*RemixWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixWork not implemented")
}
func (UnimplementedRemixServiceServer) DoRemixWork(context.Context, *DoRemixWorkPost) (*RemixWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRemixWork not implemented")
}
func (UnimplementedRemixServiceServer) UseWork(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseWork not implemented")
}
func (UnimplementedRemixServiceServer) RemixWorkPagination(context.Context, *RemixWorkPaginationPost) (*RemixWorkPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixWorkPagination not implemented")
}
func (UnimplementedRemixServiceServer) CreateRemixWork(context.Context, *CreateRemixWorkPost) (*RemixWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemixWork not implemented")
}
func (UnimplementedRemixServiceServer) UpdateRemixWork(context.Context, *UpdateRemixWorkPost) (*RemixWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemixWork not implemented")
}
func (UnimplementedRemixServiceServer) RemixExchangePagination(context.Context, *RemixExchangePaginationPost) (*RemixExchangePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixExchangePagination not implemented")
}
func (UnimplementedRemixServiceServer) RemixWhiteAddressPagination(context.Context, *RemixWhiteAddressPaginationPost) (*RemixWhiteAddressPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixWhiteAddressPagination not implemented")
}
func (UnimplementedRemixServiceServer) CreateRemixWhiteAddress(context.Context, *CreateRemixWhiteAddressPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemixWhiteAddress not implemented")
}
func (UnimplementedRemixServiceServer) RemoveRemixWhiteAddress(context.Context, *RemoveRemixWhiteAddressPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemixWhiteAddress not implemented")
}
func (UnimplementedRemixServiceServer) BlindBoxStage(context.Context, *RemixStagePost) (*RemixStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxStage not implemented")
}
func (UnimplementedRemixServiceServer) BlindBoxStages(context.Context, *InfoPost) (*RemixStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxStages not implemented")
}
func (UnimplementedRemixServiceServer) BlindBoxStagePagination(context.Context, *InfoPost) (*RemixStagePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxStagePagination not implemented")
}
func (UnimplementedRemixServiceServer) CreateBlindBoxStage(context.Context, *ModifyRemixStagePost) (*RemixStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlindBoxStage not implemented")
}
func (UnimplementedRemixServiceServer) UpdateBlindBoxStage(context.Context, *ModifyRemixStagePost) (*RemixStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlindBoxStage not implemented")
}
func (UnimplementedRemixServiceServer) RemoveBlindBoxStage(context.Context, *RemixStagePost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlindBoxStage not implemented")
}
func (UnimplementedRemixServiceServer) RemixContract(context.Context, *InfoPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixContract not implemented")
}
func (UnimplementedRemixServiceServer) RemixContracts(context.Context, *EmptyPost) (*ContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixContracts not implemented")
}
func (UnimplementedRemixServiceServer) RemixContractPagination(context.Context, *PaginationPost) (*ContractPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemixContractPagination not implemented")
}
func (UnimplementedRemixServiceServer) CreateRemixContract(context.Context, *CreateContractPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemixContract not implemented")
}
func (UnimplementedRemixServiceServer) UpdateRemixContract(context.Context, *UpdateContractPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemixContract not implemented")
}
func (UnimplementedRemixServiceServer) mustEmbedUnimplementedRemixServiceServer() {}

// UnsafeRemixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemixServiceServer will
// result in compilation errors.
type UnsafeRemixServiceServer interface {
	mustEmbedUnimplementedRemixServiceServer()
}

func RegisterRemixServiceServer(s grpc.ServiceRegistrar, srv RemixServiceServer) {
	s.RegisterService(&RemixService_ServiceDesc, srv)
}

func _RemixService_CheckRemixOpenseaAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenseaAssetPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CheckRemixOpenseaAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CheckRemixOpenseaAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CheckRemixOpenseaAsset(ctx, req.(*OpenseaAssetPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_PreRemixMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).PreRemixMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/PreRemixMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).PreRemixMint(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixFreeMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixMintPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixFreeMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixFreeMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixFreeMint(ctx, req.(*RemixMintPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixMintPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixMint(ctx, req.(*RemixMintPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_CheckRemixMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRemixMintPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CheckRemixMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CheckRemixMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CheckRemixMint(ctx, req.(*CheckRemixMintPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_Remix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).Remix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/Remix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).Remix(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_VaildRemix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).VaildRemix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/VaildRemix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).VaildRemix(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixByContract(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_TopRemix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).TopRemix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/TopRemix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).TopRemix(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_Remixs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).Remixs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/Remixs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).Remixs(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_CreateRemix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemixPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CreateRemix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CreateRemix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CreateRemix(ctx, req.(*CreateRemixPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_UpdateRemix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemixPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).UpdateRemix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/UpdateRemix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).UpdateRemix(ctx, req.(*UpdateRemixPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixWork(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_DoRemixWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRemixWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).DoRemixWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/DoRemixWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).DoRemixWork(ctx, req.(*DoRemixWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_UseWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).UseWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/UseWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).UseWork(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixWorkPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixWorkPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixWorkPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixWorkPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixWorkPagination(ctx, req.(*RemixWorkPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_CreateRemixWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemixWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CreateRemixWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CreateRemixWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CreateRemixWork(ctx, req.(*CreateRemixWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_UpdateRemixWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemixWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).UpdateRemixWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/UpdateRemixWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).UpdateRemixWork(ctx, req.(*UpdateRemixWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixExchangePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixExchangePaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixExchangePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixExchangePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixExchangePagination(ctx, req.(*RemixExchangePaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixWhiteAddressPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixWhiteAddressPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixWhiteAddressPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixWhiteAddressPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixWhiteAddressPagination(ctx, req.(*RemixWhiteAddressPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_CreateRemixWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemixWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CreateRemixWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CreateRemixWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CreateRemixWhiteAddress(ctx, req.(*CreateRemixWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemoveRemixWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRemixWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemoveRemixWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemoveRemixWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemoveRemixWhiteAddress(ctx, req.(*RemoveRemixWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_BlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).BlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/BlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).BlindBoxStage(ctx, req.(*RemixStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_BlindBoxStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).BlindBoxStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/BlindBoxStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).BlindBoxStages(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_BlindBoxStagePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).BlindBoxStagePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/BlindBoxStagePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).BlindBoxStagePagination(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_CreateBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRemixStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CreateBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CreateBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CreateBlindBoxStage(ctx, req.(*ModifyRemixStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_UpdateBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRemixStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).UpdateBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/UpdateBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).UpdateBlindBoxStage(ctx, req.(*ModifyRemixStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemoveBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemixStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemoveBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemoveBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemoveBlindBoxStage(ctx, req.(*RemixStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixContract(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixContracts(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_RemixContractPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).RemixContractPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/RemixContractPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).RemixContractPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_CreateRemixContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).CreateRemixContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/CreateRemixContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).CreateRemixContract(ctx, req.(*CreateContractPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemixService_UpdateRemixContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemixServiceServer).UpdateRemixContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remix.RemixService/UpdateRemixContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemixServiceServer).UpdateRemixContract(ctx, req.(*UpdateContractPost))
	}
	return interceptor(ctx, in, info, handler)
}

// RemixService_ServiceDesc is the grpc.ServiceDesc for RemixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remix.RemixService",
	HandlerType: (*RemixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRemixOpenseaAsset",
			Handler:    _RemixService_CheckRemixOpenseaAsset_Handler,
		},
		{
			MethodName: "PreRemixMint",
			Handler:    _RemixService_PreRemixMint_Handler,
		},
		{
			MethodName: "RemixFreeMint",
			Handler:    _RemixService_RemixFreeMint_Handler,
		},
		{
			MethodName: "RemixMint",
			Handler:    _RemixService_RemixMint_Handler,
		},
		{
			MethodName: "CheckRemixMint",
			Handler:    _RemixService_CheckRemixMint_Handler,
		},
		{
			MethodName: "Remix",
			Handler:    _RemixService_Remix_Handler,
		},
		{
			MethodName: "VaildRemix",
			Handler:    _RemixService_VaildRemix_Handler,
		},
		{
			MethodName: "RemixByContract",
			Handler:    _RemixService_RemixByContract_Handler,
		},
		{
			MethodName: "TopRemix",
			Handler:    _RemixService_TopRemix_Handler,
		},
		{
			MethodName: "Remixs",
			Handler:    _RemixService_Remixs_Handler,
		},
		{
			MethodName: "RemixPagination",
			Handler:    _RemixService_RemixPagination_Handler,
		},
		{
			MethodName: "CreateRemix",
			Handler:    _RemixService_CreateRemix_Handler,
		},
		{
			MethodName: "UpdateRemix",
			Handler:    _RemixService_UpdateRemix_Handler,
		},
		{
			MethodName: "RemixWork",
			Handler:    _RemixService_RemixWork_Handler,
		},
		{
			MethodName: "DoRemixWork",
			Handler:    _RemixService_DoRemixWork_Handler,
		},
		{
			MethodName: "UseWork",
			Handler:    _RemixService_UseWork_Handler,
		},
		{
			MethodName: "RemixWorkPagination",
			Handler:    _RemixService_RemixWorkPagination_Handler,
		},
		{
			MethodName: "CreateRemixWork",
			Handler:    _RemixService_CreateRemixWork_Handler,
		},
		{
			MethodName: "UpdateRemixWork",
			Handler:    _RemixService_UpdateRemixWork_Handler,
		},
		{
			MethodName: "RemixExchangePagination",
			Handler:    _RemixService_RemixExchangePagination_Handler,
		},
		{
			MethodName: "RemixWhiteAddressPagination",
			Handler:    _RemixService_RemixWhiteAddressPagination_Handler,
		},
		{
			MethodName: "CreateRemixWhiteAddress",
			Handler:    _RemixService_CreateRemixWhiteAddress_Handler,
		},
		{
			MethodName: "RemoveRemixWhiteAddress",
			Handler:    _RemixService_RemoveRemixWhiteAddress_Handler,
		},
		{
			MethodName: "BlindBoxStage",
			Handler:    _RemixService_BlindBoxStage_Handler,
		},
		{
			MethodName: "BlindBoxStages",
			Handler:    _RemixService_BlindBoxStages_Handler,
		},
		{
			MethodName: "BlindBoxStagePagination",
			Handler:    _RemixService_BlindBoxStagePagination_Handler,
		},
		{
			MethodName: "CreateBlindBoxStage",
			Handler:    _RemixService_CreateBlindBoxStage_Handler,
		},
		{
			MethodName: "UpdateBlindBoxStage",
			Handler:    _RemixService_UpdateBlindBoxStage_Handler,
		},
		{
			MethodName: "RemoveBlindBoxStage",
			Handler:    _RemixService_RemoveBlindBoxStage_Handler,
		},
		{
			MethodName: "RemixContract",
			Handler:    _RemixService_RemixContract_Handler,
		},
		{
			MethodName: "RemixContracts",
			Handler:    _RemixService_RemixContracts_Handler,
		},
		{
			MethodName: "RemixContractPagination",
			Handler:    _RemixService_RemixContractPagination_Handler,
		},
		{
			MethodName: "CreateRemixContract",
			Handler:    _RemixService_CreateRemixContract_Handler,
		},
		{
			MethodName: "UpdateRemixContract",
			Handler:    _RemixService_UpdateRemixContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remix/remix.proto",
}
