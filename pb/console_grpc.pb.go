// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsoleServiceClient is the client API for ConsoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleServiceClient interface {
	// 菜单管理
	Menu(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MenuResponse, error)
	Menus(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MenusResponse, error)
	TopMenus(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MenusResponse, error)
	MenuRules(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MenuRulesResponse, error)
	MenuPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MenuPaginationResponse, error)
	CreateMenu(ctx context.Context, in *CreateMenuPost, opts ...grpc.CallOption) (*MenuResponse, error)
	UpdateMenu(ctx context.Context, in *UpdateMenuPost, opts ...grpc.CallOption) (*MenuResponse, error)
	ChangeMenuStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*MenuResponse, error)
	// 权限管理
	Rule(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RuleResponse, error)
	//  rpc Rules (global.EmptyPost) returns (RulesResponse) {} // 获取 权限列表
	//  rpc RulePagination (global.PaginationPost) returns (RulePaginationResponse) {} // 获取权限分页
	CreateRule(ctx context.Context, in *CreateRulePost, opts ...grpc.CallOption) (*RuleResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRulePost, opts ...grpc.CallOption) (*RuleResponse, error)
	//  rpc ChangeRuleStatus (global.ChangeStatusPost) returns (RuleResponse) {} // 修改权限状态
	RemoveRule(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RuleResponse, error)
	// 角色管理
	Role(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RoleResponse, error)
	Roles(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*RolesResponse, error)
	RolePagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*RolePaginationResponse, error)
	CreateRole(ctx context.Context, in *CreateRolePost, opts ...grpc.CallOption) (*RoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRolePost, opts ...grpc.CallOption) (*RoleResponse, error)
	ChangeRoleStatus(ctx context.Context, in *ChangeStatusByKeyPost, opts ...grpc.CallOption) (*RoleResponse, error)
	RemoveRole(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RoleResponse, error)
	// 管理员
	User(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*UserResponse, error)
	Users(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*UsersResponse, error)
	UserPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*UserPaginationResponse, error)
	CreateUser(ctx context.Context, in *CreateUserPost, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserPost, opts ...grpc.CallOption) (*UserResponse, error)
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordPost, opts ...grpc.CallOption) (*UserResponse, error)
	ChangeUserStatus(ctx context.Context, in *ChangeStatusByKeyPost, opts ...grpc.CallOption) (*UserResponse, error)
	// 登录模块
	Login(ctx context.Context, in *LoginPost, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginLogPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*LoginLogPaginationResponse, error)
	Scopes(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ScopesResponse, error)
	LogOut(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*Response, error)
}

type consoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleServiceClient(cc grpc.ClientConnInterface) ConsoleServiceClient {
	return &consoleServiceClient{cc}
}

func (c *consoleServiceClient) Menu(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Menu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Menus(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MenusResponse, error) {
	out := new(MenusResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Menus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) TopMenus(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MenusResponse, error) {
	out := new(MenusResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/TopMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) MenuRules(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MenuRulesResponse, error) {
	out := new(MenuRulesResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/MenuRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) MenuPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MenuPaginationResponse, error) {
	out := new(MenuPaginationResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/MenuPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CreateMenu(ctx context.Context, in *CreateMenuPost, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) UpdateMenu(ctx context.Context, in *UpdateMenuPost, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) ChangeMenuStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*MenuResponse, error) {
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/ChangeMenuStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Rule(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Rule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CreateRule(ctx context.Context, in *CreateRulePost, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) UpdateRule(ctx context.Context, in *UpdateRulePost, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) RemoveRule(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/RemoveRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Role(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Roles(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Roles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) RolePagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*RolePaginationResponse, error) {
	out := new(RolePaginationResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/RolePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CreateRole(ctx context.Context, in *CreateRolePost, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) UpdateRole(ctx context.Context, in *UpdateRolePost, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) ChangeRoleStatus(ctx context.Context, in *ChangeStatusByKeyPost, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/ChangeRoleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) RemoveRole(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) User(ctx context.Context, in *InfoKeyPost, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Users(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) UserPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*UserPaginationResponse, error) {
	out := new(UserPaginationResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/UserPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CreateUser(ctx context.Context, in *CreateUserPost, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) UpdateUser(ctx context.Context, in *UpdateUserPost, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordPost, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) ChangeUserStatus(ctx context.Context, in *ChangeStatusByKeyPost, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/ChangeUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Login(ctx context.Context, in *LoginPost, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) LoginLogPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*LoginLogPaginationResponse, error) {
	out := new(LoginLogPaginationResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/LoginLogPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) Scopes(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ScopesResponse, error) {
	out := new(ScopesResponse)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/Scopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) LogOut(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/console.ConsoleService/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleServiceServer is the server API for ConsoleService service.
// All implementations must embed UnimplementedConsoleServiceServer
// for forward compatibility
type ConsoleServiceServer interface {
	// 菜单管理
	Menu(context.Context, *InfoPost) (*MenuResponse, error)
	Menus(context.Context, *EmptyPost) (*MenusResponse, error)
	TopMenus(context.Context, *EmptyPost) (*MenusResponse, error)
	MenuRules(context.Context, *EmptyPost) (*MenuRulesResponse, error)
	MenuPagination(context.Context, *PaginationPost) (*MenuPaginationResponse, error)
	CreateMenu(context.Context, *CreateMenuPost) (*MenuResponse, error)
	UpdateMenu(context.Context, *UpdateMenuPost) (*MenuResponse, error)
	ChangeMenuStatus(context.Context, *ChangeStatusPost) (*MenuResponse, error)
	// 权限管理
	Rule(context.Context, *InfoKeyPost) (*RuleResponse, error)
	//  rpc Rules (global.EmptyPost) returns (RulesResponse) {} // 获取 权限列表
	//  rpc RulePagination (global.PaginationPost) returns (RulePaginationResponse) {} // 获取权限分页
	CreateRule(context.Context, *CreateRulePost) (*RuleResponse, error)
	UpdateRule(context.Context, *UpdateRulePost) (*RuleResponse, error)
	//  rpc ChangeRuleStatus (global.ChangeStatusPost) returns (RuleResponse) {} // 修改权限状态
	RemoveRule(context.Context, *InfoKeyPost) (*RuleResponse, error)
	// 角色管理
	Role(context.Context, *InfoKeyPost) (*RoleResponse, error)
	Roles(context.Context, *EmptyPost) (*RolesResponse, error)
	RolePagination(context.Context, *PaginationPost) (*RolePaginationResponse, error)
	CreateRole(context.Context, *CreateRolePost) (*RoleResponse, error)
	UpdateRole(context.Context, *UpdateRolePost) (*RoleResponse, error)
	ChangeRoleStatus(context.Context, *ChangeStatusByKeyPost) (*RoleResponse, error)
	RemoveRole(context.Context, *InfoKeyPost) (*RoleResponse, error)
	// 管理员
	User(context.Context, *InfoKeyPost) (*UserResponse, error)
	Users(context.Context, *EmptyPost) (*UsersResponse, error)
	UserPagination(context.Context, *PaginationPost) (*UserPaginationResponse, error)
	CreateUser(context.Context, *CreateUserPost) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserPost) (*UserResponse, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordPost) (*UserResponse, error)
	ChangeUserStatus(context.Context, *ChangeStatusByKeyPost) (*UserResponse, error)
	// 登录模块
	Login(context.Context, *LoginPost) (*LoginResponse, error)
	LoginLogPagination(context.Context, *PaginationPost) (*LoginLogPaginationResponse, error)
	Scopes(context.Context, *EmptyPost) (*ScopesResponse, error)
	LogOut(context.Context, *EmptyPost) (*Response, error)
	mustEmbedUnimplementedConsoleServiceServer()
}

// UnimplementedConsoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsoleServiceServer struct {
}

func (UnimplementedConsoleServiceServer) Menu(context.Context, *InfoPost) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Menu not implemented")
}
func (UnimplementedConsoleServiceServer) Menus(context.Context, *EmptyPost) (*MenusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Menus not implemented")
}
func (UnimplementedConsoleServiceServer) TopMenus(context.Context, *EmptyPost) (*MenusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMenus not implemented")
}
func (UnimplementedConsoleServiceServer) MenuRules(context.Context, *EmptyPost) (*MenuRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuRules not implemented")
}
func (UnimplementedConsoleServiceServer) MenuPagination(context.Context, *PaginationPost) (*MenuPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuPagination not implemented")
}
func (UnimplementedConsoleServiceServer) CreateMenu(context.Context, *CreateMenuPost) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedConsoleServiceServer) UpdateMenu(context.Context, *UpdateMenuPost) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedConsoleServiceServer) ChangeMenuStatus(context.Context, *ChangeStatusPost) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMenuStatus not implemented")
}
func (UnimplementedConsoleServiceServer) Rule(context.Context, *InfoKeyPost) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rule not implemented")
}
func (UnimplementedConsoleServiceServer) CreateRule(context.Context, *CreateRulePost) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedConsoleServiceServer) UpdateRule(context.Context, *UpdateRulePost) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedConsoleServiceServer) RemoveRule(context.Context, *InfoKeyPost) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRule not implemented")
}
func (UnimplementedConsoleServiceServer) Role(context.Context, *InfoKeyPost) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Role not implemented")
}
func (UnimplementedConsoleServiceServer) Roles(context.Context, *EmptyPost) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roles not implemented")
}
func (UnimplementedConsoleServiceServer) RolePagination(context.Context, *PaginationPost) (*RolePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePagination not implemented")
}
func (UnimplementedConsoleServiceServer) CreateRole(context.Context, *CreateRolePost) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedConsoleServiceServer) UpdateRole(context.Context, *UpdateRolePost) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedConsoleServiceServer) ChangeRoleStatus(context.Context, *ChangeStatusByKeyPost) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoleStatus not implemented")
}
func (UnimplementedConsoleServiceServer) RemoveRole(context.Context, *InfoKeyPost) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedConsoleServiceServer) User(context.Context, *InfoKeyPost) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedConsoleServiceServer) Users(context.Context, *EmptyPost) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Users not implemented")
}
func (UnimplementedConsoleServiceServer) UserPagination(context.Context, *PaginationPost) (*UserPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPagination not implemented")
}
func (UnimplementedConsoleServiceServer) CreateUser(context.Context, *CreateUserPost) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedConsoleServiceServer) UpdateUser(context.Context, *UpdateUserPost) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedConsoleServiceServer) ChangeUserPassword(context.Context, *ChangeUserPasswordPost) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedConsoleServiceServer) ChangeUserStatus(context.Context, *ChangeStatusByKeyPost) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}
func (UnimplementedConsoleServiceServer) Login(context.Context, *LoginPost) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedConsoleServiceServer) LoginLogPagination(context.Context, *PaginationPost) (*LoginLogPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogPagination not implemented")
}
func (UnimplementedConsoleServiceServer) Scopes(context.Context, *EmptyPost) (*ScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scopes not implemented")
}
func (UnimplementedConsoleServiceServer) LogOut(context.Context, *EmptyPost) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedConsoleServiceServer) mustEmbedUnimplementedConsoleServiceServer() {}

// UnsafeConsoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleServiceServer will
// result in compilation errors.
type UnsafeConsoleServiceServer interface {
	mustEmbedUnimplementedConsoleServiceServer()
}

func RegisterConsoleServiceServer(s grpc.ServiceRegistrar, srv ConsoleServiceServer) {
	s.RegisterService(&ConsoleService_ServiceDesc, srv)
}

func _ConsoleService_Menu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Menu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Menu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Menu(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Menus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Menus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Menus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Menus(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_TopMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).TopMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/TopMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).TopMenus(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_MenuRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).MenuRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/MenuRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).MenuRules(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_MenuPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).MenuPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/MenuPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).MenuPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CreateMenu(ctx, req.(*CreateMenuPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).UpdateMenu(ctx, req.(*UpdateMenuPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_ChangeMenuStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).ChangeMenuStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/ChangeMenuStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).ChangeMenuStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Rule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Rule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Rule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Rule(ctx, req.(*InfoKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRulePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CreateRule(ctx, req.(*CreateRulePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRulePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).UpdateRule(ctx, req.(*UpdateRulePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_RemoveRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).RemoveRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/RemoveRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).RemoveRule(ctx, req.(*InfoKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Role_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Role(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Role(ctx, req.(*InfoKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Roles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Roles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Roles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Roles(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_RolePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).RolePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/RolePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).RolePagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRolePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CreateRole(ctx, req.(*CreateRolePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).UpdateRole(ctx, req.(*UpdateRolePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_ChangeRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusByKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).ChangeRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/ChangeRoleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).ChangeRoleStatus(ctx, req.(*ChangeStatusByKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).RemoveRole(ctx, req.(*InfoKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).User(ctx, req.(*InfoKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Users(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_UserPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).UserPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/UserPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).UserPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CreateUser(ctx, req.(*CreateUserPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).UpdateUser(ctx, req.(*UpdateUserPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusByKeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/ChangeUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).ChangeUserStatus(ctx, req.(*ChangeStatusByKeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Login(ctx, req.(*LoginPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_LoginLogPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).LoginLogPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/LoginLogPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).LoginLogPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_Scopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).Scopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/Scopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).Scopes(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.ConsoleService/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).LogOut(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleService_ServiceDesc is the grpc.ServiceDesc for ConsoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "console.ConsoleService",
	HandlerType: (*ConsoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Menu",
			Handler:    _ConsoleService_Menu_Handler,
		},
		{
			MethodName: "Menus",
			Handler:    _ConsoleService_Menus_Handler,
		},
		{
			MethodName: "TopMenus",
			Handler:    _ConsoleService_TopMenus_Handler,
		},
		{
			MethodName: "MenuRules",
			Handler:    _ConsoleService_MenuRules_Handler,
		},
		{
			MethodName: "MenuPagination",
			Handler:    _ConsoleService_MenuPagination_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _ConsoleService_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _ConsoleService_UpdateMenu_Handler,
		},
		{
			MethodName: "ChangeMenuStatus",
			Handler:    _ConsoleService_ChangeMenuStatus_Handler,
		},
		{
			MethodName: "Rule",
			Handler:    _ConsoleService_Rule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _ConsoleService_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _ConsoleService_UpdateRule_Handler,
		},
		{
			MethodName: "RemoveRule",
			Handler:    _ConsoleService_RemoveRule_Handler,
		},
		{
			MethodName: "Role",
			Handler:    _ConsoleService_Role_Handler,
		},
		{
			MethodName: "Roles",
			Handler:    _ConsoleService_Roles_Handler,
		},
		{
			MethodName: "RolePagination",
			Handler:    _ConsoleService_RolePagination_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ConsoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _ConsoleService_UpdateRole_Handler,
		},
		{
			MethodName: "ChangeRoleStatus",
			Handler:    _ConsoleService_ChangeRoleStatus_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _ConsoleService_RemoveRole_Handler,
		},
		{
			MethodName: "User",
			Handler:    _ConsoleService_User_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _ConsoleService_Users_Handler,
		},
		{
			MethodName: "UserPagination",
			Handler:    _ConsoleService_UserPagination_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _ConsoleService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ConsoleService_UpdateUser_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _ConsoleService_ChangeUserPassword_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _ConsoleService_ChangeUserStatus_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ConsoleService_Login_Handler,
		},
		{
			MethodName: "LoginLogPagination",
			Handler:    _ConsoleService_LoginLogPagination_Handler,
		},
		{
			MethodName: "Scopes",
			Handler:    _ConsoleService_Scopes_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _ConsoleService_LogOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/console.proto",
}
