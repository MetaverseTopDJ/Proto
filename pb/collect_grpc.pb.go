// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectServiceClient is the client API for CollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectServiceClient interface {
	// 作者
	Author(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	AuthorDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*SimpleAuthorResponse, error)
	HotAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error)
	CacheAllAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error)
	AuthorPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AuthorPaginationResponse, error)
	CreateAuthor(ctx context.Context, in *CreateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	ChangeAuthorStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AuthorResponse, error)
	// 作品
	Work(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkResponse, error)
	WorkByType(ctx context.Context, in *WorkByTypePost, opts ...grpc.CallOption) (*WorkResponse, error)
	RandomWork(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkResponse, error)
	Works(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WorksResponse, error)
	WorkDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkDetailResponse, error)
	RecommendWorks(ctx context.Context, in *RecommendWorksPost, opts ...grpc.CallOption) (*RecommendWorksResponse, error)
	AuthorWorkPagination(ctx context.Context, in *AuthorWorkPaginationPost, opts ...grpc.CallOption) (*AuthorWorkPaginationResponse, error)
	WorkPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*WorkPaginationResponse, error)
	CreateWork(ctx context.Context, in *CreateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error)
	UpdateWork(ctx context.Context, in *UpdateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error)
	ChangeWorkStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WorkResponse, error)
	// 盲盒
	BlindBox(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	BlindBoxByContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	BlindBoxes(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxesResponse, error)
	BlindBoxCount(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error)
	BlindBoxTop(ctx context.Context, in *BlindBoxTopPost, opts ...grpc.CallOption) (*BlindBoxTopResponse, error)
	BlindBoxTopCount(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error)
	BlindBoxDetail(ctx context.Context, in *BlindBoxDetailPost, opts ...grpc.CallOption) (*BlindBoxDetailResponse, error)
	BlindBoxPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*BlindBoxPaginationResponse, error)
	CreateBlindBox(ctx context.Context, in *CreateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	UpdateBlindBox(ctx context.Context, in *UpdateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	StartBlindBox(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*BlindBoxResponse, error)
	// 前端盲盒交互
	CheckBlindBoxStage(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CheckBlindBoxStageResponse, error)
	PurchaseBlindBox(ctx context.Context, in *BlindBoxSignaturePost, opts ...grpc.CallOption) (*BlindBoxSignatureResponse, error)
	ExchangeBlindBox(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxSignatureResponse, error)
	// 盲盒内容
	BlindBoxContent(ctx context.Context, in *BlindBoxContentInfoPost, opts ...grpc.CallOption) (*BlindBoxContentResponse, error)
	BlindBoxContentPagination(ctx context.Context, in *BlindBoxContentPaginationPost, opts ...grpc.CallOption) (*BlindBoxContentPaginationResponse, error)
	CreateBlindBoxContent(ctx context.Context, in *CreateBlindBoxContentPost, opts ...grpc.CallOption) (*ResultResponse, error)
	UpdateBlindBoxContent(ctx context.Context, in *UpdateBlindBoxContentPost, opts ...grpc.CallOption) (*ResultResponse, error)
	ReduceBlindBoxContent(ctx context.Context, in *BlindBoxContentInfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	RemoveBlindBoxContent(ctx context.Context, in *BlindBoxContentInfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 盲盒阶段
	BlindBoxStage(ctx context.Context, in *BlindBoxStagePost, opts ...grpc.CallOption) (*BlindBoxStageResponse, error)
	BlindBoxStages(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxStagesResponse, error)
	BlindBoxStagePagination(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxStagePaginationResponse, error)
	CreateBlindBoxStage(ctx context.Context, in *ModifyBlindBoxStagePost, opts ...grpc.CallOption) (*BlindBoxStageResponse, error)
	UpdateBlindBoxStage(ctx context.Context, in *ModifyBlindBoxStagePost, opts ...grpc.CallOption) (*BlindBoxStageResponse, error)
	RemoveBlindBoxStage(ctx context.Context, in *BlindBoxStagePost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 免费盲盒
	MemberBlindBoxExchange(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error)
	AddressBlindBoxExchange(ctx context.Context, in *AddressBlindBoxExchangePost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error)
	// 免费盲盒快照
	GenBlindBoxSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	DelBlindBoxSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	GenBlindBoxExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	DelBlindBoxExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	BlindBoxSnapshotPagination(ctx context.Context, in *BlindBoxSnapshotPaginationPost, opts ...grpc.CallOption) (*BlindBoxSnapshotPaginationResponse, error)
	BlindBoxExchangePagination(ctx context.Context, in *BlindBoxExchangePaginationPost, opts ...grpc.CallOption) (*BlindBoxExchangePaginationResponse, error)
	// 盲盒白名单
	BlindBoxWhiteAddressPagination(ctx context.Context, in *BlindBoxWhiteAddressPaginationPost, opts ...grpc.CallOption) (*BlindBoxWhiteAddressPaginationResponse, error)
	CreateBlindBoxWhiteAddress(ctx context.Context, in *CreateBlindBoxWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error)
	RemoveBlindBoxWhiteAddress(ctx context.Context, in *RemoveBlindBoxWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 集卡
	Collect(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectResponse, error)
	CollectDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectDetailResponse, error)
	CollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*CollectPaginationResponse, error)
	SimpleCollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*SimpleCollectPaginationResponse, error)
	CreateCollect(ctx context.Context, in *CreateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error)
	UpdateCollect(ctx context.Context, in *UpdateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error)
	ModifyCollect(ctx context.Context, in *ModifyCollectPost, opts ...grpc.CallOption) (*ResultResponse, error)
	ChangeCollectStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*CollectResponse, error)
	// 集卡快照
	GenCollectSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	DelCollectSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	GenCollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	DelCollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error)
	CollectSnapshotPagination(ctx context.Context, in *CollectSnapshotPaginationPost, opts ...grpc.CallOption) (*CollectSnapshotPaginationResponse, error)
	CollectExchangePagination(ctx context.Context, in *CollectExchangePaginationPost, opts ...grpc.CallOption) (*CollectExchangePaginationResponse, error)
	// 集卡交互
	CollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectSignatureResponse, error)
	CollectExchangeByCode(ctx context.Context, in *CollectExchangeByCodePost, opts ...grpc.CallOption) (*CollectExchangeResponse, error)
	CollectExchangeDone(ctx context.Context, in *CollectExchangeDonePost, opts ...grpc.CallOption) (*ResultResponse, error)
	CheckCollectExchangeCode(ctx context.Context, in *CheckCollectExchangeCodePost, opts ...grpc.CallOption) (*ResultResponse, error)
}

type collectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectServiceClient(cc grpc.ClientConnInterface) CollectServiceClient {
	return &collectServiceClient{cc}
}

func (c *collectServiceClient) Author(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/Author", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) AuthorDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*SimpleAuthorResponse, error) {
	out := new(SimpleAuthorResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/AuthorDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) HotAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error) {
	out := new(HotAuthorsResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/HotAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CacheAllAuthors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*HotAuthorsResponse, error) {
	out := new(HotAuthorsResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CacheAllAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) AuthorPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AuthorPaginationResponse, error) {
	out := new(AuthorPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/AuthorPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateAuthor(ctx context.Context, in *CreateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) UpdateAuthor(ctx context.Context, in *UpdateAuthorPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) ChangeAuthorStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AuthorResponse, error) {
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/ChangeAuthorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) Work(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/Work", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) WorkByType(ctx context.Context, in *WorkByTypePost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/WorkByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) RandomWork(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/RandomWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) Works(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WorksResponse, error) {
	out := new(WorksResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/Works", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) WorkDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WorkDetailResponse, error) {
	out := new(WorkDetailResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/WorkDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) RecommendWorks(ctx context.Context, in *RecommendWorksPost, opts ...grpc.CallOption) (*RecommendWorksResponse, error) {
	out := new(RecommendWorksResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/RecommendWorks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) AuthorWorkPagination(ctx context.Context, in *AuthorWorkPaginationPost, opts ...grpc.CallOption) (*AuthorWorkPaginationResponse, error) {
	out := new(AuthorWorkPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/AuthorWorkPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) WorkPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*WorkPaginationResponse, error) {
	out := new(WorkPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/WorkPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateWork(ctx context.Context, in *CreateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) UpdateWork(ctx context.Context, in *UpdateWorkPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/UpdateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) ChangeWorkStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WorkResponse, error) {
	out := new(WorkResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/ChangeWorkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBox(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxByContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxes(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxesResponse, error) {
	out := new(BlindBoxesResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxCount(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error) {
	out := new(BlindBoxCountResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxTop(ctx context.Context, in *BlindBoxTopPost, opts ...grpc.CallOption) (*BlindBoxTopResponse, error) {
	out := new(BlindBoxTopResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxTopCount(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BlindBoxCountResponse, error) {
	out := new(BlindBoxCountResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxTopCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxDetail(ctx context.Context, in *BlindBoxDetailPost, opts ...grpc.CallOption) (*BlindBoxDetailResponse, error) {
	out := new(BlindBoxDetailResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*BlindBoxPaginationResponse, error) {
	out := new(BlindBoxPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateBlindBox(ctx context.Context, in *CreateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) UpdateBlindBox(ctx context.Context, in *UpdateBlindBoxPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/UpdateBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) StartBlindBox(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*BlindBoxResponse, error) {
	out := new(BlindBoxResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/StartBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CheckBlindBoxStage(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CheckBlindBoxStageResponse, error) {
	out := new(CheckBlindBoxStageResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CheckBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) PurchaseBlindBox(ctx context.Context, in *BlindBoxSignaturePost, opts ...grpc.CallOption) (*BlindBoxSignatureResponse, error) {
	out := new(BlindBoxSignatureResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/PurchaseBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) ExchangeBlindBox(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxSignatureResponse, error) {
	out := new(BlindBoxSignatureResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/ExchangeBlindBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxContent(ctx context.Context, in *BlindBoxContentInfoPost, opts ...grpc.CallOption) (*BlindBoxContentResponse, error) {
	out := new(BlindBoxContentResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxContentPagination(ctx context.Context, in *BlindBoxContentPaginationPost, opts ...grpc.CallOption) (*BlindBoxContentPaginationResponse, error) {
	out := new(BlindBoxContentPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxContentPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateBlindBoxContent(ctx context.Context, in *CreateBlindBoxContentPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateBlindBoxContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) UpdateBlindBoxContent(ctx context.Context, in *UpdateBlindBoxContentPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/UpdateBlindBoxContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) ReduceBlindBoxContent(ctx context.Context, in *BlindBoxContentInfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/ReduceBlindBoxContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) RemoveBlindBoxContent(ctx context.Context, in *BlindBoxContentInfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/RemoveBlindBoxContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxStage(ctx context.Context, in *BlindBoxStagePost, opts ...grpc.CallOption) (*BlindBoxStageResponse, error) {
	out := new(BlindBoxStageResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxStages(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxStagesResponse, error) {
	out := new(BlindBoxStagesResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxStagePagination(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BlindBoxStagePaginationResponse, error) {
	out := new(BlindBoxStagePaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxStagePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateBlindBoxStage(ctx context.Context, in *ModifyBlindBoxStagePost, opts ...grpc.CallOption) (*BlindBoxStageResponse, error) {
	out := new(BlindBoxStageResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) UpdateBlindBoxStage(ctx context.Context, in *ModifyBlindBoxStagePost, opts ...grpc.CallOption) (*BlindBoxStageResponse, error) {
	out := new(BlindBoxStageResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/UpdateBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) RemoveBlindBoxStage(ctx context.Context, in *BlindBoxStagePost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/RemoveBlindBoxStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) MemberBlindBoxExchange(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error) {
	out := new(CountBlindBoxExchangeResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/MemberBlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) AddressBlindBoxExchange(ctx context.Context, in *AddressBlindBoxExchangePost, opts ...grpc.CallOption) (*CountBlindBoxExchangeResponse, error) {
	out := new(CountBlindBoxExchangeResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/AddressBlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) GenBlindBoxSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/GenBlindBoxSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) DelBlindBoxSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/DelBlindBoxSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) GenBlindBoxExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/GenBlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) DelBlindBoxExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/DelBlindBoxExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxSnapshotPagination(ctx context.Context, in *BlindBoxSnapshotPaginationPost, opts ...grpc.CallOption) (*BlindBoxSnapshotPaginationResponse, error) {
	out := new(BlindBoxSnapshotPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxSnapshotPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxExchangePagination(ctx context.Context, in *BlindBoxExchangePaginationPost, opts ...grpc.CallOption) (*BlindBoxExchangePaginationResponse, error) {
	out := new(BlindBoxExchangePaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxExchangePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) BlindBoxWhiteAddressPagination(ctx context.Context, in *BlindBoxWhiteAddressPaginationPost, opts ...grpc.CallOption) (*BlindBoxWhiteAddressPaginationResponse, error) {
	out := new(BlindBoxWhiteAddressPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/BlindBoxWhiteAddressPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateBlindBoxWhiteAddress(ctx context.Context, in *CreateBlindBoxWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateBlindBoxWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) RemoveBlindBoxWhiteAddress(ctx context.Context, in *RemoveBlindBoxWhiteAddressPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/RemoveBlindBoxWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) Collect(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectDetailResponse, error) {
	out := new(CollectDetailResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*CollectPaginationResponse, error) {
	out := new(CollectPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) SimpleCollectPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*SimpleCollectPaginationResponse, error) {
	out := new(SimpleCollectPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/SimpleCollectPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CreateCollect(ctx context.Context, in *CreateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CreateCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) UpdateCollect(ctx context.Context, in *UpdateCollectPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/UpdateCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) ModifyCollect(ctx context.Context, in *ModifyCollectPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/ModifyCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) ChangeCollectStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/ChangeCollectStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) GenCollectSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/GenCollectSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) DelCollectSnapshot(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/DelCollectSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) GenCollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/GenCollectExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) DelCollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/DelCollectExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectSnapshotPagination(ctx context.Context, in *CollectSnapshotPaginationPost, opts ...grpc.CallOption) (*CollectSnapshotPaginationResponse, error) {
	out := new(CollectSnapshotPaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectSnapshotPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectExchangePagination(ctx context.Context, in *CollectExchangePaginationPost, opts ...grpc.CallOption) (*CollectExchangePaginationResponse, error) {
	out := new(CollectExchangePaginationResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectExchangePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectExchange(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CollectSignatureResponse, error) {
	out := new(CollectSignatureResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectExchangeByCode(ctx context.Context, in *CollectExchangeByCodePost, opts ...grpc.CallOption) (*CollectExchangeResponse, error) {
	out := new(CollectExchangeResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectExchangeByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectExchangeDone(ctx context.Context, in *CollectExchangeDonePost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CollectExchangeDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CheckCollectExchangeCode(ctx context.Context, in *CheckCollectExchangeCodePost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/collect.CollectService/CheckCollectExchangeCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectServiceServer is the server API for CollectService service.
// All implementations must embed UnimplementedCollectServiceServer
// for forward compatibility
type CollectServiceServer interface {
	// 作者
	Author(context.Context, *InfoPost) (*AuthorResponse, error)
	AuthorDetail(context.Context, *InfoPost) (*SimpleAuthorResponse, error)
	HotAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error)
	CacheAllAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error)
	AuthorPagination(context.Context, *PaginationPost) (*AuthorPaginationResponse, error)
	CreateAuthor(context.Context, *CreateAuthorPost) (*AuthorResponse, error)
	UpdateAuthor(context.Context, *UpdateAuthorPost) (*AuthorResponse, error)
	ChangeAuthorStatus(context.Context, *ChangeStatusPost) (*AuthorResponse, error)
	// 作品
	Work(context.Context, *InfoPost) (*WorkResponse, error)
	WorkByType(context.Context, *WorkByTypePost) (*WorkResponse, error)
	RandomWork(context.Context, *InfoPost) (*WorkResponse, error)
	Works(context.Context, *EmptyPost) (*WorksResponse, error)
	WorkDetail(context.Context, *InfoPost) (*WorkDetailResponse, error)
	RecommendWorks(context.Context, *RecommendWorksPost) (*RecommendWorksResponse, error)
	AuthorWorkPagination(context.Context, *AuthorWorkPaginationPost) (*AuthorWorkPaginationResponse, error)
	WorkPagination(context.Context, *PaginationPost) (*WorkPaginationResponse, error)
	CreateWork(context.Context, *CreateWorkPost) (*WorkResponse, error)
	UpdateWork(context.Context, *UpdateWorkPost) (*WorkResponse, error)
	ChangeWorkStatus(context.Context, *ChangeStatusPost) (*WorkResponse, error)
	// 盲盒
	BlindBox(context.Context, *InfoPost) (*BlindBoxResponse, error)
	BlindBoxByContract(context.Context, *InfoPost) (*BlindBoxResponse, error)
	BlindBoxes(context.Context, *EmptyPost) (*BlindBoxesResponse, error)
	BlindBoxCount(context.Context, *InfoPost) (*BlindBoxCountResponse, error)
	BlindBoxTop(context.Context, *BlindBoxTopPost) (*BlindBoxTopResponse, error)
	BlindBoxTopCount(context.Context, *EmptyPost) (*BlindBoxCountResponse, error)
	BlindBoxDetail(context.Context, *BlindBoxDetailPost) (*BlindBoxDetailResponse, error)
	BlindBoxPagination(context.Context, *PaginationPost) (*BlindBoxPaginationResponse, error)
	CreateBlindBox(context.Context, *CreateBlindBoxPost) (*BlindBoxResponse, error)
	UpdateBlindBox(context.Context, *UpdateBlindBoxPost) (*BlindBoxResponse, error)
	StartBlindBox(context.Context, *ChangeStatusPost) (*BlindBoxResponse, error)
	// 前端盲盒交互
	CheckBlindBoxStage(context.Context, *InfoPost) (*CheckBlindBoxStageResponse, error)
	PurchaseBlindBox(context.Context, *BlindBoxSignaturePost) (*BlindBoxSignatureResponse, error)
	ExchangeBlindBox(context.Context, *InfoPost) (*BlindBoxSignatureResponse, error)
	// 盲盒内容
	BlindBoxContent(context.Context, *BlindBoxContentInfoPost) (*BlindBoxContentResponse, error)
	BlindBoxContentPagination(context.Context, *BlindBoxContentPaginationPost) (*BlindBoxContentPaginationResponse, error)
	CreateBlindBoxContent(context.Context, *CreateBlindBoxContentPost) (*ResultResponse, error)
	UpdateBlindBoxContent(context.Context, *UpdateBlindBoxContentPost) (*ResultResponse, error)
	ReduceBlindBoxContent(context.Context, *BlindBoxContentInfoPost) (*ResultResponse, error)
	RemoveBlindBoxContent(context.Context, *BlindBoxContentInfoPost) (*ResultResponse, error)
	// 盲盒阶段
	BlindBoxStage(context.Context, *BlindBoxStagePost) (*BlindBoxStageResponse, error)
	BlindBoxStages(context.Context, *InfoPost) (*BlindBoxStagesResponse, error)
	BlindBoxStagePagination(context.Context, *InfoPost) (*BlindBoxStagePaginationResponse, error)
	CreateBlindBoxStage(context.Context, *ModifyBlindBoxStagePost) (*BlindBoxStageResponse, error)
	UpdateBlindBoxStage(context.Context, *ModifyBlindBoxStagePost) (*BlindBoxStageResponse, error)
	RemoveBlindBoxStage(context.Context, *BlindBoxStagePost) (*ResultResponse, error)
	// 免费盲盒
	MemberBlindBoxExchange(context.Context, *EmptyPost) (*CountBlindBoxExchangeResponse, error)
	AddressBlindBoxExchange(context.Context, *AddressBlindBoxExchangePost) (*CountBlindBoxExchangeResponse, error)
	// 免费盲盒快照
	GenBlindBoxSnapshot(context.Context, *InfoPost) (*ResultResponse, error)
	DelBlindBoxSnapshot(context.Context, *InfoPost) (*ResultResponse, error)
	GenBlindBoxExchange(context.Context, *InfoPost) (*ResultResponse, error)
	DelBlindBoxExchange(context.Context, *InfoPost) (*ResultResponse, error)
	BlindBoxSnapshotPagination(context.Context, *BlindBoxSnapshotPaginationPost) (*BlindBoxSnapshotPaginationResponse, error)
	BlindBoxExchangePagination(context.Context, *BlindBoxExchangePaginationPost) (*BlindBoxExchangePaginationResponse, error)
	// 盲盒白名单
	BlindBoxWhiteAddressPagination(context.Context, *BlindBoxWhiteAddressPaginationPost) (*BlindBoxWhiteAddressPaginationResponse, error)
	CreateBlindBoxWhiteAddress(context.Context, *CreateBlindBoxWhiteAddressPost) (*ResultResponse, error)
	RemoveBlindBoxWhiteAddress(context.Context, *RemoveBlindBoxWhiteAddressPost) (*ResultResponse, error)
	// 集卡
	Collect(context.Context, *InfoPost) (*CollectResponse, error)
	CollectDetail(context.Context, *InfoPost) (*CollectDetailResponse, error)
	CollectPagination(context.Context, *PaginationPost) (*CollectPaginationResponse, error)
	SimpleCollectPagination(context.Context, *PaginationPost) (*SimpleCollectPaginationResponse, error)
	CreateCollect(context.Context, *CreateCollectPost) (*CollectResponse, error)
	UpdateCollect(context.Context, *UpdateCollectPost) (*CollectResponse, error)
	ModifyCollect(context.Context, *ModifyCollectPost) (*ResultResponse, error)
	ChangeCollectStatus(context.Context, *ChangeStatusPost) (*CollectResponse, error)
	// 集卡快照
	GenCollectSnapshot(context.Context, *InfoPost) (*ResultResponse, error)
	DelCollectSnapshot(context.Context, *InfoPost) (*ResultResponse, error)
	GenCollectExchange(context.Context, *InfoPost) (*ResultResponse, error)
	DelCollectExchange(context.Context, *InfoPost) (*ResultResponse, error)
	CollectSnapshotPagination(context.Context, *CollectSnapshotPaginationPost) (*CollectSnapshotPaginationResponse, error)
	CollectExchangePagination(context.Context, *CollectExchangePaginationPost) (*CollectExchangePaginationResponse, error)
	// 集卡交互
	CollectExchange(context.Context, *InfoPost) (*CollectSignatureResponse, error)
	CollectExchangeByCode(context.Context, *CollectExchangeByCodePost) (*CollectExchangeResponse, error)
	CollectExchangeDone(context.Context, *CollectExchangeDonePost) (*ResultResponse, error)
	CheckCollectExchangeCode(context.Context, *CheckCollectExchangeCodePost) (*ResultResponse, error)
	mustEmbedUnimplementedCollectServiceServer()
}

// UnimplementedCollectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectServiceServer struct {
}

func (UnimplementedCollectServiceServer) Author(context.Context, *InfoPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Author not implemented")
}
func (UnimplementedCollectServiceServer) AuthorDetail(context.Context, *InfoPost) (*SimpleAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorDetail not implemented")
}
func (UnimplementedCollectServiceServer) HotAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotAuthors not implemented")
}
func (UnimplementedCollectServiceServer) CacheAllAuthors(context.Context, *EmptyPost) (*HotAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheAllAuthors not implemented")
}
func (UnimplementedCollectServiceServer) AuthorPagination(context.Context, *PaginationPost) (*AuthorPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorPagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateAuthor(context.Context, *CreateAuthorPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedCollectServiceServer) UpdateAuthor(context.Context, *UpdateAuthorPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedCollectServiceServer) ChangeAuthorStatus(context.Context, *ChangeStatusPost) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAuthorStatus not implemented")
}
func (UnimplementedCollectServiceServer) Work(context.Context, *InfoPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Work not implemented")
}
func (UnimplementedCollectServiceServer) WorkByType(context.Context, *WorkByTypePost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkByType not implemented")
}
func (UnimplementedCollectServiceServer) RandomWork(context.Context, *InfoPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomWork not implemented")
}
func (UnimplementedCollectServiceServer) Works(context.Context, *EmptyPost) (*WorksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Works not implemented")
}
func (UnimplementedCollectServiceServer) WorkDetail(context.Context, *InfoPost) (*WorkDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkDetail not implemented")
}
func (UnimplementedCollectServiceServer) RecommendWorks(context.Context, *RecommendWorksPost) (*RecommendWorksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendWorks not implemented")
}
func (UnimplementedCollectServiceServer) AuthorWorkPagination(context.Context, *AuthorWorkPaginationPost) (*AuthorWorkPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorWorkPagination not implemented")
}
func (UnimplementedCollectServiceServer) WorkPagination(context.Context, *PaginationPost) (*WorkPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkPagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateWork(context.Context, *CreateWorkPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWork not implemented")
}
func (UnimplementedCollectServiceServer) UpdateWork(context.Context, *UpdateWorkPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWork not implemented")
}
func (UnimplementedCollectServiceServer) ChangeWorkStatus(context.Context, *ChangeStatusPost) (*WorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWorkStatus not implemented")
}
func (UnimplementedCollectServiceServer) BlindBox(context.Context, *InfoPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBox not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxByContract(context.Context, *InfoPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxByContract not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxes(context.Context, *EmptyPost) (*BlindBoxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxes not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxCount(context.Context, *InfoPost) (*BlindBoxCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxCount not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxTop(context.Context, *BlindBoxTopPost) (*BlindBoxTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxTop not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxTopCount(context.Context, *EmptyPost) (*BlindBoxCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxTopCount not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxDetail(context.Context, *BlindBoxDetailPost) (*BlindBoxDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxDetail not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxPagination(context.Context, *PaginationPost) (*BlindBoxPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxPagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateBlindBox(context.Context, *CreateBlindBoxPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlindBox not implemented")
}
func (UnimplementedCollectServiceServer) UpdateBlindBox(context.Context, *UpdateBlindBoxPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlindBox not implemented")
}
func (UnimplementedCollectServiceServer) StartBlindBox(context.Context, *ChangeStatusPost) (*BlindBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBlindBox not implemented")
}
func (UnimplementedCollectServiceServer) CheckBlindBoxStage(context.Context, *InfoPost) (*CheckBlindBoxStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBlindBoxStage not implemented")
}
func (UnimplementedCollectServiceServer) PurchaseBlindBox(context.Context, *BlindBoxSignaturePost) (*BlindBoxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseBlindBox not implemented")
}
func (UnimplementedCollectServiceServer) ExchangeBlindBox(context.Context, *InfoPost) (*BlindBoxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeBlindBox not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxContent(context.Context, *BlindBoxContentInfoPost) (*BlindBoxContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxContent not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxContentPagination(context.Context, *BlindBoxContentPaginationPost) (*BlindBoxContentPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxContentPagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateBlindBoxContent(context.Context, *CreateBlindBoxContentPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlindBoxContent not implemented")
}
func (UnimplementedCollectServiceServer) UpdateBlindBoxContent(context.Context, *UpdateBlindBoxContentPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlindBoxContent not implemented")
}
func (UnimplementedCollectServiceServer) ReduceBlindBoxContent(context.Context, *BlindBoxContentInfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceBlindBoxContent not implemented")
}
func (UnimplementedCollectServiceServer) RemoveBlindBoxContent(context.Context, *BlindBoxContentInfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlindBoxContent not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxStage(context.Context, *BlindBoxStagePost) (*BlindBoxStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxStage not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxStages(context.Context, *InfoPost) (*BlindBoxStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxStages not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxStagePagination(context.Context, *InfoPost) (*BlindBoxStagePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxStagePagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateBlindBoxStage(context.Context, *ModifyBlindBoxStagePost) (*BlindBoxStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlindBoxStage not implemented")
}
func (UnimplementedCollectServiceServer) UpdateBlindBoxStage(context.Context, *ModifyBlindBoxStagePost) (*BlindBoxStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlindBoxStage not implemented")
}
func (UnimplementedCollectServiceServer) RemoveBlindBoxStage(context.Context, *BlindBoxStagePost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlindBoxStage not implemented")
}
func (UnimplementedCollectServiceServer) MemberBlindBoxExchange(context.Context, *EmptyPost) (*CountBlindBoxExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberBlindBoxExchange not implemented")
}
func (UnimplementedCollectServiceServer) AddressBlindBoxExchange(context.Context, *AddressBlindBoxExchangePost) (*CountBlindBoxExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressBlindBoxExchange not implemented")
}
func (UnimplementedCollectServiceServer) GenBlindBoxSnapshot(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenBlindBoxSnapshot not implemented")
}
func (UnimplementedCollectServiceServer) DelBlindBoxSnapshot(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBlindBoxSnapshot not implemented")
}
func (UnimplementedCollectServiceServer) GenBlindBoxExchange(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenBlindBoxExchange not implemented")
}
func (UnimplementedCollectServiceServer) DelBlindBoxExchange(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBlindBoxExchange not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxSnapshotPagination(context.Context, *BlindBoxSnapshotPaginationPost) (*BlindBoxSnapshotPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxSnapshotPagination not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxExchangePagination(context.Context, *BlindBoxExchangePaginationPost) (*BlindBoxExchangePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxExchangePagination not implemented")
}
func (UnimplementedCollectServiceServer) BlindBoxWhiteAddressPagination(context.Context, *BlindBoxWhiteAddressPaginationPost) (*BlindBoxWhiteAddressPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxWhiteAddressPagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateBlindBoxWhiteAddress(context.Context, *CreateBlindBoxWhiteAddressPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlindBoxWhiteAddress not implemented")
}
func (UnimplementedCollectServiceServer) RemoveBlindBoxWhiteAddress(context.Context, *RemoveBlindBoxWhiteAddressPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlindBoxWhiteAddress not implemented")
}
func (UnimplementedCollectServiceServer) Collect(context.Context, *InfoPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedCollectServiceServer) CollectDetail(context.Context, *InfoPost) (*CollectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectDetail not implemented")
}
func (UnimplementedCollectServiceServer) CollectPagination(context.Context, *PaginationPost) (*CollectPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectPagination not implemented")
}
func (UnimplementedCollectServiceServer) SimpleCollectPagination(context.Context, *PaginationPost) (*SimpleCollectPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleCollectPagination not implemented")
}
func (UnimplementedCollectServiceServer) CreateCollect(context.Context, *CreateCollectPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollect not implemented")
}
func (UnimplementedCollectServiceServer) UpdateCollect(context.Context, *UpdateCollectPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollect not implemented")
}
func (UnimplementedCollectServiceServer) ModifyCollect(context.Context, *ModifyCollectPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCollect not implemented")
}
func (UnimplementedCollectServiceServer) ChangeCollectStatus(context.Context, *ChangeStatusPost) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCollectStatus not implemented")
}
func (UnimplementedCollectServiceServer) GenCollectSnapshot(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCollectSnapshot not implemented")
}
func (UnimplementedCollectServiceServer) DelCollectSnapshot(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCollectSnapshot not implemented")
}
func (UnimplementedCollectServiceServer) GenCollectExchange(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCollectExchange not implemented")
}
func (UnimplementedCollectServiceServer) DelCollectExchange(context.Context, *InfoPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCollectExchange not implemented")
}
func (UnimplementedCollectServiceServer) CollectSnapshotPagination(context.Context, *CollectSnapshotPaginationPost) (*CollectSnapshotPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSnapshotPagination not implemented")
}
func (UnimplementedCollectServiceServer) CollectExchangePagination(context.Context, *CollectExchangePaginationPost) (*CollectExchangePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectExchangePagination not implemented")
}
func (UnimplementedCollectServiceServer) CollectExchange(context.Context, *InfoPost) (*CollectSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectExchange not implemented")
}
func (UnimplementedCollectServiceServer) CollectExchangeByCode(context.Context, *CollectExchangeByCodePost) (*CollectExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectExchangeByCode not implemented")
}
func (UnimplementedCollectServiceServer) CollectExchangeDone(context.Context, *CollectExchangeDonePost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectExchangeDone not implemented")
}
func (UnimplementedCollectServiceServer) CheckCollectExchangeCode(context.Context, *CheckCollectExchangeCodePost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCollectExchangeCode not implemented")
}
func (UnimplementedCollectServiceServer) mustEmbedUnimplementedCollectServiceServer() {}

// UnsafeCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectServiceServer will
// result in compilation errors.
type UnsafeCollectServiceServer interface {
	mustEmbedUnimplementedCollectServiceServer()
}

func RegisterCollectServiceServer(s grpc.ServiceRegistrar, srv CollectServiceServer) {
	s.RegisterService(&CollectService_ServiceDesc, srv)
}

func _CollectService_Author_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Author(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/Author",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Author(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_AuthorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).AuthorDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/AuthorDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).AuthorDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_HotAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).HotAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/HotAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).HotAuthors(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CacheAllAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CacheAllAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CacheAllAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CacheAllAuthors(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_AuthorPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).AuthorPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/AuthorPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).AuthorPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateAuthor(ctx, req.(*CreateAuthorPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).UpdateAuthor(ctx, req.(*UpdateAuthorPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_ChangeAuthorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).ChangeAuthorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/ChangeAuthorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).ChangeAuthorStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/Work",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Work(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_WorkByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkByTypePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).WorkByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/WorkByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).WorkByType(ctx, req.(*WorkByTypePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_RandomWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).RandomWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/RandomWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).RandomWork(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_Works_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Works(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/Works",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Works(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_WorkDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).WorkDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/WorkDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).WorkDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_RecommendWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendWorksPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).RecommendWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/RecommendWorks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).RecommendWorks(ctx, req.(*RecommendWorksPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_AuthorWorkPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorWorkPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).AuthorWorkPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/AuthorWorkPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).AuthorWorkPagination(ctx, req.(*AuthorWorkPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_WorkPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).WorkPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/WorkPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).WorkPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateWork(ctx, req.(*CreateWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/UpdateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).UpdateWork(ctx, req.(*UpdateWorkPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_ChangeWorkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).ChangeWorkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/ChangeWorkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).ChangeWorkStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBox(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxByContract(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxes(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxCount(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxTopPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxTop(ctx, req.(*BlindBoxTopPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxTopCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxTopCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxTopCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxTopCount(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxDetailPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxDetail(ctx, req.(*BlindBoxDetailPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlindBoxPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateBlindBox(ctx, req.(*CreateBlindBoxPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_UpdateBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlindBoxPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).UpdateBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/UpdateBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).UpdateBlindBox(ctx, req.(*UpdateBlindBoxPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_StartBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).StartBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/StartBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).StartBlindBox(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CheckBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CheckBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CheckBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CheckBlindBoxStage(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_PurchaseBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxSignaturePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).PurchaseBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/PurchaseBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).PurchaseBlindBox(ctx, req.(*BlindBoxSignaturePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_ExchangeBlindBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).ExchangeBlindBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/ExchangeBlindBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).ExchangeBlindBox(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxContentInfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxContent(ctx, req.(*BlindBoxContentInfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxContentPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxContentPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxContentPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxContentPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxContentPagination(ctx, req.(*BlindBoxContentPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateBlindBoxContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlindBoxContentPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateBlindBoxContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateBlindBoxContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateBlindBoxContent(ctx, req.(*CreateBlindBoxContentPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_UpdateBlindBoxContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlindBoxContentPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).UpdateBlindBoxContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/UpdateBlindBoxContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).UpdateBlindBoxContent(ctx, req.(*UpdateBlindBoxContentPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_ReduceBlindBoxContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxContentInfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).ReduceBlindBoxContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/ReduceBlindBoxContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).ReduceBlindBoxContent(ctx, req.(*BlindBoxContentInfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_RemoveBlindBoxContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxContentInfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).RemoveBlindBoxContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/RemoveBlindBoxContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).RemoveBlindBoxContent(ctx, req.(*BlindBoxContentInfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxStage(ctx, req.(*BlindBoxStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxStages(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxStagePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxStagePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxStagePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxStagePagination(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyBlindBoxStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateBlindBoxStage(ctx, req.(*ModifyBlindBoxStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_UpdateBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyBlindBoxStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).UpdateBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/UpdateBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).UpdateBlindBoxStage(ctx, req.(*ModifyBlindBoxStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_RemoveBlindBoxStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxStagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).RemoveBlindBoxStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/RemoveBlindBoxStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).RemoveBlindBoxStage(ctx, req.(*BlindBoxStagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_MemberBlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).MemberBlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/MemberBlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).MemberBlindBoxExchange(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_AddressBlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressBlindBoxExchangePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).AddressBlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/AddressBlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).AddressBlindBoxExchange(ctx, req.(*AddressBlindBoxExchangePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_GenBlindBoxSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).GenBlindBoxSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/GenBlindBoxSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).GenBlindBoxSnapshot(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_DelBlindBoxSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).DelBlindBoxSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/DelBlindBoxSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).DelBlindBoxSnapshot(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_GenBlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).GenBlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/GenBlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).GenBlindBoxExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_DelBlindBoxExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).DelBlindBoxExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/DelBlindBoxExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).DelBlindBoxExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxSnapshotPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxSnapshotPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxSnapshotPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxSnapshotPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxSnapshotPagination(ctx, req.(*BlindBoxSnapshotPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxExchangePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxExchangePaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxExchangePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxExchangePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxExchangePagination(ctx, req.(*BlindBoxExchangePaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_BlindBoxWhiteAddressPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindBoxWhiteAddressPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).BlindBoxWhiteAddressPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/BlindBoxWhiteAddressPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).BlindBoxWhiteAddressPagination(ctx, req.(*BlindBoxWhiteAddressPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateBlindBoxWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlindBoxWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateBlindBoxWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateBlindBoxWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateBlindBoxWhiteAddress(ctx, req.(*CreateBlindBoxWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_RemoveBlindBoxWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlindBoxWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).RemoveBlindBoxWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/RemoveBlindBoxWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).RemoveBlindBoxWhiteAddress(ctx, req.(*RemoveBlindBoxWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Collect(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_SimpleCollectPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).SimpleCollectPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/SimpleCollectPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).SimpleCollectPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CreateCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CreateCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CreateCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CreateCollect(ctx, req.(*CreateCollectPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_UpdateCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).UpdateCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/UpdateCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).UpdateCollect(ctx, req.(*UpdateCollectPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_ModifyCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCollectPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).ModifyCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/ModifyCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).ModifyCollect(ctx, req.(*ModifyCollectPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_ChangeCollectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).ChangeCollectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/ChangeCollectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).ChangeCollectStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_GenCollectSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).GenCollectSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/GenCollectSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).GenCollectSnapshot(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_DelCollectSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).DelCollectSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/DelCollectSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).DelCollectSnapshot(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_GenCollectExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).GenCollectExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/GenCollectExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).GenCollectExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_DelCollectExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).DelCollectExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/DelCollectExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).DelCollectExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectSnapshotPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectSnapshotPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectSnapshotPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectSnapshotPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectSnapshotPagination(ctx, req.(*CollectSnapshotPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectExchangePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectExchangePaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectExchangePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectExchangePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectExchangePagination(ctx, req.(*CollectExchangePaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectExchange(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectExchangeByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectExchangeByCodePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectExchangeByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectExchangeByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectExchangeByCode(ctx, req.(*CollectExchangeByCodePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectExchangeDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectExchangeDonePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectExchangeDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CollectExchangeDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectExchangeDone(ctx, req.(*CollectExchangeDonePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CheckCollectExchangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCollectExchangeCodePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CheckCollectExchangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.CollectService/CheckCollectExchangeCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CheckCollectExchangeCode(ctx, req.(*CheckCollectExchangeCodePost))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectService_ServiceDesc is the grpc.ServiceDesc for CollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collect.CollectService",
	HandlerType: (*CollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Author",
			Handler:    _CollectService_Author_Handler,
		},
		{
			MethodName: "AuthorDetail",
			Handler:    _CollectService_AuthorDetail_Handler,
		},
		{
			MethodName: "HotAuthors",
			Handler:    _CollectService_HotAuthors_Handler,
		},
		{
			MethodName: "CacheAllAuthors",
			Handler:    _CollectService_CacheAllAuthors_Handler,
		},
		{
			MethodName: "AuthorPagination",
			Handler:    _CollectService_AuthorPagination_Handler,
		},
		{
			MethodName: "CreateAuthor",
			Handler:    _CollectService_CreateAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _CollectService_UpdateAuthor_Handler,
		},
		{
			MethodName: "ChangeAuthorStatus",
			Handler:    _CollectService_ChangeAuthorStatus_Handler,
		},
		{
			MethodName: "Work",
			Handler:    _CollectService_Work_Handler,
		},
		{
			MethodName: "WorkByType",
			Handler:    _CollectService_WorkByType_Handler,
		},
		{
			MethodName: "RandomWork",
			Handler:    _CollectService_RandomWork_Handler,
		},
		{
			MethodName: "Works",
			Handler:    _CollectService_Works_Handler,
		},
		{
			MethodName: "WorkDetail",
			Handler:    _CollectService_WorkDetail_Handler,
		},
		{
			MethodName: "RecommendWorks",
			Handler:    _CollectService_RecommendWorks_Handler,
		},
		{
			MethodName: "AuthorWorkPagination",
			Handler:    _CollectService_AuthorWorkPagination_Handler,
		},
		{
			MethodName: "WorkPagination",
			Handler:    _CollectService_WorkPagination_Handler,
		},
		{
			MethodName: "CreateWork",
			Handler:    _CollectService_CreateWork_Handler,
		},
		{
			MethodName: "UpdateWork",
			Handler:    _CollectService_UpdateWork_Handler,
		},
		{
			MethodName: "ChangeWorkStatus",
			Handler:    _CollectService_ChangeWorkStatus_Handler,
		},
		{
			MethodName: "BlindBox",
			Handler:    _CollectService_BlindBox_Handler,
		},
		{
			MethodName: "BlindBoxByContract",
			Handler:    _CollectService_BlindBoxByContract_Handler,
		},
		{
			MethodName: "BlindBoxes",
			Handler:    _CollectService_BlindBoxes_Handler,
		},
		{
			MethodName: "BlindBoxCount",
			Handler:    _CollectService_BlindBoxCount_Handler,
		},
		{
			MethodName: "BlindBoxTop",
			Handler:    _CollectService_BlindBoxTop_Handler,
		},
		{
			MethodName: "BlindBoxTopCount",
			Handler:    _CollectService_BlindBoxTopCount_Handler,
		},
		{
			MethodName: "BlindBoxDetail",
			Handler:    _CollectService_BlindBoxDetail_Handler,
		},
		{
			MethodName: "BlindBoxPagination",
			Handler:    _CollectService_BlindBoxPagination_Handler,
		},
		{
			MethodName: "CreateBlindBox",
			Handler:    _CollectService_CreateBlindBox_Handler,
		},
		{
			MethodName: "UpdateBlindBox",
			Handler:    _CollectService_UpdateBlindBox_Handler,
		},
		{
			MethodName: "StartBlindBox",
			Handler:    _CollectService_StartBlindBox_Handler,
		},
		{
			MethodName: "CheckBlindBoxStage",
			Handler:    _CollectService_CheckBlindBoxStage_Handler,
		},
		{
			MethodName: "PurchaseBlindBox",
			Handler:    _CollectService_PurchaseBlindBox_Handler,
		},
		{
			MethodName: "ExchangeBlindBox",
			Handler:    _CollectService_ExchangeBlindBox_Handler,
		},
		{
			MethodName: "BlindBoxContent",
			Handler:    _CollectService_BlindBoxContent_Handler,
		},
		{
			MethodName: "BlindBoxContentPagination",
			Handler:    _CollectService_BlindBoxContentPagination_Handler,
		},
		{
			MethodName: "CreateBlindBoxContent",
			Handler:    _CollectService_CreateBlindBoxContent_Handler,
		},
		{
			MethodName: "UpdateBlindBoxContent",
			Handler:    _CollectService_UpdateBlindBoxContent_Handler,
		},
		{
			MethodName: "ReduceBlindBoxContent",
			Handler:    _CollectService_ReduceBlindBoxContent_Handler,
		},
		{
			MethodName: "RemoveBlindBoxContent",
			Handler:    _CollectService_RemoveBlindBoxContent_Handler,
		},
		{
			MethodName: "BlindBoxStage",
			Handler:    _CollectService_BlindBoxStage_Handler,
		},
		{
			MethodName: "BlindBoxStages",
			Handler:    _CollectService_BlindBoxStages_Handler,
		},
		{
			MethodName: "BlindBoxStagePagination",
			Handler:    _CollectService_BlindBoxStagePagination_Handler,
		},
		{
			MethodName: "CreateBlindBoxStage",
			Handler:    _CollectService_CreateBlindBoxStage_Handler,
		},
		{
			MethodName: "UpdateBlindBoxStage",
			Handler:    _CollectService_UpdateBlindBoxStage_Handler,
		},
		{
			MethodName: "RemoveBlindBoxStage",
			Handler:    _CollectService_RemoveBlindBoxStage_Handler,
		},
		{
			MethodName: "MemberBlindBoxExchange",
			Handler:    _CollectService_MemberBlindBoxExchange_Handler,
		},
		{
			MethodName: "AddressBlindBoxExchange",
			Handler:    _CollectService_AddressBlindBoxExchange_Handler,
		},
		{
			MethodName: "GenBlindBoxSnapshot",
			Handler:    _CollectService_GenBlindBoxSnapshot_Handler,
		},
		{
			MethodName: "DelBlindBoxSnapshot",
			Handler:    _CollectService_DelBlindBoxSnapshot_Handler,
		},
		{
			MethodName: "GenBlindBoxExchange",
			Handler:    _CollectService_GenBlindBoxExchange_Handler,
		},
		{
			MethodName: "DelBlindBoxExchange",
			Handler:    _CollectService_DelBlindBoxExchange_Handler,
		},
		{
			MethodName: "BlindBoxSnapshotPagination",
			Handler:    _CollectService_BlindBoxSnapshotPagination_Handler,
		},
		{
			MethodName: "BlindBoxExchangePagination",
			Handler:    _CollectService_BlindBoxExchangePagination_Handler,
		},
		{
			MethodName: "BlindBoxWhiteAddressPagination",
			Handler:    _CollectService_BlindBoxWhiteAddressPagination_Handler,
		},
		{
			MethodName: "CreateBlindBoxWhiteAddress",
			Handler:    _CollectService_CreateBlindBoxWhiteAddress_Handler,
		},
		{
			MethodName: "RemoveBlindBoxWhiteAddress",
			Handler:    _CollectService_RemoveBlindBoxWhiteAddress_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _CollectService_Collect_Handler,
		},
		{
			MethodName: "CollectDetail",
			Handler:    _CollectService_CollectDetail_Handler,
		},
		{
			MethodName: "CollectPagination",
			Handler:    _CollectService_CollectPagination_Handler,
		},
		{
			MethodName: "SimpleCollectPagination",
			Handler:    _CollectService_SimpleCollectPagination_Handler,
		},
		{
			MethodName: "CreateCollect",
			Handler:    _CollectService_CreateCollect_Handler,
		},
		{
			MethodName: "UpdateCollect",
			Handler:    _CollectService_UpdateCollect_Handler,
		},
		{
			MethodName: "ModifyCollect",
			Handler:    _CollectService_ModifyCollect_Handler,
		},
		{
			MethodName: "ChangeCollectStatus",
			Handler:    _CollectService_ChangeCollectStatus_Handler,
		},
		{
			MethodName: "GenCollectSnapshot",
			Handler:    _CollectService_GenCollectSnapshot_Handler,
		},
		{
			MethodName: "DelCollectSnapshot",
			Handler:    _CollectService_DelCollectSnapshot_Handler,
		},
		{
			MethodName: "GenCollectExchange",
			Handler:    _CollectService_GenCollectExchange_Handler,
		},
		{
			MethodName: "DelCollectExchange",
			Handler:    _CollectService_DelCollectExchange_Handler,
		},
		{
			MethodName: "CollectSnapshotPagination",
			Handler:    _CollectService_CollectSnapshotPagination_Handler,
		},
		{
			MethodName: "CollectExchangePagination",
			Handler:    _CollectService_CollectExchangePagination_Handler,
		},
		{
			MethodName: "CollectExchange",
			Handler:    _CollectService_CollectExchange_Handler,
		},
		{
			MethodName: "CollectExchangeByCode",
			Handler:    _CollectService_CollectExchangeByCode_Handler,
		},
		{
			MethodName: "CollectExchangeDone",
			Handler:    _CollectService_CollectExchangeDone_Handler,
		},
		{
			MethodName: "CheckCollectExchangeCode",
			Handler:    _CollectService_CheckCollectExchangeCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect/collect.proto",
}
