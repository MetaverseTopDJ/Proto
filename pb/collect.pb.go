// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: collect/collect.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Collect 集卡活动
type Collect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId  uint64   `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Sort        uint64   `protobuf:"varint,3,opt,name=sort,proto3" json:"sort"`
	Title       string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle    string   `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Banner      string   `protobuf:"bytes,7,opt,name=banner,proto3" json:"banner"`
	Series      string   `protobuf:"bytes,8,opt,name=series,proto3" json:"series"`
	StartAt     string   `protobuf:"bytes,9,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt       string   `protobuf:"bytes,10,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	StartTime   string   `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime     string   `protobuf:"bytes,12,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status      uint64   `protobuf:"varint,13,opt,name=status,proto3" json:"status"`
	Check       bool     `protobuf:"varint,14,opt,name=check,proto3" json:"check"`
	Reward      uint64   `protobuf:"varint,15,opt,name=reward,proto3" json:"reward"`
	Require     []uint64 `protobuf:"varint,16,rep,packed,name=require,proto3" json:"require"`
	CreatedAt   string   `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt   string   `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *Collect) Reset() {
	*x = Collect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collect) ProtoMessage() {}

func (x *Collect) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collect.ProtoReflect.Descriptor instead.
func (*Collect) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{0}
}

func (x *Collect) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Collect) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *Collect) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Collect) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Collect) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Collect) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collect) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Collect) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *Collect) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *Collect) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *Collect) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Collect) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Collect) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Collect) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *Collect) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *Collect) GetRequire() []uint64 {
	if x != nil {
		return x.Require
	}
	return nil
}

func (x *Collect) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Collect) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// CollectReward 集卡奖励
type CollectReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkId uint64 `protobuf:"varint,1,opt,name=work_id,json=workId,proto3" json:"work_id"`
	Cover  string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover"`
}

func (x *CollectReward) Reset() {
	*x = CollectReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectReward) ProtoMessage() {}

func (x *CollectReward) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectReward.ProtoReflect.Descriptor instead.
func (*CollectReward) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{1}
}

func (x *CollectReward) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *CollectReward) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

// CollectRequire 集卡需求
type CollectRequire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkId uint64 `protobuf:"varint,1,opt,name=work_id,json=workId,proto3" json:"work_id"`
	Cover  string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover"`
}

func (x *CollectRequire) Reset() {
	*x = CollectRequire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRequire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequire) ProtoMessage() {}

func (x *CollectRequire) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequire.ProtoReflect.Descriptor instead.
func (*CollectRequire) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{2}
}

func (x *CollectRequire) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *CollectRequire) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

// CollectRewardDetail 集卡奖励 详情
type CollectRewardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkId         uint64 `protobuf:"varint,1,opt,name=work_id,json=workId,proto3" json:"work_id"`
	Type           string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	Series         string `protobuf:"bytes,3,opt,name=series,proto3" json:"series"`
	SerialNum      string `protobuf:"bytes,4,opt,name=serial_num,json=serialNum,proto3" json:"serial_num"`
	Title          string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	SubTitle       string `protobuf:"bytes,6,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Cover          string `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover"`
	Rarity         string `protobuf:"bytes,8,opt,name=rarity,proto3" json:"rarity"`
	PublishedDate  string `protobuf:"bytes,9,opt,name=published_date,json=publishedDate,proto3" json:"published_date"`
	PublishedTotal uint64 `protobuf:"varint,10,opt,name=published_total,json=publishedTotal,proto3" json:"published_total"`
}

func (x *CollectRewardDetail) Reset() {
	*x = CollectRewardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRewardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRewardDetail) ProtoMessage() {}

func (x *CollectRewardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRewardDetail.ProtoReflect.Descriptor instead.
func (*CollectRewardDetail) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{3}
}

func (x *CollectRewardDetail) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *CollectRewardDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CollectRewardDetail) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *CollectRewardDetail) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *CollectRewardDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CollectRewardDetail) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *CollectRewardDetail) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CollectRewardDetail) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *CollectRewardDetail) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *CollectRewardDetail) GetPublishedTotal() uint64 {
	if x != nil {
		return x.PublishedTotal
	}
	return 0
}

// CollectRequireDetail 需求明细
type CollectRequireDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkId         uint64 `protobuf:"varint,1,opt,name=work_id,json=workId,proto3" json:"work_id"`
	Type           string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	Series         string `protobuf:"bytes,3,opt,name=series,proto3" json:"series"`
	SerialNum      string `protobuf:"bytes,4,opt,name=serial_num,json=serialNum,proto3" json:"serial_num"`
	Title          string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	SubTitle       string `protobuf:"bytes,6,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Cover          string `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover"`
	Rarity         string `protobuf:"bytes,8,opt,name=rarity,proto3" json:"rarity"`
	Have           bool   `protobuf:"varint,9,opt,name=have,proto3" json:"have"`
	PublishedDate  string `protobuf:"bytes,10,opt,name=published_date,json=publishedDate,proto3" json:"published_date"`
	PublishedTotal uint64 `protobuf:"varint,11,opt,name=published_total,json=publishedTotal,proto3" json:"published_total"`
}

func (x *CollectRequireDetail) Reset() {
	*x = CollectRequireDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRequireDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequireDetail) ProtoMessage() {}

func (x *CollectRequireDetail) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequireDetail.ProtoReflect.Descriptor instead.
func (*CollectRequireDetail) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{4}
}

func (x *CollectRequireDetail) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *CollectRequireDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CollectRequireDetail) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *CollectRequireDetail) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *CollectRequireDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CollectRequireDetail) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *CollectRequireDetail) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CollectRequireDetail) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *CollectRequireDetail) GetHave() bool {
	if x != nil {
		return x.Have
	}
	return false
}

func (x *CollectRequireDetail) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *CollectRequireDetail) GetPublishedTotal() uint64 {
	if x != nil {
		return x.PublishedTotal
	}
	return 0
}

// SimpleCollect App 返回
type SimpleCollect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Sort        uint64 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	SubTitle    string `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	Banner      string `protobuf:"bytes,6,opt,name=banner,proto3" json:"banner"`
	Series      string `protobuf:"bytes,7,opt,name=series,proto3" json:"series"`
	StartAt     uint64 `protobuf:"varint,8,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt       uint64 `protobuf:"varint,9,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	Open        bool   `protobuf:"varint,10,opt,name=open,proto3" json:"open"`
	Hold        bool   `protobuf:"varint,11,opt,name=hold,proto3" json:"hold"`
	Completed   uint64 `protobuf:"varint,12,opt,name=completed,proto3" json:"completed"`
	Status      uint64 `protobuf:"varint,13,opt,name=status,proto3" json:"status"`
}

func (x *SimpleCollect) Reset() {
	*x = SimpleCollect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCollect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCollect) ProtoMessage() {}

func (x *SimpleCollect) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCollect.ProtoReflect.Descriptor instead.
func (*SimpleCollect) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{5}
}

func (x *SimpleCollect) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SimpleCollect) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SimpleCollect) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SimpleCollect) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *SimpleCollect) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SimpleCollect) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *SimpleCollect) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *SimpleCollect) GetStartAt() uint64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SimpleCollect) GetEndAt() uint64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *SimpleCollect) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *SimpleCollect) GetHold() bool {
	if x != nil {
		return x.Hold
	}
	return false
}

func (x *SimpleCollect) GetCompleted() uint64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *SimpleCollect) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SimpleCollectDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collect     *SimpleCollect          `protobuf:"bytes,1,opt,name=collect,proto3" json:"collect"`
	Reward      *CollectRewardDetail    `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward"`
	RequireList []*CollectRequireDetail `protobuf:"bytes,3,rep,name=require_list,json=requireList,proto3" json:"require_list"`
}

func (x *SimpleCollectDetail) Reset() {
	*x = SimpleCollectDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCollectDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCollectDetail) ProtoMessage() {}

func (x *SimpleCollectDetail) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCollectDetail.ProtoReflect.Descriptor instead.
func (*SimpleCollectDetail) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{6}
}

func (x *SimpleCollectDetail) GetCollect() *SimpleCollect {
	if x != nil {
		return x.Collect
	}
	return nil
}

func (x *SimpleCollectDetail) GetReward() *CollectRewardDetail {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *SimpleCollectDetail) GetRequireList() []*CollectRequireDetail {
	if x != nil {
		return x.RequireList
	}
	return nil
}

// CollectDetail 集卡明细
type CollectDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collect     *SimpleCollect          `protobuf:"bytes,1,opt,name=collect,proto3" json:"collect"`
	Reward      *CollectReward          `protobuf:"bytes,12,opt,name=reward,proto3" json:"reward"`
	RequireList []*CollectRequireDetail `protobuf:"bytes,13,rep,name=require_list,json=requireList,proto3" json:"require_list"`
}

func (x *CollectDetail) Reset() {
	*x = CollectDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectDetail) ProtoMessage() {}

func (x *CollectDetail) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectDetail.ProtoReflect.Descriptor instead.
func (*CollectDetail) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{7}
}

func (x *CollectDetail) GetCollect() *SimpleCollect {
	if x != nil {
		return x.Collect
	}
	return nil
}

func (x *CollectDetail) GetReward() *CollectReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *CollectDetail) GetRequireList() []*CollectRequireDetail {
	if x != nil {
		return x.RequireList
	}
	return nil
}

// CreateCollectPost 创建集卡
type CreateCollectPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId  uint64   `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Sort        uint64   `protobuf:"varint,3,opt,name=sort,proto3" json:"sort"`
	Title       string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle    string   `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Banner      string   `protobuf:"bytes,7,opt,name=banner,proto3" json:"banner"`
	Series      string   `protobuf:"bytes,8,opt,name=series,proto3" json:"series"`
	StartAt     string   `protobuf:"bytes,9,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt       string   `protobuf:"bytes,10,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	Reward      uint64   `protobuf:"varint,11,opt,name=reward,proto3" json:"reward"`
	Require     []uint64 `protobuf:"varint,12,rep,packed,name=require,proto3" json:"require"`
}

func (x *CreateCollectPost) Reset() {
	*x = CreateCollectPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollectPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectPost) ProtoMessage() {}

func (x *CreateCollectPost) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectPost.ProtoReflect.Descriptor instead.
func (*CreateCollectPost) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCollectPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateCollectPost) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CreateCollectPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateCollectPost) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *CreateCollectPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCollectPost) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *CreateCollectPost) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *CreateCollectPost) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *CreateCollectPost) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *CreateCollectPost) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *CreateCollectPost) GetRequire() []uint64 {
	if x != nil {
		return x.Require
	}
	return nil
}

// UpdateCollectPost 更新集卡
type UpdateCollectPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId  uint64   `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Sort        uint64   `protobuf:"varint,3,opt,name=sort,proto3" json:"sort"`
	Title       string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	SubTitle    string   `protobuf:"bytes,5,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
	Description string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	Banner      string   `protobuf:"bytes,7,opt,name=banner,proto3" json:"banner"`
	Series      string   `protobuf:"bytes,8,opt,name=series,proto3" json:"series"`
	StartAt     string   `protobuf:"bytes,9,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt       string   `protobuf:"bytes,10,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	Reward      uint64   `protobuf:"varint,11,opt,name=reward,proto3" json:"reward"`
	Require     []uint64 `protobuf:"varint,12,rep,packed,name=require,proto3" json:"require"`
}

func (x *UpdateCollectPost) Reset() {
	*x = UpdateCollectPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollectPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollectPost) ProtoMessage() {}

func (x *UpdateCollectPost) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollectPost.ProtoReflect.Descriptor instead.
func (*UpdateCollectPost) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCollectPost) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCollectPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateCollectPost) GetSort() uint64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpdateCollectPost) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateCollectPost) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *UpdateCollectPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCollectPost) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *UpdateCollectPost) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *UpdateCollectPost) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *UpdateCollectPost) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *UpdateCollectPost) GetReward() uint64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *UpdateCollectPost) GetRequire() []uint64 {
	if x != nil {
		return x.Require
	}
	return nil
}

// ModifyCollectPost 编辑 集卡内容
type ModifyCollectPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	RewardId  uint64   `protobuf:"varint,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id"`
	RequireId []uint64 `protobuf:"varint,3,rep,packed,name=require_id,json=requireId,proto3" json:"require_id"`
}

func (x *ModifyCollectPost) Reset() {
	*x = ModifyCollectPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCollectPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCollectPost) ProtoMessage() {}

func (x *ModifyCollectPost) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCollectPost.ProtoReflect.Descriptor instead.
func (*ModifyCollectPost) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyCollectPost) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyCollectPost) GetRewardId() uint64 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *ModifyCollectPost) GetRequireId() []uint64 {
	if x != nil {
		return x.RequireId
	}
	return nil
}

// CollectResponse 返回集卡数据
type CollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *Collect `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CollectResponse) Reset() {
	*x = CollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectResponse) ProtoMessage() {}

func (x *CollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectResponse.ProtoReflect.Descriptor instead.
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{11}
}

func (x *CollectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CollectResponse) GetData() *Collect {
	if x != nil {
		return x.Data
	}
	return nil
}

// CollectDetailResponse 集卡详情
type CollectDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string         `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *CollectDetail `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CollectDetailResponse) Reset() {
	*x = CollectDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectDetailResponse) ProtoMessage() {}

func (x *CollectDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectDetailResponse.ProtoReflect.Descriptor instead.
func (*CollectDetailResponse) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{12}
}

func (x *CollectDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CollectDetailResponse) GetData() *CollectDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

// CollectPaginationResponse 返回 集卡分页
type CollectPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                              `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *CollectPaginationResponse_Collects `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *CollectPaginationResponse) Reset() {
	*x = CollectPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPaginationResponse) ProtoMessage() {}

func (x *CollectPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPaginationResponse.ProtoReflect.Descriptor instead.
func (*CollectPaginationResponse) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{13}
}

func (x *CollectPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CollectPaginationResponse) GetData() *CollectPaginationResponse_Collects {
	if x != nil {
		return x.Data
	}
	return nil
}

// SimpleCollectPaginationResponse 返回 前端集卡分页
type SimpleCollectPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                                    `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *SimpleCollectPaginationResponse_Collects `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *SimpleCollectPaginationResponse) Reset() {
	*x = SimpleCollectPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCollectPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCollectPaginationResponse) ProtoMessage() {}

func (x *SimpleCollectPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCollectPaginationResponse.ProtoReflect.Descriptor instead.
func (*SimpleCollectPaginationResponse) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{14}
}

func (x *SimpleCollectPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SimpleCollectPaginationResponse) GetData() *SimpleCollectPaginationResponse_Collects {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollectPaginationResponse_Collects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*Collect `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *CollectPaginationResponse_Collects) Reset() {
	*x = CollectPaginationResponse_Collects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPaginationResponse_Collects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPaginationResponse_Collects) ProtoMessage() {}

func (x *CollectPaginationResponse_Collects) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPaginationResponse_Collects.ProtoReflect.Descriptor instead.
func (*CollectPaginationResponse_Collects) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CollectPaginationResponse_Collects) GetList() []*Collect {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CollectPaginationResponse_Collects) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SimpleCollectPaginationResponse_Collects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*SimpleCollectDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *SimpleCollectPaginationResponse_Collects) Reset() {
	*x = SimpleCollectPaginationResponse_Collects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_collect_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCollectPaginationResponse_Collects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCollectPaginationResponse_Collects) ProtoMessage() {}

func (x *SimpleCollectPaginationResponse_Collects) ProtoReflect() protoreflect.Message {
	mi := &file_collect_collect_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCollectPaginationResponse_Collects.ProtoReflect.Descriptor instead.
func (*SimpleCollectPaginationResponse_Collects) Descriptor() ([]byte, []int) {
	return file_collect_collect_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SimpleCollectPaginationResponse_Collects) GetList() []*SimpleCollectDetail {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SimpleCollectPaginationResponse_Collects) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_collect_collect_proto protoreflect.FileDescriptor

var file_collect_collect_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62,
	0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xbf, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x68, 0x61, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc8, 0x02, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x40, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x22,
	0x5f, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x46, 0x0a, 0x08, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xd6, 0x01, 0x0a, 0x1f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x52, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xe7, 0x2d, 0x0a,
	0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x41, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x19, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x08, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x12, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x0a, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x11, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x54, 0x6f, 0x70, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x10, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12,
	0x1b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x1b, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x19, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x17,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x47, 0x65,
	0x6e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1a, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1a,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x12, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_collect_collect_proto_rawDescOnce sync.Once
	file_collect_collect_proto_rawDescData = file_collect_collect_proto_rawDesc
)

func file_collect_collect_proto_rawDescGZIP() []byte {
	file_collect_collect_proto_rawDescOnce.Do(func() {
		file_collect_collect_proto_rawDescData = protoimpl.X.CompressGZIP(file_collect_collect_proto_rawDescData)
	})
	return file_collect_collect_proto_rawDescData
}

var file_collect_collect_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_collect_collect_proto_goTypes = []interface{}{
	(*Collect)(nil),                                  // 0: collect.Collect
	(*CollectReward)(nil),                            // 1: collect.CollectReward
	(*CollectRequire)(nil),                           // 2: collect.CollectRequire
	(*CollectRewardDetail)(nil),                      // 3: collect.CollectRewardDetail
	(*CollectRequireDetail)(nil),                     // 4: collect.CollectRequireDetail
	(*SimpleCollect)(nil),                            // 5: collect.SimpleCollect
	(*SimpleCollectDetail)(nil),                      // 6: collect.SimpleCollectDetail
	(*CollectDetail)(nil),                            // 7: collect.CollectDetail
	(*CreateCollectPost)(nil),                        // 8: collect.CreateCollectPost
	(*UpdateCollectPost)(nil),                        // 9: collect.UpdateCollectPost
	(*ModifyCollectPost)(nil),                        // 10: collect.ModifyCollectPost
	(*CollectResponse)(nil),                          // 11: collect.CollectResponse
	(*CollectDetailResponse)(nil),                    // 12: collect.CollectDetailResponse
	(*CollectPaginationResponse)(nil),                // 13: collect.CollectPaginationResponse
	(*SimpleCollectPaginationResponse)(nil),          // 14: collect.SimpleCollectPaginationResponse
	(*CollectPaginationResponse_Collects)(nil),       // 15: collect.CollectPaginationResponse.Collects
	(*SimpleCollectPaginationResponse_Collects)(nil), // 16: collect.SimpleCollectPaginationResponse.Collects
	(*InfoPost)(nil),                                 // 17: global.InfoPost
	(*EmptyPost)(nil),                                // 18: global.EmptyPost
	(*PaginationPost)(nil),                           // 19: global.PaginationPost
	(*CreateAuthorPost)(nil),                         // 20: collect.CreateAuthorPost
	(*UpdateAuthorPost)(nil),                         // 21: collect.UpdateAuthorPost
	(*ChangeStatusPost)(nil),                         // 22: global.ChangeStatusPost
	(*WorkByTypePost)(nil),                           // 23: collect.WorkByTypePost
	(*RecommendWorksPost)(nil),                       // 24: collect.RecommendWorksPost
	(*AuthorWorkPaginationPost)(nil),                 // 25: collect.AuthorWorkPaginationPost
	(*CreateWorkPost)(nil),                           // 26: collect.CreateWorkPost
	(*UpdateWorkPost)(nil),                           // 27: collect.UpdateWorkPost
	(*BlindBoxTopPost)(nil),                          // 28: collect.BlindBoxTopPost
	(*BlindBoxDetailPost)(nil),                       // 29: collect.BlindBoxDetailPost
	(*CreateBlindBoxPost)(nil),                       // 30: collect.CreateBlindBoxPost
	(*UpdateBlindBoxPost)(nil),                       // 31: collect.UpdateBlindBoxPost
	(*BlindBoxSignaturePost)(nil),                    // 32: collect.BlindBoxSignaturePost
	(*BlindBoxContentInfoPost)(nil),                  // 33: collect.BlindBoxContentInfoPost
	(*BlindBoxContentPaginationPost)(nil),            // 34: collect.BlindBoxContentPaginationPost
	(*CreateBlindBoxContentPost)(nil),                // 35: collect.CreateBlindBoxContentPost
	(*UpdateBlindBoxContentPost)(nil),                // 36: collect.UpdateBlindBoxContentPost
	(*BlindBoxStagePost)(nil),                        // 37: collect.BlindBoxStagePost
	(*ModifyBlindBoxStagePost)(nil),                  // 38: collect.ModifyBlindBoxStagePost
	(*AddressBlindBoxExchangePost)(nil),              // 39: collect.AddressBlindBoxExchangePost
	(*BlindBoxSnapshotPaginationPost)(nil),           // 40: collect.BlindBoxSnapshotPaginationPost
	(*BlindBoxExchangePaginationPost)(nil),           // 41: collect.BlindBoxExchangePaginationPost
	(*BlindBoxWhiteAddressPaginationPost)(nil),       // 42: collect.BlindBoxWhiteAddressPaginationPost
	(*CreateBlindBoxWhiteAddressPost)(nil),           // 43: collect.CreateBlindBoxWhiteAddressPost
	(*RemoveBlindBoxWhiteAddressPost)(nil),           // 44: collect.RemoveBlindBoxWhiteAddressPost
	(*CollectSnapshotPaginationPost)(nil),            // 45: collect.CollectSnapshotPaginationPost
	(*CollectExchangePaginationPost)(nil),            // 46: collect.CollectExchangePaginationPost
	(*CollectExchangeByCodePost)(nil),                // 47: collect.CollectExchangeByCodePost
	(*CollectExchangeDonePost)(nil),                  // 48: collect.CollectExchangeDonePost
	(*CheckCollectExchangeCodePost)(nil),             // 49: collect.CheckCollectExchangeCodePost
	(*AuthorResponse)(nil),                           // 50: collect.AuthorResponse
	(*SimpleAuthorResponse)(nil),                     // 51: collect.SimpleAuthorResponse
	(*HotAuthorsResponse)(nil),                       // 52: collect.HotAuthorsResponse
	(*AuthorPaginationResponse)(nil),                 // 53: collect.AuthorPaginationResponse
	(*WorkResponse)(nil),                             // 54: collect.WorkResponse
	(*WorksResponse)(nil),                            // 55: collect.WorksResponse
	(*WorkDetailResponse)(nil),                       // 56: collect.WorkDetailResponse
	(*RecommendWorksResponse)(nil),                   // 57: collect.RecommendWorksResponse
	(*AuthorWorkPaginationResponse)(nil),             // 58: collect.AuthorWorkPaginationResponse
	(*WorkPaginationResponse)(nil),                   // 59: collect.WorkPaginationResponse
	(*BlindBoxResponse)(nil),                         // 60: collect.BlindBoxResponse
	(*BlindBoxesResponse)(nil),                       // 61: collect.BlindBoxesResponse
	(*BlindBoxCountResponse)(nil),                    // 62: collect.BlindBoxCountResponse
	(*BlindBoxTopResponse)(nil),                      // 63: collect.BlindBoxTopResponse
	(*BlindBoxDetailResponse)(nil),                   // 64: collect.BlindBoxDetailResponse
	(*BlindBoxPaginationResponse)(nil),               // 65: collect.BlindBoxPaginationResponse
	(*CheckBlindBoxStageResponse)(nil),               // 66: collect.CheckBlindBoxStageResponse
	(*BlindBoxSignatureResponse)(nil),                // 67: collect.BlindBoxSignatureResponse
	(*BlindBoxContentResponse)(nil),                  // 68: collect.BlindBoxContentResponse
	(*BlindBoxContentPaginationResponse)(nil),        // 69: collect.BlindBoxContentPaginationResponse
	(*ResultResponse)(nil),                           // 70: global.ResultResponse
	(*BlindBoxStageResponse)(nil),                    // 71: collect.BlindBoxStageResponse
	(*BlindBoxStagesResponse)(nil),                   // 72: collect.BlindBoxStagesResponse
	(*BlindBoxStagePaginationResponse)(nil),          // 73: collect.BlindBoxStagePaginationResponse
	(*CountBlindBoxExchangeResponse)(nil),            // 74: collect.CountBlindBoxExchangeResponse
	(*BlindBoxSnapshotPaginationResponse)(nil),       // 75: collect.BlindBoxSnapshotPaginationResponse
	(*BlindBoxExchangePaginationResponse)(nil),       // 76: collect.BlindBoxExchangePaginationResponse
	(*BlindBoxWhiteAddressPaginationResponse)(nil),   // 77: collect.BlindBoxWhiteAddressPaginationResponse
	(*CollectSnapshotPaginationResponse)(nil),        // 78: collect.CollectSnapshotPaginationResponse
	(*CollectExchangePaginationResponse)(nil),        // 79: collect.CollectExchangePaginationResponse
	(*CollectSignatureResponse)(nil),                 // 80: collect.CollectSignatureResponse
	(*CollectExchangeResponse)(nil),                  // 81: collect.CollectExchangeResponse
}
var file_collect_collect_proto_depIdxs = []int32{
	5,  // 0: collect.SimpleCollectDetail.collect:type_name -> collect.SimpleCollect
	3,  // 1: collect.SimpleCollectDetail.reward:type_name -> collect.CollectRewardDetail
	4,  // 2: collect.SimpleCollectDetail.require_list:type_name -> collect.CollectRequireDetail
	5,  // 3: collect.CollectDetail.collect:type_name -> collect.SimpleCollect
	1,  // 4: collect.CollectDetail.reward:type_name -> collect.CollectReward
	4,  // 5: collect.CollectDetail.require_list:type_name -> collect.CollectRequireDetail
	0,  // 6: collect.CollectResponse.data:type_name -> collect.Collect
	7,  // 7: collect.CollectDetailResponse.data:type_name -> collect.CollectDetail
	15, // 8: collect.CollectPaginationResponse.data:type_name -> collect.CollectPaginationResponse.Collects
	16, // 9: collect.SimpleCollectPaginationResponse.data:type_name -> collect.SimpleCollectPaginationResponse.Collects
	0,  // 10: collect.CollectPaginationResponse.Collects.list:type_name -> collect.Collect
	6,  // 11: collect.SimpleCollectPaginationResponse.Collects.list:type_name -> collect.SimpleCollectDetail
	17, // 12: collect.CollectService.Author:input_type -> global.InfoPost
	17, // 13: collect.CollectService.AuthorDetail:input_type -> global.InfoPost
	18, // 14: collect.CollectService.HotAuthors:input_type -> global.EmptyPost
	18, // 15: collect.CollectService.CacheAllAuthors:input_type -> global.EmptyPost
	19, // 16: collect.CollectService.AuthorPagination:input_type -> global.PaginationPost
	20, // 17: collect.CollectService.CreateAuthor:input_type -> collect.CreateAuthorPost
	21, // 18: collect.CollectService.UpdateAuthor:input_type -> collect.UpdateAuthorPost
	22, // 19: collect.CollectService.ChangeAuthorStatus:input_type -> global.ChangeStatusPost
	17, // 20: collect.CollectService.Work:input_type -> global.InfoPost
	23, // 21: collect.CollectService.WorkByType:input_type -> collect.WorkByTypePost
	17, // 22: collect.CollectService.RandomWork:input_type -> global.InfoPost
	18, // 23: collect.CollectService.Works:input_type -> global.EmptyPost
	17, // 24: collect.CollectService.WorkDetail:input_type -> global.InfoPost
	24, // 25: collect.CollectService.RecommendWorks:input_type -> collect.RecommendWorksPost
	25, // 26: collect.CollectService.AuthorWorkPagination:input_type -> collect.AuthorWorkPaginationPost
	19, // 27: collect.CollectService.WorkPagination:input_type -> global.PaginationPost
	26, // 28: collect.CollectService.CreateWork:input_type -> collect.CreateWorkPost
	27, // 29: collect.CollectService.UpdateWork:input_type -> collect.UpdateWorkPost
	22, // 30: collect.CollectService.ChangeWorkStatus:input_type -> global.ChangeStatusPost
	17, // 31: collect.CollectService.BlindBox:input_type -> global.InfoPost
	17, // 32: collect.CollectService.BlindBoxByContract:input_type -> global.InfoPost
	18, // 33: collect.CollectService.BlindBoxes:input_type -> global.EmptyPost
	17, // 34: collect.CollectService.BlindBoxCount:input_type -> global.InfoPost
	28, // 35: collect.CollectService.BlindBoxTop:input_type -> collect.BlindBoxTopPost
	18, // 36: collect.CollectService.BlindBoxTopCount:input_type -> global.EmptyPost
	29, // 37: collect.CollectService.BlindBoxDetail:input_type -> collect.BlindBoxDetailPost
	19, // 38: collect.CollectService.BlindBoxPagination:input_type -> global.PaginationPost
	30, // 39: collect.CollectService.CreateBlindBox:input_type -> collect.CreateBlindBoxPost
	31, // 40: collect.CollectService.UpdateBlindBox:input_type -> collect.UpdateBlindBoxPost
	22, // 41: collect.CollectService.StartBlindBox:input_type -> global.ChangeStatusPost
	17, // 42: collect.CollectService.CheckBlindBoxStage:input_type -> global.InfoPost
	32, // 43: collect.CollectService.PurchaseBlindBox:input_type -> collect.BlindBoxSignaturePost
	17, // 44: collect.CollectService.ExchangeBlindBox:input_type -> global.InfoPost
	33, // 45: collect.CollectService.BlindBoxContent:input_type -> collect.BlindBoxContentInfoPost
	34, // 46: collect.CollectService.BlindBoxContentPagination:input_type -> collect.BlindBoxContentPaginationPost
	35, // 47: collect.CollectService.CreateBlindBoxContent:input_type -> collect.CreateBlindBoxContentPost
	36, // 48: collect.CollectService.UpdateBlindBoxContent:input_type -> collect.UpdateBlindBoxContentPost
	33, // 49: collect.CollectService.ReduceBlindBoxContent:input_type -> collect.BlindBoxContentInfoPost
	33, // 50: collect.CollectService.RemoveBlindBoxContent:input_type -> collect.BlindBoxContentInfoPost
	37, // 51: collect.CollectService.BlindBoxStage:input_type -> collect.BlindBoxStagePost
	17, // 52: collect.CollectService.BlindBoxStages:input_type -> global.InfoPost
	17, // 53: collect.CollectService.BlindBoxStagePagination:input_type -> global.InfoPost
	38, // 54: collect.CollectService.CreateBlindBoxStage:input_type -> collect.ModifyBlindBoxStagePost
	38, // 55: collect.CollectService.UpdateBlindBoxStage:input_type -> collect.ModifyBlindBoxStagePost
	37, // 56: collect.CollectService.RemoveBlindBoxStage:input_type -> collect.BlindBoxStagePost
	18, // 57: collect.CollectService.MemberBlindBoxExchange:input_type -> global.EmptyPost
	39, // 58: collect.CollectService.AddressBlindBoxExchange:input_type -> collect.AddressBlindBoxExchangePost
	17, // 59: collect.CollectService.GenBlindBoxSnapshot:input_type -> global.InfoPost
	17, // 60: collect.CollectService.DelBlindBoxSnapshot:input_type -> global.InfoPost
	17, // 61: collect.CollectService.GenBlindBoxExchange:input_type -> global.InfoPost
	17, // 62: collect.CollectService.DelBlindBoxExchange:input_type -> global.InfoPost
	40, // 63: collect.CollectService.BlindBoxSnapshotPagination:input_type -> collect.BlindBoxSnapshotPaginationPost
	41, // 64: collect.CollectService.BlindBoxExchangePagination:input_type -> collect.BlindBoxExchangePaginationPost
	42, // 65: collect.CollectService.BlindBoxWhiteAddressPagination:input_type -> collect.BlindBoxWhiteAddressPaginationPost
	43, // 66: collect.CollectService.CreateBlindBoxWhiteAddress:input_type -> collect.CreateBlindBoxWhiteAddressPost
	44, // 67: collect.CollectService.RemoveBlindBoxWhiteAddress:input_type -> collect.RemoveBlindBoxWhiteAddressPost
	17, // 68: collect.CollectService.Collect:input_type -> global.InfoPost
	17, // 69: collect.CollectService.CollectDetail:input_type -> global.InfoPost
	19, // 70: collect.CollectService.CollectPagination:input_type -> global.PaginationPost
	19, // 71: collect.CollectService.SimpleCollectPagination:input_type -> global.PaginationPost
	8,  // 72: collect.CollectService.CreateCollect:input_type -> collect.CreateCollectPost
	9,  // 73: collect.CollectService.UpdateCollect:input_type -> collect.UpdateCollectPost
	10, // 74: collect.CollectService.ModifyCollect:input_type -> collect.ModifyCollectPost
	22, // 75: collect.CollectService.ChangeCollectStatus:input_type -> global.ChangeStatusPost
	17, // 76: collect.CollectService.GenCollectSnapshot:input_type -> global.InfoPost
	17, // 77: collect.CollectService.DelCollectSnapshot:input_type -> global.InfoPost
	17, // 78: collect.CollectService.GenCollectExchange:input_type -> global.InfoPost
	17, // 79: collect.CollectService.DelCollectExchange:input_type -> global.InfoPost
	45, // 80: collect.CollectService.CollectSnapshotPagination:input_type -> collect.CollectSnapshotPaginationPost
	46, // 81: collect.CollectService.CollectExchangePagination:input_type -> collect.CollectExchangePaginationPost
	17, // 82: collect.CollectService.CollectExchange:input_type -> global.InfoPost
	47, // 83: collect.CollectService.CollectExchangeByCode:input_type -> collect.CollectExchangeByCodePost
	48, // 84: collect.CollectService.CollectExchangeDone:input_type -> collect.CollectExchangeDonePost
	49, // 85: collect.CollectService.CheckCollectExchangeCode:input_type -> collect.CheckCollectExchangeCodePost
	50, // 86: collect.CollectService.Author:output_type -> collect.AuthorResponse
	51, // 87: collect.CollectService.AuthorDetail:output_type -> collect.SimpleAuthorResponse
	52, // 88: collect.CollectService.HotAuthors:output_type -> collect.HotAuthorsResponse
	52, // 89: collect.CollectService.CacheAllAuthors:output_type -> collect.HotAuthorsResponse
	53, // 90: collect.CollectService.AuthorPagination:output_type -> collect.AuthorPaginationResponse
	50, // 91: collect.CollectService.CreateAuthor:output_type -> collect.AuthorResponse
	50, // 92: collect.CollectService.UpdateAuthor:output_type -> collect.AuthorResponse
	50, // 93: collect.CollectService.ChangeAuthorStatus:output_type -> collect.AuthorResponse
	54, // 94: collect.CollectService.Work:output_type -> collect.WorkResponse
	54, // 95: collect.CollectService.WorkByType:output_type -> collect.WorkResponse
	54, // 96: collect.CollectService.RandomWork:output_type -> collect.WorkResponse
	55, // 97: collect.CollectService.Works:output_type -> collect.WorksResponse
	56, // 98: collect.CollectService.WorkDetail:output_type -> collect.WorkDetailResponse
	57, // 99: collect.CollectService.RecommendWorks:output_type -> collect.RecommendWorksResponse
	58, // 100: collect.CollectService.AuthorWorkPagination:output_type -> collect.AuthorWorkPaginationResponse
	59, // 101: collect.CollectService.WorkPagination:output_type -> collect.WorkPaginationResponse
	54, // 102: collect.CollectService.CreateWork:output_type -> collect.WorkResponse
	54, // 103: collect.CollectService.UpdateWork:output_type -> collect.WorkResponse
	54, // 104: collect.CollectService.ChangeWorkStatus:output_type -> collect.WorkResponse
	60, // 105: collect.CollectService.BlindBox:output_type -> collect.BlindBoxResponse
	60, // 106: collect.CollectService.BlindBoxByContract:output_type -> collect.BlindBoxResponse
	61, // 107: collect.CollectService.BlindBoxes:output_type -> collect.BlindBoxesResponse
	62, // 108: collect.CollectService.BlindBoxCount:output_type -> collect.BlindBoxCountResponse
	63, // 109: collect.CollectService.BlindBoxTop:output_type -> collect.BlindBoxTopResponse
	62, // 110: collect.CollectService.BlindBoxTopCount:output_type -> collect.BlindBoxCountResponse
	64, // 111: collect.CollectService.BlindBoxDetail:output_type -> collect.BlindBoxDetailResponse
	65, // 112: collect.CollectService.BlindBoxPagination:output_type -> collect.BlindBoxPaginationResponse
	60, // 113: collect.CollectService.CreateBlindBox:output_type -> collect.BlindBoxResponse
	60, // 114: collect.CollectService.UpdateBlindBox:output_type -> collect.BlindBoxResponse
	60, // 115: collect.CollectService.StartBlindBox:output_type -> collect.BlindBoxResponse
	66, // 116: collect.CollectService.CheckBlindBoxStage:output_type -> collect.CheckBlindBoxStageResponse
	67, // 117: collect.CollectService.PurchaseBlindBox:output_type -> collect.BlindBoxSignatureResponse
	67, // 118: collect.CollectService.ExchangeBlindBox:output_type -> collect.BlindBoxSignatureResponse
	68, // 119: collect.CollectService.BlindBoxContent:output_type -> collect.BlindBoxContentResponse
	69, // 120: collect.CollectService.BlindBoxContentPagination:output_type -> collect.BlindBoxContentPaginationResponse
	70, // 121: collect.CollectService.CreateBlindBoxContent:output_type -> global.ResultResponse
	70, // 122: collect.CollectService.UpdateBlindBoxContent:output_type -> global.ResultResponse
	70, // 123: collect.CollectService.ReduceBlindBoxContent:output_type -> global.ResultResponse
	70, // 124: collect.CollectService.RemoveBlindBoxContent:output_type -> global.ResultResponse
	71, // 125: collect.CollectService.BlindBoxStage:output_type -> collect.BlindBoxStageResponse
	72, // 126: collect.CollectService.BlindBoxStages:output_type -> collect.BlindBoxStagesResponse
	73, // 127: collect.CollectService.BlindBoxStagePagination:output_type -> collect.BlindBoxStagePaginationResponse
	71, // 128: collect.CollectService.CreateBlindBoxStage:output_type -> collect.BlindBoxStageResponse
	71, // 129: collect.CollectService.UpdateBlindBoxStage:output_type -> collect.BlindBoxStageResponse
	70, // 130: collect.CollectService.RemoveBlindBoxStage:output_type -> global.ResultResponse
	74, // 131: collect.CollectService.MemberBlindBoxExchange:output_type -> collect.CountBlindBoxExchangeResponse
	74, // 132: collect.CollectService.AddressBlindBoxExchange:output_type -> collect.CountBlindBoxExchangeResponse
	70, // 133: collect.CollectService.GenBlindBoxSnapshot:output_type -> global.ResultResponse
	70, // 134: collect.CollectService.DelBlindBoxSnapshot:output_type -> global.ResultResponse
	70, // 135: collect.CollectService.GenBlindBoxExchange:output_type -> global.ResultResponse
	70, // 136: collect.CollectService.DelBlindBoxExchange:output_type -> global.ResultResponse
	75, // 137: collect.CollectService.BlindBoxSnapshotPagination:output_type -> collect.BlindBoxSnapshotPaginationResponse
	76, // 138: collect.CollectService.BlindBoxExchangePagination:output_type -> collect.BlindBoxExchangePaginationResponse
	77, // 139: collect.CollectService.BlindBoxWhiteAddressPagination:output_type -> collect.BlindBoxWhiteAddressPaginationResponse
	70, // 140: collect.CollectService.CreateBlindBoxWhiteAddress:output_type -> global.ResultResponse
	70, // 141: collect.CollectService.RemoveBlindBoxWhiteAddress:output_type -> global.ResultResponse
	11, // 142: collect.CollectService.Collect:output_type -> collect.CollectResponse
	12, // 143: collect.CollectService.CollectDetail:output_type -> collect.CollectDetailResponse
	13, // 144: collect.CollectService.CollectPagination:output_type -> collect.CollectPaginationResponse
	14, // 145: collect.CollectService.SimpleCollectPagination:output_type -> collect.SimpleCollectPaginationResponse
	11, // 146: collect.CollectService.CreateCollect:output_type -> collect.CollectResponse
	11, // 147: collect.CollectService.UpdateCollect:output_type -> collect.CollectResponse
	70, // 148: collect.CollectService.ModifyCollect:output_type -> global.ResultResponse
	11, // 149: collect.CollectService.ChangeCollectStatus:output_type -> collect.CollectResponse
	70, // 150: collect.CollectService.GenCollectSnapshot:output_type -> global.ResultResponse
	70, // 151: collect.CollectService.DelCollectSnapshot:output_type -> global.ResultResponse
	70, // 152: collect.CollectService.GenCollectExchange:output_type -> global.ResultResponse
	70, // 153: collect.CollectService.DelCollectExchange:output_type -> global.ResultResponse
	78, // 154: collect.CollectService.CollectSnapshotPagination:output_type -> collect.CollectSnapshotPaginationResponse
	79, // 155: collect.CollectService.CollectExchangePagination:output_type -> collect.CollectExchangePaginationResponse
	80, // 156: collect.CollectService.CollectExchange:output_type -> collect.CollectSignatureResponse
	81, // 157: collect.CollectService.CollectExchangeByCode:output_type -> collect.CollectExchangeResponse
	70, // 158: collect.CollectService.CollectExchangeDone:output_type -> global.ResultResponse
	70, // 159: collect.CollectService.CheckCollectExchangeCode:output_type -> global.ResultResponse
	86, // [86:160] is the sub-list for method output_type
	12, // [12:86] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_collect_collect_proto_init() }
func file_collect_collect_proto_init() {
	if File_collect_collect_proto != nil {
		return
	}
	file_global_global_proto_init()
	file_collect_author_proto_init()
	file_collect_work_proto_init()
	file_collect_blind_box_proto_init()
	file_collect_blind_box_stage_proto_init()
	file_collect_blind_box_content_proto_init()
	file_collect_blind_box_exchange_proto_init()
	file_collect_blind_box_signature_proto_init()
	file_collect_blind_box_white_address_proto_init()
	file_collect_collect_exchange_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_collect_collect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRequire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRewardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRequireDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCollect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCollectDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollectPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollectPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCollectPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCollectPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPaginationResponse_Collects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collect_collect_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCollectPaginationResponse_Collects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collect_collect_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_collect_collect_proto_goTypes,
		DependencyIndexes: file_collect_collect_proto_depIdxs,
		MessageInfos:      file_collect_collect_proto_msgTypes,
	}.Build()
	File_collect_collect_proto = out.File
	file_collect_collect_proto_rawDesc = nil
	file_collect_collect_proto_goTypes = nil
	file_collect_collect_proto_depIdxs = nil
}
