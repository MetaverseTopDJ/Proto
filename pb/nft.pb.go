// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: nft/nft.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NFT 信息
type NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId uint64            `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	TokenId    uint64            `protobuf:"varint,3,opt,name=token_id,json=tokenId,proto3" json:"token_id"`
	WorkId     uint64            `protobuf:"varint,4,opt,name=work_id,json=workId,proto3" json:"work_id"`
	CreatorId  uint64            `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id"`
	OwnerId    uint64            `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	Code       uint64            `protobuf:"varint,7,opt,name=code,proto3" json:"code"`
	Price      string            `protobuf:"bytes,8,opt,name=price,proto3" json:"price"`
	Symbol     string            `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol"`
	Version    uint64            `protobuf:"varint,10,opt,name=version,proto3" json:"version"`
	CreatedAt  string            `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt  string            `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Contract   *RelationContract `protobuf:"bytes,13,opt,name=contract,proto3" json:"contract"`
}

func (x *NFT) Reset() {
	*x = NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFT) ProtoMessage() {}

func (x *NFT) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFT.ProtoReflect.Descriptor instead.
func (*NFT) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{0}
}

func (x *NFT) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFT) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NFT) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *NFT) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *NFT) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *NFT) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *NFT) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NFT) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *NFT) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *NFT) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NFT) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NFT) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *NFT) GetContract() *RelationContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// NFTContent NFT Metadata
type NFTContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	TokenId    uint64 `protobuf:"varint,2,opt,name=token_id,json=tokenId,proto3" json:"token_id"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
}

func (x *NFTContent) Reset() {
	*x = NFTContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTContent) ProtoMessage() {}

func (x *NFTContent) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTContent.ProtoReflect.Descriptor instead.
func (*NFTContent) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{1}
}

func (x *NFTContent) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NFTContent) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *NFTContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// CountWorkCollectorPost 计算作品收藏者人数
type CountWorkCollectorPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	WorkId     uint64 `protobuf:"varint,2,opt,name=work_id,json=workId,proto3" json:"work_id"`
}

func (x *CountWorkCollectorPost) Reset() {
	*x = CountWorkCollectorPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountWorkCollectorPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountWorkCollectorPost) ProtoMessage() {}

func (x *CountWorkCollectorPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountWorkCollectorPost.ProtoReflect.Descriptor instead.
func (*CountWorkCollectorPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{2}
}

func (x *CountWorkCollectorPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CountWorkCollectorPost) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

// MemberWorkPost 会员拥有的 Work
type MemberWorkPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	OwnerId    uint64 `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
}

func (x *MemberWorkPost) Reset() {
	*x = MemberWorkPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberWorkPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberWorkPost) ProtoMessage() {}

func (x *MemberWorkPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberWorkPost.ProtoReflect.Descriptor instead.
func (*MemberWorkPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{3}
}

func (x *MemberWorkPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *MemberWorkPost) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

// NftPaginationPost NFT 分页请求
type NftPaginationPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Creator    string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator"`
	Owner      string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner"`
	Page       uint64 `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Size       uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
}

func (x *NftPaginationPost) Reset() {
	*x = NftPaginationPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftPaginationPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftPaginationPost) ProtoMessage() {}

func (x *NftPaginationPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftPaginationPost.ProtoReflect.Descriptor instead.
func (*NftPaginationPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{4}
}

func (x *NftPaginationPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NftPaginationPost) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *NftPaginationPost) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NftPaginationPost) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NftPaginationPost) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// CheckExchangePost 检查兑换
type CheckCollectExchangePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
}

func (x *CheckCollectExchangePost) Reset() {
	*x = CheckCollectExchangePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCollectExchangePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCollectExchangePost) ProtoMessage() {}

func (x *CheckCollectExchangePost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCollectExchangePost.ProtoReflect.Descriptor instead.
func (*CheckCollectExchangePost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{5}
}

func (x *CheckCollectExchangePost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// CheckBlindExchangePost 检查兑换
type CheckBlindExchangePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Num  uint64 `protobuf:"varint,2,opt,name=num,proto3" json:"num"`
}

func (x *CheckBlindExchangePost) Reset() {
	*x = CheckBlindExchangePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBlindExchangePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlindExchangePost) ProtoMessage() {}

func (x *CheckBlindExchangePost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlindExchangePost.ProtoReflect.Descriptor instead.
func (*CheckBlindExchangePost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{6}
}

func (x *CheckBlindExchangePost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckBlindExchangePost) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

// NftResponse 返回
type NFTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFT   `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTResponse) Reset() {
	*x = NFTResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTResponse) ProtoMessage() {}

func (x *NFTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTResponse.ProtoReflect.Descriptor instead.
func (*NFTResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{7}
}

func (x *NFTResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTResponse) GetData() *NFT {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTContentResponse 返回 NFT 内容
type NFTContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTContent `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTContentResponse) Reset() {
	*x = NFTContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTContentResponse) ProtoMessage() {}

func (x *NFTContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTContentResponse.ProtoReflect.Descriptor instead.
func (*NFTContentResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{8}
}

func (x *NFTContentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTContentResponse) GetData() *NFTContent {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTPaginationResponse 分页
type NFTPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                      `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTPaginationResponse_NFTs `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTPaginationResponse) Reset() {
	*x = NFTPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTPaginationResponse) ProtoMessage() {}

func (x *NFTPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTPaginationResponse.ProtoReflect.Descriptor instead.
func (*NFTPaginationResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{9}
}

func (x *NFTPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTPaginationResponse) GetData() *NFTPaginationResponse_NFTs {
	if x != nil {
		return x.Data
	}
	return nil
}

type NFTPaginationResponse_NFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*NFT `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *NFTPaginationResponse_NFTs) Reset() {
	*x = NFTPaginationResponse_NFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTPaginationResponse_NFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTPaginationResponse_NFTs) ProtoMessage() {}

func (x *NFTPaginationResponse_NFTs) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTPaginationResponse_NFTs.ProtoReflect.Descriptor instead.
func (*NFTPaginationResponse_NFTs) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{9, 0}
}

func (x *NFTPaginationResponse_NFTs) GetList() []*NFT {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NFTPaginationResponse_NFTs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_nft_nft_proto protoreflect.FileDescriptor

var file_nft_nft_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6e, 0x66, 0x74, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x6e, 0x66, 0x74, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x66, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6e, 0x66, 0x74, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x02, 0x0a, 0x03, 0x4e,
	0x46, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x22, 0x62, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x4e, 0x66, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x45, 0x0a, 0x0b, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a,
	0x12, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x4e, 0x46, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3a, 0x0a, 0x04, 0x4e,
	0x46, 0x54, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x86, 0x15, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x15, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x11, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x13, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x03, 0x4e, 0x66, 0x74,
	0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x4e, 0x66, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x13, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x73, 0x12,
	0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x4e,
	0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x4e, 0x66, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x4e, 0x66, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x4e, 0x46, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x15, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46,
	0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x12, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x12, 0x1b, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_nft_nft_proto_rawDescOnce sync.Once
	file_nft_nft_proto_rawDescData = file_nft_nft_proto_rawDesc
)

func file_nft_nft_proto_rawDescGZIP() []byte {
	file_nft_nft_proto_rawDescOnce.Do(func() {
		file_nft_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_nft_proto_rawDescData)
	})
	return file_nft_nft_proto_rawDescData
}

var file_nft_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_nft_nft_proto_goTypes = []interface{}{
	(*NFT)(nil),                           // 0: nft.NFT
	(*NFTContent)(nil),                    // 1: nft.NFTContent
	(*CountWorkCollectorPost)(nil),        // 2: nft.CountWorkCollectorPost
	(*MemberWorkPost)(nil),                // 3: nft.MemberWorkPost
	(*NftPaginationPost)(nil),             // 4: nft.NftPaginationPost
	(*CheckCollectExchangePost)(nil),      // 5: nft.CheckCollectExchangePost
	(*CheckBlindExchangePost)(nil),        // 6: nft.CheckBlindExchangePost
	(*NFTResponse)(nil),                   // 7: nft.NFTResponse
	(*NFTContentResponse)(nil),            // 8: nft.NFTContentResponse
	(*NFTPaginationResponse)(nil),         // 9: nft.NFTPaginationResponse
	(*NFTPaginationResponse_NFTs)(nil),    // 10: nft.NFTPaginationResponse.NFTs
	(*RelationContract)(nil),              // 11: global.RelationContract
	(*InfoPost)(nil),                      // 12: global.InfoPost
	(*EmptyPost)(nil),                     // 13: global.EmptyPost
	(*PaginationPost)(nil),                // 14: global.PaginationPost
	(*CreateContractPost)(nil),            // 15: global.CreateContractPost
	(*UpdateContractPost)(nil),            // 16: global.UpdateContractPost
	(*ChangeStatusPost)(nil),              // 17: global.ChangeStatusPost
	(*GenUniqueCodePost)(nil),             // 18: global.GenUniqueCodePost
	(*GenUniqueCodesPost)(nil),            // 19: global.GenUniqueCodesPost
	(*BlindBoxSignPost)(nil),              // 20: nft.BlindBoxSignPost
	(*RemixSignPost)(nil),                 // 21: nft.RemixSignPost
	(*CollectSignPost)(nil),               // 22: nft.CollectSignPost
	(*CheckTransactionByHashPost)(nil),    // 23: global.CheckTransactionByHashPost
	(*MemberNftPaginationPost)(nil),       // 24: nft.MemberNftPaginationPost
	(*NftMemberPaginationPost)(nil),       // 25: nft.NftMemberPaginationPost
	(*NftCreatorPaginationPost)(nil),      // 26: nft.NftCreatorPaginationPost
	(*NftTransferPaginationPost)(nil),     // 27: nft.NftTransferPaginationPost
	(*ContractResponse)(nil),              // 28: global.ContractResponse
	(*ContractsResponse)(nil),             // 29: global.ContractsResponse
	(*ContractAddressResponse)(nil),       // 30: global.ContractAddressResponse
	(*ContractPaginationResponse)(nil),    // 31: global.ContractPaginationResponse
	(*NumberResponse)(nil),                // 32: global.NumberResponse
	(*NumbersResponse)(nil),               // 33: global.NumbersResponse
	(*SignatureResponse)(nil),             // 34: nft.SignatureResponse
	(*ResultResponse)(nil),                // 35: global.ResultResponse
	(*MemberNftPaginationResponse)(nil),   // 36: nft.MemberNftPaginationResponse
	(*NftMemberPaginationResponse)(nil),   // 37: nft.NftMemberPaginationResponse
	(*CountResponse)(nil),                 // 38: global.CountResponse
	(*IDsResponse)(nil),                   // 39: global.IDsResponse
	(*NFTCreatorPaginationResponse)(nil),  // 40: nft.NFTCreatorPaginationResponse
	(*NFTTransferPaginationResponse)(nil), // 41: nft.NFTTransferPaginationResponse
	(*CheckResponse)(nil),                 // 42: global.CheckResponse
}
var file_nft_nft_proto_depIdxs = []int32{
	11, // 0: nft.NFT.contract:type_name -> global.RelationContract
	0,  // 1: nft.NFTResponse.data:type_name -> nft.NFT
	1,  // 2: nft.NFTContentResponse.data:type_name -> nft.NFTContent
	10, // 3: nft.NFTPaginationResponse.data:type_name -> nft.NFTPaginationResponse.NFTs
	0,  // 4: nft.NFTPaginationResponse.NFTs.list:type_name -> nft.NFT
	12, // 5: nft.NFTService.MysteryBox:input_type -> global.InfoPost
	12, // 6: nft.NFTService.Note:input_type -> global.InfoPost
	12, // 7: nft.NFTService.Ticket:input_type -> global.InfoPost
	12, // 8: nft.NFTService.RemixInfo:input_type -> global.InfoPost
	12, // 9: nft.NFTService.NftContract:input_type -> global.InfoPost
	13, // 10: nft.NFTService.NftContracts:input_type -> global.EmptyPost
	13, // 11: nft.NFTService.NftContractAddress:input_type -> global.EmptyPost
	14, // 12: nft.NFTService.NftContractPagination:input_type -> global.PaginationPost
	15, // 13: nft.NFTService.CreateNftContract:input_type -> global.CreateContractPost
	16, // 14: nft.NFTService.UpdateNftContract:input_type -> global.UpdateContractPost
	17, // 15: nft.NFTService.ChangeNftContractStatus:input_type -> global.ChangeStatusPost
	18, // 16: nft.NFTService.GenUniqueCode:input_type -> global.GenUniqueCodePost
	19, // 17: nft.NFTService.GenUniqueCodes:input_type -> global.GenUniqueCodesPost
	20, // 18: nft.NFTService.BlindBoxSignature:input_type -> nft.BlindBoxSignPost
	21, // 19: nft.NFTService.RemixSignature:input_type -> nft.RemixSignPost
	22, // 20: nft.NFTService.CollectSignature:input_type -> nft.CollectSignPost
	23, // 21: nft.NFTService.CheckTransactionByHash:input_type -> global.CheckTransactionByHashPost
	13, // 22: nft.NFTService.BlindBoxContracts:input_type -> global.EmptyPost
	13, // 23: nft.NFTService.StartBlindBoxContract:input_type -> global.EmptyPost
	13, // 24: nft.NFTService.StopBlindBoxContract:input_type -> global.EmptyPost
	12, // 25: nft.NFTService.NoteContract:input_type -> global.InfoPost
	12, // 26: nft.NFTService.StartNoteContract:input_type -> global.InfoPost
	12, // 27: nft.NFTService.StopNoteContract:input_type -> global.InfoPost
	12, // 28: nft.NFTService.TicketContract:input_type -> global.InfoPost
	12, // 29: nft.NFTService.StartTicketContract:input_type -> global.InfoPost
	12, // 30: nft.NFTService.StopTicketContract:input_type -> global.InfoPost
	24, // 31: nft.NFTService.MemberNftPagination:input_type -> nft.MemberNftPaginationPost
	25, // 32: nft.NFTService.NftMemberPagination:input_type -> nft.NftMemberPaginationPost
	12, // 33: nft.NFTService.Nft:input_type -> global.InfoPost
	12, // 34: nft.NFTService.NftPrice:input_type -> global.InfoPost
	2,  // 35: nft.NFTService.CountWorkCollector:input_type -> nft.CountWorkCollectorPost
	3,  // 36: nft.NFTService.MemberWorkIDs:input_type -> nft.MemberWorkPost
	3,  // 37: nft.NFTService.MemberCollectWorkIDs:input_type -> nft.MemberWorkPost
	4,  // 38: nft.NFTService.NftPagination:input_type -> nft.NftPaginationPost
	26, // 39: nft.NFTService.NftCreatorPagination:input_type -> nft.NftCreatorPaginationPost
	27, // 40: nft.NFTService.NftTransferPagination:input_type -> nft.NftTransferPaginationPost
	5,  // 41: nft.NFTService.CheckCollectExchangeTx:input_type -> nft.CheckCollectExchangePost
	6,  // 42: nft.NFTService.CheckBlindBoxExchangeTx:input_type -> nft.CheckBlindExchangePost
	8,  // 43: nft.NFTService.MysteryBox:output_type -> nft.NFTContentResponse
	8,  // 44: nft.NFTService.Note:output_type -> nft.NFTContentResponse
	8,  // 45: nft.NFTService.Ticket:output_type -> nft.NFTContentResponse
	8,  // 46: nft.NFTService.RemixInfo:output_type -> nft.NFTContentResponse
	28, // 47: nft.NFTService.NftContract:output_type -> global.ContractResponse
	29, // 48: nft.NFTService.NftContracts:output_type -> global.ContractsResponse
	30, // 49: nft.NFTService.NftContractAddress:output_type -> global.ContractAddressResponse
	31, // 50: nft.NFTService.NftContractPagination:output_type -> global.ContractPaginationResponse
	28, // 51: nft.NFTService.CreateNftContract:output_type -> global.ContractResponse
	28, // 52: nft.NFTService.UpdateNftContract:output_type -> global.ContractResponse
	28, // 53: nft.NFTService.ChangeNftContractStatus:output_type -> global.ContractResponse
	32, // 54: nft.NFTService.GenUniqueCode:output_type -> global.NumberResponse
	33, // 55: nft.NFTService.GenUniqueCodes:output_type -> global.NumbersResponse
	34, // 56: nft.NFTService.BlindBoxSignature:output_type -> nft.SignatureResponse
	34, // 57: nft.NFTService.RemixSignature:output_type -> nft.SignatureResponse
	34, // 58: nft.NFTService.CollectSignature:output_type -> nft.SignatureResponse
	35, // 59: nft.NFTService.CheckTransactionByHash:output_type -> global.ResultResponse
	29, // 60: nft.NFTService.BlindBoxContracts:output_type -> global.ContractsResponse
	35, // 61: nft.NFTService.StartBlindBoxContract:output_type -> global.ResultResponse
	35, // 62: nft.NFTService.StopBlindBoxContract:output_type -> global.ResultResponse
	28, // 63: nft.NFTService.NoteContract:output_type -> global.ContractResponse
	35, // 64: nft.NFTService.StartNoteContract:output_type -> global.ResultResponse
	35, // 65: nft.NFTService.StopNoteContract:output_type -> global.ResultResponse
	28, // 66: nft.NFTService.TicketContract:output_type -> global.ContractResponse
	35, // 67: nft.NFTService.StartTicketContract:output_type -> global.ResultResponse
	35, // 68: nft.NFTService.StopTicketContract:output_type -> global.ResultResponse
	36, // 69: nft.NFTService.MemberNftPagination:output_type -> nft.MemberNftPaginationResponse
	37, // 70: nft.NFTService.NftMemberPagination:output_type -> nft.NftMemberPaginationResponse
	7,  // 71: nft.NFTService.Nft:output_type -> nft.NFTResponse
	35, // 72: nft.NFTService.NftPrice:output_type -> global.ResultResponse
	38, // 73: nft.NFTService.CountWorkCollector:output_type -> global.CountResponse
	39, // 74: nft.NFTService.MemberWorkIDs:output_type -> global.IDsResponse
	39, // 75: nft.NFTService.MemberCollectWorkIDs:output_type -> global.IDsResponse
	9,  // 76: nft.NFTService.NftPagination:output_type -> nft.NFTPaginationResponse
	40, // 77: nft.NFTService.NftCreatorPagination:output_type -> nft.NFTCreatorPaginationResponse
	41, // 78: nft.NFTService.NftTransferPagination:output_type -> nft.NFTTransferPaginationResponse
	42, // 79: nft.NFTService.CheckCollectExchangeTx:output_type -> global.CheckResponse
	42, // 80: nft.NFTService.CheckBlindBoxExchangeTx:output_type -> global.CheckResponse
	43, // [43:81] is the sub-list for method output_type
	5,  // [5:43] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_nft_nft_proto_init() }
func file_nft_nft_proto_init() {
	if File_nft_nft_proto != nil {
		return
	}
	file_global_global_proto_init()
	file_global_contract_proto_init()
	file_nft_nft_creator_proto_init()
	file_nft_nft_transfer_proto_init()
	file_nft_member_nft_proto_init()
	file_nft_signature_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nft_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountWorkCollectorPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberWorkPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftPaginationPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCollectExchangePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBlindExchangePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTPaginationResponse_NFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_nft_proto_goTypes,
		DependencyIndexes: file_nft_nft_proto_depIdxs,
		MessageInfos:      file_nft_nft_proto_msgTypes,
	}.Build()
	File_nft_nft_proto = out.File
	file_nft_nft_proto_rawDesc = nil
	file_nft_nft_proto_goTypes = nil
	file_nft_nft_proto_depIdxs = nil
}
