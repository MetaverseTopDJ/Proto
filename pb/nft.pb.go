// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: nft/nft.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NFT 信息
type NFT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId uint64          `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	TokenId    uint64          `protobuf:"varint,3,opt,name=token_id,json=tokenId,proto3" json:"token_id"`
	WorkId     uint64          `protobuf:"varint,4,opt,name=work_id,json=workId,proto3" json:"work_id"`
	CreatorId  uint64          `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id"`
	OwnerId    uint64          `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	Code       string          `protobuf:"bytes,7,opt,name=code,proto3" json:"code"`
	Version    uint64          `protobuf:"varint,8,opt,name=version,proto3" json:"version"`
	CreatedAt  string          `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt  string          `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Contract   *SimpleContract `protobuf:"bytes,11,opt,name=contract,proto3" json:"contract"`
}

func (x *NFT) Reset() {
	*x = NFT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFT) ProtoMessage() {}

func (x *NFT) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFT.ProtoReflect.Descriptor instead.
func (*NFT) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{0}
}

func (x *NFT) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFT) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NFT) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *NFT) GetWorkId() uint64 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *NFT) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *NFT) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *NFT) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *NFT) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NFT) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NFT) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *NFT) GetContract() *SimpleContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// NFTCreator NFT 铸造信息
type NFTCreator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	BlockNumber uint64          `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number"`
	BlockTime   string          `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3" json:"block_time"`
	ContractId  uint64          `protobuf:"varint,4,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	TokenId     uint64          `protobuf:"varint,5,opt,name=token_id,json=tokenId,proto3" json:"token_id"`
	MemberId    uint64          `protobuf:"varint,6,opt,name=member_id,json=memberId,proto3" json:"member_id"`
	Code        string          `protobuf:"bytes,7,opt,name=code,proto3" json:"code"`
	Hash        string          `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash"`
	Address     string          `protobuf:"bytes,9,opt,name=address,proto3" json:"address"`
	Contract    *SimpleContract `protobuf:"bytes,10,opt,name=contract,proto3" json:"contract"`
}

func (x *NFTCreator) Reset() {
	*x = NFTCreator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTCreator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTCreator) ProtoMessage() {}

func (x *NFTCreator) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTCreator.ProtoReflect.Descriptor instead.
func (*NFTCreator) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{1}
}

func (x *NFTCreator) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFTCreator) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NFTCreator) GetBlockTime() string {
	if x != nil {
		return x.BlockTime
	}
	return ""
}

func (x *NFTCreator) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NFTCreator) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *NFTCreator) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *NFTCreator) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *NFTCreator) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NFTCreator) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NFTCreator) GetContract() *SimpleContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// NFTTransfer NFT 交易信息
type NFTTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	BlockNumber uint64          `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number"`
	BlockTime   string          `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3" json:"block_time"`
	ContractId  uint64          `protobuf:"varint,4,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	TokenId     uint64          `protobuf:"varint,5,opt,name=token_id,json=tokenId,proto3" json:"token_id"`
	Hash        string          `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash"`
	FormId      uint64          `protobuf:"varint,7,opt,name=form_id,json=formId,proto3" json:"form_id"`
	Form        string          `protobuf:"bytes,8,opt,name=form,proto3" json:"form"`
	ToId        uint64          `protobuf:"varint,9,opt,name=to_id,json=toId,proto3" json:"to_id"`
	To          string          `protobuf:"bytes,10,opt,name=to,proto3" json:"to"`
	Contract    *SimpleContract `protobuf:"bytes,11,opt,name=contract,proto3" json:"contract"`
}

func (x *NFTTransfer) Reset() {
	*x = NFTTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTransfer) ProtoMessage() {}

func (x *NFTTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTransfer.ProtoReflect.Descriptor instead.
func (*NFTTransfer) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{2}
}

func (x *NFTTransfer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFTTransfer) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *NFTTransfer) GetBlockTime() string {
	if x != nil {
		return x.BlockTime
	}
	return ""
}

func (x *NFTTransfer) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NFTTransfer) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *NFTTransfer) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NFTTransfer) GetFormId() uint64 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *NFTTransfer) GetForm() string {
	if x != nil {
		return x.Form
	}
	return ""
}

func (x *NFTTransfer) GetToId() uint64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *NFTTransfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *NFTTransfer) GetContract() *SimpleContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// NftPaginationPost NFT 分页请求
type NftPaginationPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Creator    string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator"`
	Owner      string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner"`
	Page       uint64 `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Size       uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
}

func (x *NftPaginationPost) Reset() {
	*x = NftPaginationPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftPaginationPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftPaginationPost) ProtoMessage() {}

func (x *NftPaginationPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftPaginationPost.ProtoReflect.Descriptor instead.
func (*NftPaginationPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{3}
}

func (x *NftPaginationPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NftPaginationPost) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *NftPaginationPost) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *NftPaginationPost) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NftPaginationPost) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// NftCreatorPaginationPost NFT 铸造日志 分页请求
type NftCreatorPaginationPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address"`
	Page       uint64 `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	Size       uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
}

func (x *NftCreatorPaginationPost) Reset() {
	*x = NftCreatorPaginationPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftCreatorPaginationPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftCreatorPaginationPost) ProtoMessage() {}

func (x *NftCreatorPaginationPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftCreatorPaginationPost.ProtoReflect.Descriptor instead.
func (*NftCreatorPaginationPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{4}
}

func (x *NftCreatorPaginationPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NftCreatorPaginationPost) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NftCreatorPaginationPost) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NftCreatorPaginationPost) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// NftTransferPaginationPost NFT 交易日志 分页请求
type NftTransferPaginationPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	From       string `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	To         string `protobuf:"bytes,3,opt,name=to,proto3" json:"to"`
	Page       uint64 `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Size       uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
}

func (x *NftTransferPaginationPost) Reset() {
	*x = NftTransferPaginationPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftTransferPaginationPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftTransferPaginationPost) ProtoMessage() {}

func (x *NftTransferPaginationPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftTransferPaginationPost.ProtoReflect.Descriptor instead.
func (*NftTransferPaginationPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{5}
}

func (x *NftTransferPaginationPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NftTransferPaginationPost) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *NftTransferPaginationPost) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *NftTransferPaginationPost) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *NftTransferPaginationPost) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// CheckExchangePost 检查兑换
type CheckCollectExchangePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
}

func (x *CheckCollectExchangePost) Reset() {
	*x = CheckCollectExchangePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCollectExchangePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCollectExchangePost) ProtoMessage() {}

func (x *CheckCollectExchangePost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCollectExchangePost.ProtoReflect.Descriptor instead.
func (*CheckCollectExchangePost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{6}
}

func (x *CheckCollectExchangePost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// CheckBlindExchangePost 检查兑换
type CheckBlindExchangePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
}

func (x *CheckBlindExchangePost) Reset() {
	*x = CheckBlindExchangePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBlindExchangePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlindExchangePost) ProtoMessage() {}

func (x *CheckBlindExchangePost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlindExchangePost.ProtoReflect.Descriptor instead.
func (*CheckBlindExchangePost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{7}
}

func (x *CheckBlindExchangePost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// NftResponse 返回
type NFTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFT   `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTResponse) Reset() {
	*x = NFTResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTResponse) ProtoMessage() {}

func (x *NFTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTResponse.ProtoReflect.Descriptor instead.
func (*NFTResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{8}
}

func (x *NFTResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTResponse) GetData() *NFT {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTPaginationResponse 分页
type NFTPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                      `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTPaginationResponse_NFTs `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTPaginationResponse) Reset() {
	*x = NFTPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTPaginationResponse) ProtoMessage() {}

func (x *NFTPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTPaginationResponse.ProtoReflect.Descriptor instead.
func (*NFTPaginationResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{9}
}

func (x *NFTPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTPaginationResponse) GetData() *NFTPaginationResponse_NFTs {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTCreatorPaginationResponse 铸造日志 分页
type NFTCreatorPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                             `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTCreatorPaginationResponse_NFTs `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTCreatorPaginationResponse) Reset() {
	*x = NFTCreatorPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTCreatorPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTCreatorPaginationResponse) ProtoMessage() {}

func (x *NFTCreatorPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTCreatorPaginationResponse.ProtoReflect.Descriptor instead.
func (*NFTCreatorPaginationResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{10}
}

func (x *NFTCreatorPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTCreatorPaginationResponse) GetData() *NFTCreatorPaginationResponse_NFTs {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTTransferPaginationResponse 交易日志 分页
type NFTTransferPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                              `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTTransferPaginationResponse_NFTs `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTTransferPaginationResponse) Reset() {
	*x = NFTTransferPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTransferPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTransferPaginationResponse) ProtoMessage() {}

func (x *NFTTransferPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTransferPaginationResponse.ProtoReflect.Descriptor instead.
func (*NFTTransferPaginationResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{11}
}

func (x *NFTTransferPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTTransferPaginationResponse) GetData() *NFTTransferPaginationResponse_NFTs {
	if x != nil {
		return x.Data
	}
	return nil
}

type NFTPaginationResponse_NFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*NFT `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *NFTPaginationResponse_NFTs) Reset() {
	*x = NFTPaginationResponse_NFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTPaginationResponse_NFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTPaginationResponse_NFTs) ProtoMessage() {}

func (x *NFTPaginationResponse_NFTs) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTPaginationResponse_NFTs.ProtoReflect.Descriptor instead.
func (*NFTPaginationResponse_NFTs) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{9, 0}
}

func (x *NFTPaginationResponse_NFTs) GetList() []*NFT {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NFTPaginationResponse_NFTs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NFTCreatorPaginationResponse_NFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*NFTCreator `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *NFTCreatorPaginationResponse_NFTs) Reset() {
	*x = NFTCreatorPaginationResponse_NFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTCreatorPaginationResponse_NFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTCreatorPaginationResponse_NFTs) ProtoMessage() {}

func (x *NFTCreatorPaginationResponse_NFTs) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTCreatorPaginationResponse_NFTs.ProtoReflect.Descriptor instead.
func (*NFTCreatorPaginationResponse_NFTs) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{10, 0}
}

func (x *NFTCreatorPaginationResponse_NFTs) GetList() []*NFTCreator {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NFTCreatorPaginationResponse_NFTs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NFTTransferPaginationResponse_NFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*NFTTransfer `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *NFTTransferPaginationResponse_NFTs) Reset() {
	*x = NFTTransferPaginationResponse_NFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTransferPaginationResponse_NFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTransferPaginationResponse_NFTs) ProtoMessage() {}

func (x *NFTTransferPaginationResponse_NFTs) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTransferPaginationResponse_NFTs.ProtoReflect.Descriptor instead.
func (*NFTTransferPaginationResponse_NFTs) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{11, 0}
}

func (x *NFTTransferPaginationResponse_NFTs) GetList() []*NFTTransfer {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NFTTransferPaginationResponse_NFTs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_nft_nft_proto protoreflect.FileDescriptor

var file_nft_nft_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6e, 0x66, 0x74, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x6e, 0x66, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6e, 0x66, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x66, 0x74, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6e, 0x66, 0x74, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x02, 0x0a, 0x03, 0x4e,
	0x46, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x22, 0xad, 0x02, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x4e, 0x66,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7d, 0x0a, 0x18, 0x4e, 0x66, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x4e, 0x66, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x45, 0x0a, 0x0b, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46,
	0x54, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x4e, 0x46, 0x54, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x4e, 0x46, 0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3a, 0x0a, 0x04, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb7, 0x01, 0x0a,
	0x1c, 0x4e, 0x46, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x04, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x4e, 0x46, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x1d, 0x4e, 0x46, 0x54, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x46, 0x54, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x42, 0x0a, 0x04, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x32, 0x9a, 0x24, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x10, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73,
	0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x05, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x17, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x08, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x54, 0x6f, 0x70, 0x12, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x17, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12,
	0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x19, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x57, 0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x78, 0x12, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x12, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x4e,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12, 0x4e,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x4e, 0x66, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x54, 0x78, 0x12, 0x18, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x54, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x4e, 0x66, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2b, 0x0a, 0x03, 0x4e, 0x66, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x4e, 0x46, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0d, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46,
	0x54, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x4e, 0x66, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x15, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x4e, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x4e, 0x46, 0x54, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_nft_nft_proto_rawDescOnce sync.Once
	file_nft_nft_proto_rawDescData = file_nft_nft_proto_rawDesc
)

func file_nft_nft_proto_rawDescGZIP() []byte {
	file_nft_nft_proto_rawDescOnce.Do(func() {
		file_nft_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_nft_proto_rawDescData)
	})
	return file_nft_nft_proto_rawDescData
}

var file_nft_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_nft_nft_proto_goTypes = []interface{}{
	(*NFT)(nil),                                    // 0: nft.NFT
	(*NFTCreator)(nil),                             // 1: nft.NFTCreator
	(*NFTTransfer)(nil),                            // 2: nft.NFTTransfer
	(*NftPaginationPost)(nil),                      // 3: nft.NftPaginationPost
	(*NftCreatorPaginationPost)(nil),               // 4: nft.NftCreatorPaginationPost
	(*NftTransferPaginationPost)(nil),              // 5: nft.NftTransferPaginationPost
	(*CheckCollectExchangePost)(nil),               // 6: nft.CheckCollectExchangePost
	(*CheckBlindExchangePost)(nil),                 // 7: nft.CheckBlindExchangePost
	(*NFTResponse)(nil),                            // 8: nft.NFTResponse
	(*NFTPaginationResponse)(nil),                  // 9: nft.NFTPaginationResponse
	(*NFTCreatorPaginationResponse)(nil),           // 10: nft.NFTCreatorPaginationResponse
	(*NFTTransferPaginationResponse)(nil),          // 11: nft.NFTTransferPaginationResponse
	(*NFTPaginationResponse_NFTs)(nil),             // 12: nft.NFTPaginationResponse.NFTs
	(*NFTCreatorPaginationResponse_NFTs)(nil),      // 13: nft.NFTCreatorPaginationResponse.NFTs
	(*NFTTransferPaginationResponse_NFTs)(nil),     // 14: nft.NFTTransferPaginationResponse.NFTs
	(*SimpleContract)(nil),                         // 15: global.SimpleContract
	(*InfoPost)(nil),                               // 16: global.InfoPost
	(*EmptyPost)(nil),                              // 17: global.EmptyPost
	(*PaginationPost)(nil),                         // 18: global.PaginationPost
	(*CreateAuthorPost)(nil),                       // 19: nft.CreateAuthorPost
	(*UpdateAuthorPost)(nil),                       // 20: nft.UpdateAuthorPost
	(*ChangeStatusPost)(nil),                       // 21: global.ChangeStatusPost
	(*RecommendWorksPost)(nil),                     // 22: nft.RecommendWorksPost
	(*AuthorWorkPaginationPost)(nil),               // 23: nft.AuthorWorkPaginationPost
	(*CreateWorkPost)(nil),                         // 24: nft.CreateWorkPost
	(*UpdateWorkPost)(nil),                         // 25: nft.UpdateWorkPost
	(*BlindBoxTopPost)(nil),                        // 26: nft.BlindBoxTopPost
	(*BlindBoxDetailPost)(nil),                     // 27: nft.BlindBoxDetailPost
	(*CreateBlindBoxPost)(nil),                     // 28: nft.CreateBlindBoxPost
	(*UpdateBlindBoxPost)(nil),                     // 29: nft.UpdateBlindBoxPost
	(*BlindBoxContentInfoPost)(nil),                // 30: nft.BlindBoxContentInfoPost
	(*BlindBoxContentPaginationPost)(nil),          // 31: nft.BlindBoxContentPaginationPost
	(*CreateBlindBoxContentPost)(nil),              // 32: nft.CreateBlindBoxContentPost
	(*UpdateBlindBoxContentPost)(nil),              // 33: nft.UpdateBlindBoxContentPost
	(*BlindBoxWhiteAddressPaginationPost)(nil),     // 34: nft.BlindBoxWhiteAddressPaginationPost
	(*CreateBlindBoxWhiteAddressPost)(nil),         // 35: nft.CreateBlindBoxWhiteAddressPost
	(*RemoveBlindBoxWhiteAddressPost)(nil),         // 36: nft.RemoveBlindBoxWhiteAddressPost
	(*CreateCollectPost)(nil),                      // 37: nft.CreateCollectPost
	(*UpdateCollectPost)(nil),                      // 38: nft.UpdateCollectPost
	(*ModifyCollectPost)(nil),                      // 39: nft.ModifyCollectPost
	(*AddressBlindBoxExchangePost)(nil),            // 40: nft.AddressBlindBoxExchangePost
	(*CreateContractPost)(nil),                     // 41: global.CreateContractPost
	(*UpdateContractPost)(nil),                     // 42: global.UpdateContractPost
	(*CheckBlindBoxTxPost)(nil),                    // 43: nft.CheckBlindBoxTxPost
	(*MemberNftPaginationPost)(nil),                // 44: nft.MemberNftPaginationPost
	(*NftMemberPaginationPost)(nil),                // 45: nft.NftMemberPaginationPost
	(*AuthorResponse)(nil),                         // 46: nft.AuthorResponse
	(*SimpleAuthorResponse)(nil),                   // 47: nft.SimpleAuthorResponse
	(*HotAuthorsResponse)(nil),                     // 48: nft.HotAuthorsResponse
	(*AuthorPaginationResponse)(nil),               // 49: nft.AuthorPaginationResponse
	(*WorkResponse)(nil),                           // 50: nft.WorkResponse
	(*WorksResponse)(nil),                          // 51: nft.WorksResponse
	(*WorkDetailResponse)(nil),                     // 52: nft.WorkDetailResponse
	(*RecommendWorksResponse)(nil),                 // 53: nft.RecommendWorksResponse
	(*AuthorWorkPaginationResponse)(nil),           // 54: nft.AuthorWorkPaginationResponse
	(*WorkPaginationResponse)(nil),                 // 55: nft.WorkPaginationResponse
	(*BlindBoxResponse)(nil),                       // 56: nft.BlindBoxResponse
	(*BlindBoxCountResponse)(nil),                  // 57: nft.BlindBoxCountResponse
	(*BlindBoxTopResponse)(nil),                    // 58: nft.BlindBoxTopResponse
	(*BlindBoxDetailResponse)(nil),                 // 59: nft.BlindBoxDetailResponse
	(*BlindBoxPaginationResponse)(nil),             // 60: nft.BlindBoxPaginationResponse
	(*BlindBoxContentResponse)(nil),                // 61: nft.BlindBoxContentResponse
	(*BlindBoxContentPaginationResponse)(nil),      // 62: nft.BlindBoxContentPaginationResponse
	(*ResultResponse)(nil),                         // 63: global.ResultResponse
	(*BlindBoxWhiteAddressPaginationResponse)(nil), // 64: nft.BlindBoxWhiteAddressPaginationResponse
	(*CollectResponse)(nil),                        // 65: nft.CollectResponse
	(*CollectDetailResponse)(nil),                  // 66: nft.CollectDetailResponse
	(*CollectPaginationResponse)(nil),              // 67: nft.CollectPaginationResponse
	(*SimpleCollectPaginationResponse)(nil),        // 68: nft.SimpleCollectPaginationResponse
	(*BlindBoxExchangeResponse)(nil),               // 69: nft.BlindBoxExchangeResponse
	(*CountBlindBoxExchangeResponse)(nil),          // 70: nft.CountBlindBoxExchangeResponse
	(*CollectExchangeResponse)(nil),                // 71: nft.CollectExchangeResponse
	(*CheckResponse)(nil),                          // 72: global.CheckResponse
	(*ContractResponse)(nil),                       // 73: global.ContractResponse
	(*ContractsResponse)(nil),                      // 74: global.ContractsResponse
	(*ContractAddressResponse)(nil),                // 75: global.ContractAddressResponse
	(*ContractPaginationResponse)(nil),             // 76: global.ContractPaginationResponse
	(*MemberNftPaginationResponse)(nil),            // 77: nft.MemberNftPaginationResponse
	(*NftMemberPaginationResponse)(nil),            // 78: nft.NftMemberPaginationResponse
}
var file_nft_nft_proto_depIdxs = []int32{
	15, // 0: nft.NFT.contract:type_name -> global.SimpleContract
	15, // 1: nft.NFTCreator.contract:type_name -> global.SimpleContract
	15, // 2: nft.NFTTransfer.contract:type_name -> global.SimpleContract
	0,  // 3: nft.NFTResponse.data:type_name -> nft.NFT
	12, // 4: nft.NFTPaginationResponse.data:type_name -> nft.NFTPaginationResponse.NFTs
	13, // 5: nft.NFTCreatorPaginationResponse.data:type_name -> nft.NFTCreatorPaginationResponse.NFTs
	14, // 6: nft.NFTTransferPaginationResponse.data:type_name -> nft.NFTTransferPaginationResponse.NFTs
	0,  // 7: nft.NFTPaginationResponse.NFTs.list:type_name -> nft.NFT
	1,  // 8: nft.NFTCreatorPaginationResponse.NFTs.list:type_name -> nft.NFTCreator
	2,  // 9: nft.NFTTransferPaginationResponse.NFTs.list:type_name -> nft.NFTTransfer
	16, // 10: nft.NFTService.Author:input_type -> global.InfoPost
	16, // 11: nft.NFTService.AuthorDetail:input_type -> global.InfoPost
	17, // 12: nft.NFTService.HotAuthors:input_type -> global.EmptyPost
	17, // 13: nft.NFTService.CacheAllAuthors:input_type -> global.EmptyPost
	18, // 14: nft.NFTService.AuthorPagination:input_type -> global.PaginationPost
	19, // 15: nft.NFTService.CreateAuthor:input_type -> nft.CreateAuthorPost
	20, // 16: nft.NFTService.UpdateAuthor:input_type -> nft.UpdateAuthorPost
	21, // 17: nft.NFTService.ChangeAuthorStatus:input_type -> global.ChangeStatusPost
	16, // 18: nft.NFTService.Work:input_type -> global.InfoPost
	17, // 19: nft.NFTService.Works:input_type -> global.EmptyPost
	16, // 20: nft.NFTService.WorkDetail:input_type -> global.InfoPost
	22, // 21: nft.NFTService.RecommendWorks:input_type -> nft.RecommendWorksPost
	23, // 22: nft.NFTService.AuthorWorkPagination:input_type -> nft.AuthorWorkPaginationPost
	18, // 23: nft.NFTService.WorkPagination:input_type -> global.PaginationPost
	24, // 24: nft.NFTService.CreateWork:input_type -> nft.CreateWorkPost
	25, // 25: nft.NFTService.UpdateWork:input_type -> nft.UpdateWorkPost
	21, // 26: nft.NFTService.ChangeWorkStatus:input_type -> global.ChangeStatusPost
	16, // 27: nft.NFTService.BlindBox:input_type -> global.InfoPost
	16, // 28: nft.NFTService.BlindBoxCount:input_type -> global.InfoPost
	26, // 29: nft.NFTService.BlindBoxTop:input_type -> nft.BlindBoxTopPost
	17, // 30: nft.NFTService.BlindBoxTopCount:input_type -> global.EmptyPost
	27, // 31: nft.NFTService.BlindBoxDetail:input_type -> nft.BlindBoxDetailPost
	18, // 32: nft.NFTService.BlindBoxPagination:input_type -> global.PaginationPost
	28, // 33: nft.NFTService.CreateBlindBox:input_type -> nft.CreateBlindBoxPost
	29, // 34: nft.NFTService.UpdateBlindBox:input_type -> nft.UpdateBlindBoxPost
	21, // 35: nft.NFTService.StartBlindBox:input_type -> global.ChangeStatusPost
	30, // 36: nft.NFTService.BlindBoxContent:input_type -> nft.BlindBoxContentInfoPost
	31, // 37: nft.NFTService.BlindBoxContentPagination:input_type -> nft.BlindBoxContentPaginationPost
	32, // 38: nft.NFTService.CreateBlindBoxContent:input_type -> nft.CreateBlindBoxContentPost
	33, // 39: nft.NFTService.UpdateBlindBoxContent:input_type -> nft.UpdateBlindBoxContentPost
	30, // 40: nft.NFTService.RemoveBlindBoxContent:input_type -> nft.BlindBoxContentInfoPost
	34, // 41: nft.NFTService.BlindBoxWhiteAddressPagination:input_type -> nft.BlindBoxWhiteAddressPaginationPost
	35, // 42: nft.NFTService.CreateBlindBoxWhiteAddress:input_type -> nft.CreateBlindBoxWhiteAddressPost
	36, // 43: nft.NFTService.RemoveBlindBoxWhiteAddress:input_type -> nft.RemoveBlindBoxWhiteAddressPost
	16, // 44: nft.NFTService.Collect:input_type -> global.InfoPost
	16, // 45: nft.NFTService.CollectDetail:input_type -> global.InfoPost
	18, // 46: nft.NFTService.CollectPagination:input_type -> global.PaginationPost
	18, // 47: nft.NFTService.SimpleCollectPagination:input_type -> global.PaginationPost
	37, // 48: nft.NFTService.CreateCollect:input_type -> nft.CreateCollectPost
	38, // 49: nft.NFTService.UpdateCollect:input_type -> nft.UpdateCollectPost
	39, // 50: nft.NFTService.ModifyCollect:input_type -> nft.ModifyCollectPost
	21, // 51: nft.NFTService.ChangeCollectStatus:input_type -> global.ChangeStatusPost
	16, // 52: nft.NFTService.BlindBoxExchange:input_type -> global.InfoPost
	17, // 53: nft.NFTService.MemberBlindBoxExchange:input_type -> global.EmptyPost
	40, // 54: nft.NFTService.AddressBlindBoxExchange:input_type -> nft.AddressBlindBoxExchangePost
	16, // 55: nft.NFTService.GenCollectSnapshot:input_type -> global.InfoPost
	16, // 56: nft.NFTService.CollectExchange:input_type -> global.InfoPost
	6,  // 57: nft.NFTService.CheckCollectExchangeTx:input_type -> nft.CheckCollectExchangePost
	7,  // 58: nft.NFTService.CheckBlindBoxExchangeTx:input_type -> nft.CheckBlindExchangePost
	16, // 59: nft.NFTService.NftContract:input_type -> global.InfoPost
	17, // 60: nft.NFTService.NftContracts:input_type -> global.EmptyPost
	17, // 61: nft.NFTService.NftContractAddress:input_type -> global.EmptyPost
	18, // 62: nft.NFTService.NftContractPagination:input_type -> global.PaginationPost
	41, // 63: nft.NFTService.CreateNftContract:input_type -> global.CreateContractPost
	42, // 64: nft.NFTService.UpdateNftContract:input_type -> global.UpdateContractPost
	21, // 65: nft.NFTService.ChangeNftContractStatus:input_type -> global.ChangeStatusPost
	43, // 66: nft.NFTService.CheckBlindBoxTx:input_type -> nft.CheckBlindBoxTxPost
	44, // 67: nft.NFTService.MemberNftPagination:input_type -> nft.MemberNftPaginationPost
	45, // 68: nft.NFTService.NftMemberPagination:input_type -> nft.NftMemberPaginationPost
	16, // 69: nft.NFTService.Nft:input_type -> global.InfoPost
	3,  // 70: nft.NFTService.NftPagination:input_type -> nft.NftPaginationPost
	4,  // 71: nft.NFTService.NftCreatorPagination:input_type -> nft.NftCreatorPaginationPost
	5,  // 72: nft.NFTService.NftTransferPagination:input_type -> nft.NftTransferPaginationPost
	46, // 73: nft.NFTService.Author:output_type -> nft.AuthorResponse
	47, // 74: nft.NFTService.AuthorDetail:output_type -> nft.SimpleAuthorResponse
	48, // 75: nft.NFTService.HotAuthors:output_type -> nft.HotAuthorsResponse
	48, // 76: nft.NFTService.CacheAllAuthors:output_type -> nft.HotAuthorsResponse
	49, // 77: nft.NFTService.AuthorPagination:output_type -> nft.AuthorPaginationResponse
	46, // 78: nft.NFTService.CreateAuthor:output_type -> nft.AuthorResponse
	46, // 79: nft.NFTService.UpdateAuthor:output_type -> nft.AuthorResponse
	46, // 80: nft.NFTService.ChangeAuthorStatus:output_type -> nft.AuthorResponse
	50, // 81: nft.NFTService.Work:output_type -> nft.WorkResponse
	51, // 82: nft.NFTService.Works:output_type -> nft.WorksResponse
	52, // 83: nft.NFTService.WorkDetail:output_type -> nft.WorkDetailResponse
	53, // 84: nft.NFTService.RecommendWorks:output_type -> nft.RecommendWorksResponse
	54, // 85: nft.NFTService.AuthorWorkPagination:output_type -> nft.AuthorWorkPaginationResponse
	55, // 86: nft.NFTService.WorkPagination:output_type -> nft.WorkPaginationResponse
	50, // 87: nft.NFTService.CreateWork:output_type -> nft.WorkResponse
	50, // 88: nft.NFTService.UpdateWork:output_type -> nft.WorkResponse
	50, // 89: nft.NFTService.ChangeWorkStatus:output_type -> nft.WorkResponse
	56, // 90: nft.NFTService.BlindBox:output_type -> nft.BlindBoxResponse
	57, // 91: nft.NFTService.BlindBoxCount:output_type -> nft.BlindBoxCountResponse
	58, // 92: nft.NFTService.BlindBoxTop:output_type -> nft.BlindBoxTopResponse
	57, // 93: nft.NFTService.BlindBoxTopCount:output_type -> nft.BlindBoxCountResponse
	59, // 94: nft.NFTService.BlindBoxDetail:output_type -> nft.BlindBoxDetailResponse
	60, // 95: nft.NFTService.BlindBoxPagination:output_type -> nft.BlindBoxPaginationResponse
	56, // 96: nft.NFTService.CreateBlindBox:output_type -> nft.BlindBoxResponse
	56, // 97: nft.NFTService.UpdateBlindBox:output_type -> nft.BlindBoxResponse
	56, // 98: nft.NFTService.StartBlindBox:output_type -> nft.BlindBoxResponse
	61, // 99: nft.NFTService.BlindBoxContent:output_type -> nft.BlindBoxContentResponse
	62, // 100: nft.NFTService.BlindBoxContentPagination:output_type -> nft.BlindBoxContentPaginationResponse
	63, // 101: nft.NFTService.CreateBlindBoxContent:output_type -> global.ResultResponse
	63, // 102: nft.NFTService.UpdateBlindBoxContent:output_type -> global.ResultResponse
	63, // 103: nft.NFTService.RemoveBlindBoxContent:output_type -> global.ResultResponse
	64, // 104: nft.NFTService.BlindBoxWhiteAddressPagination:output_type -> nft.BlindBoxWhiteAddressPaginationResponse
	63, // 105: nft.NFTService.CreateBlindBoxWhiteAddress:output_type -> global.ResultResponse
	63, // 106: nft.NFTService.RemoveBlindBoxWhiteAddress:output_type -> global.ResultResponse
	65, // 107: nft.NFTService.Collect:output_type -> nft.CollectResponse
	66, // 108: nft.NFTService.CollectDetail:output_type -> nft.CollectDetailResponse
	67, // 109: nft.NFTService.CollectPagination:output_type -> nft.CollectPaginationResponse
	68, // 110: nft.NFTService.SimpleCollectPagination:output_type -> nft.SimpleCollectPaginationResponse
	65, // 111: nft.NFTService.CreateCollect:output_type -> nft.CollectResponse
	65, // 112: nft.NFTService.UpdateCollect:output_type -> nft.CollectResponse
	63, // 113: nft.NFTService.ModifyCollect:output_type -> global.ResultResponse
	65, // 114: nft.NFTService.ChangeCollectStatus:output_type -> nft.CollectResponse
	69, // 115: nft.NFTService.BlindBoxExchange:output_type -> nft.BlindBoxExchangeResponse
	70, // 116: nft.NFTService.MemberBlindBoxExchange:output_type -> nft.CountBlindBoxExchangeResponse
	70, // 117: nft.NFTService.AddressBlindBoxExchange:output_type -> nft.CountBlindBoxExchangeResponse
	63, // 118: nft.NFTService.GenCollectSnapshot:output_type -> global.ResultResponse
	71, // 119: nft.NFTService.CollectExchange:output_type -> nft.CollectExchangeResponse
	72, // 120: nft.NFTService.CheckCollectExchangeTx:output_type -> global.CheckResponse
	72, // 121: nft.NFTService.CheckBlindBoxExchangeTx:output_type -> global.CheckResponse
	73, // 122: nft.NFTService.NftContract:output_type -> global.ContractResponse
	74, // 123: nft.NFTService.NftContracts:output_type -> global.ContractsResponse
	75, // 124: nft.NFTService.NftContractAddress:output_type -> global.ContractAddressResponse
	76, // 125: nft.NFTService.NftContractPagination:output_type -> global.ContractPaginationResponse
	73, // 126: nft.NFTService.CreateNftContract:output_type -> global.ContractResponse
	73, // 127: nft.NFTService.UpdateNftContract:output_type -> global.ContractResponse
	73, // 128: nft.NFTService.ChangeNftContractStatus:output_type -> global.ContractResponse
	72, // 129: nft.NFTService.CheckBlindBoxTx:output_type -> global.CheckResponse
	77, // 130: nft.NFTService.MemberNftPagination:output_type -> nft.MemberNftPaginationResponse
	78, // 131: nft.NFTService.NftMemberPagination:output_type -> nft.NftMemberPaginationResponse
	8,  // 132: nft.NFTService.Nft:output_type -> nft.NFTResponse
	9,  // 133: nft.NFTService.NftPagination:output_type -> nft.NFTPaginationResponse
	10, // 134: nft.NFTService.NftCreatorPagination:output_type -> nft.NFTCreatorPaginationResponse
	11, // 135: nft.NFTService.NftTransferPagination:output_type -> nft.NFTTransferPaginationResponse
	73, // [73:136] is the sub-list for method output_type
	10, // [10:73] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_nft_nft_proto_init() }
func file_nft_nft_proto_init() {
	if File_nft_nft_proto != nil {
		return
	}
	file_global_global_proto_init()
	file_global_contract_proto_init()
	file_nft_author_proto_init()
	file_nft_work_proto_init()
	file_nft_blind_box_proto_init()
	file_nft_blind_box_content_proto_init()
	file_nft_blind_box_white_address_proto_init()
	file_nft_collect_proto_init()
	file_nft_collect_exchange_proto_init()
	file_nft_blind_box_exchange_proto_init()
	file_nft_member_nft_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nft_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTCreator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftPaginationPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftCreatorPaginationPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftTransferPaginationPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCollectExchangePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBlindExchangePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTCreatorPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTransferPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTPaginationResponse_NFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTCreatorPaginationResponse_NFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTransferPaginationResponse_NFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_nft_proto_goTypes,
		DependencyIndexes: file_nft_nft_proto_depIdxs,
		MessageInfos:      file_nft_nft_proto_msgTypes,
	}.Build()
	File_nft_nft_proto = out.File
	file_nft_nft_proto_rawDesc = nil
	file_nft_nft_proto_goTypes = nil
	file_nft_nft_proto_depIdxs = nil
}
