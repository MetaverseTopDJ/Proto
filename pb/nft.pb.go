// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: nft/nft.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CheckExchangePost 检查兑换
type CheckCollectExchangePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
}

func (x *CheckCollectExchangePost) Reset() {
	*x = CheckCollectExchangePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCollectExchangePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCollectExchangePost) ProtoMessage() {}

func (x *CheckCollectExchangePost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCollectExchangePost.ProtoReflect.Descriptor instead.
func (*CheckCollectExchangePost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{0}
}

func (x *CheckCollectExchangePost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// CheckBlindExchangePost 检查兑换
type CheckBlindExchangePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
}

func (x *CheckBlindExchangePost) Reset() {
	*x = CheckBlindExchangePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBlindExchangePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBlindExchangePost) ProtoMessage() {}

func (x *CheckBlindExchangePost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBlindExchangePost.ProtoReflect.Descriptor instead.
func (*CheckBlindExchangePost) Descriptor() ([]byte, []int) {
	return file_nft_nft_proto_rawDescGZIP(), []int{1}
}

func (x *CheckBlindExchangePost) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_nft_nft_proto protoreflect.FileDescriptor

var file_nft_nft_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6e, 0x66, 0x74, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x6e, 0x66, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6e, 0x66, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x62,
	0x6f, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x6e, 0x66, 0x74, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x66,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0xea, 0x1e, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x10,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x48, 0x6f, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x15,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x13, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x12, 0x13, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x08, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x10, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x17, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42,
	0x6f, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x12, 0x17, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x19, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x17, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x6e, 0x66,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x78, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x12, 0x1d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x12, 0x1b, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c,
	0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x12,
	0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x4e, 0x66, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x78, 0x54, 0x78, 0x12, 0x18, 0x2e,
	0x6e, 0x66, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x42, 0x6f,
	0x78, 0x54, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x66, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x4e, 0x66, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_nft_proto_rawDescOnce sync.Once
	file_nft_nft_proto_rawDescData = file_nft_nft_proto_rawDesc
)

func file_nft_nft_proto_rawDescGZIP() []byte {
	file_nft_nft_proto_rawDescOnce.Do(func() {
		file_nft_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_nft_proto_rawDescData)
	})
	return file_nft_nft_proto_rawDescData
}

var file_nft_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nft_nft_proto_goTypes = []interface{}{
	(*CheckCollectExchangePost)(nil),          // 0: nft.CheckCollectExchangePost
	(*CheckBlindExchangePost)(nil),            // 1: nft.CheckBlindExchangePost
	(*InfoPost)(nil),                          // 2: global.InfoPost
	(*EmptyPost)(nil),                         // 3: global.EmptyPost
	(*PaginationPost)(nil),                    // 4: global.PaginationPost
	(*CreateAuthorPost)(nil),                  // 5: nft.CreateAuthorPost
	(*UpdateAuthorPost)(nil),                  // 6: nft.UpdateAuthorPost
	(*ChangeStatusPost)(nil),                  // 7: global.ChangeStatusPost
	(*RecommendWorksPost)(nil),                // 8: nft.RecommendWorksPost
	(*AuthorWorkPaginationPost)(nil),          // 9: nft.AuthorWorkPaginationPost
	(*CreateWorkPost)(nil),                    // 10: nft.CreateWorkPost
	(*UpdateWorkPost)(nil),                    // 11: nft.UpdateWorkPost
	(*CreateBlindBoxPost)(nil),                // 12: nft.CreateBlindBoxPost
	(*UpdateBlindBoxPost)(nil),                // 13: nft.UpdateBlindBoxPost
	(*BlindBoxContentInfoPost)(nil),           // 14: nft.BlindBoxContentInfoPost
	(*BlindBoxContentPaginationPost)(nil),     // 15: nft.BlindBoxContentPaginationPost
	(*CreateBlindBoxContentPost)(nil),         // 16: nft.CreateBlindBoxContentPost
	(*UpdateBlindBoxContentPost)(nil),         // 17: nft.UpdateBlindBoxContentPost
	(*CreateCollectPost)(nil),                 // 18: nft.CreateCollectPost
	(*UpdateCollectPost)(nil),                 // 19: nft.UpdateCollectPost
	(*ModifyCollectPost)(nil),                 // 20: nft.ModifyCollectPost
	(*AddressBlindBoxExchangePost)(nil),       // 21: nft.AddressBlindBoxExchangePost
	(*CreateContractPost)(nil),                // 22: global.CreateContractPost
	(*UpdateContractPost)(nil),                // 23: global.UpdateContractPost
	(*CheckBlindBoxTxPost)(nil),               // 24: nft.CheckBlindBoxTxPost
	(*MemberNftPaginationPost)(nil),           // 25: nft.MemberNftPaginationPost
	(*NftMemberPaginationPost)(nil),           // 26: nft.NftMemberPaginationPost
	(*AuthorResponse)(nil),                    // 27: nft.AuthorResponse
	(*SimpleAuthorResponse)(nil),              // 28: nft.SimpleAuthorResponse
	(*HotAuthorsResponse)(nil),                // 29: nft.HotAuthorsResponse
	(*AuthorPaginationResponse)(nil),          // 30: nft.AuthorPaginationResponse
	(*WorkResponse)(nil),                      // 31: nft.WorkResponse
	(*WorksResponse)(nil),                     // 32: nft.WorksResponse
	(*WorkDetailResponse)(nil),                // 33: nft.WorkDetailResponse
	(*RecommendWorksResponse)(nil),            // 34: nft.RecommendWorksResponse
	(*AuthorWorkPaginationResponse)(nil),      // 35: nft.AuthorWorkPaginationResponse
	(*WorkPaginationResponse)(nil),            // 36: nft.WorkPaginationResponse
	(*BlindBoxResponse)(nil),                  // 37: nft.BlindBoxResponse
	(*BlindBoxCountResponse)(nil),             // 38: nft.BlindBoxCountResponse
	(*BlindBoxTopResponse)(nil),               // 39: nft.BlindBoxTopResponse
	(*BlindBoxPaginationResponse)(nil),        // 40: nft.BlindBoxPaginationResponse
	(*BlindBoxContentResponse)(nil),           // 41: nft.BlindBoxContentResponse
	(*BlindBoxContentPaginationResponse)(nil), // 42: nft.BlindBoxContentPaginationResponse
	(*ResultResponse)(nil),                    // 43: global.ResultResponse
	(*CollectResponse)(nil),                   // 44: nft.CollectResponse
	(*CollectDetailResponse)(nil),             // 45: nft.CollectDetailResponse
	(*CollectPaginationResponse)(nil),         // 46: nft.CollectPaginationResponse
	(*SimpleCollectPaginationResponse)(nil),   // 47: nft.SimpleCollectPaginationResponse
	(*BlindBoxExchangeResponse)(nil),          // 48: nft.BlindBoxExchangeResponse
	(*CountBlindBoxExchangeResponse)(nil),     // 49: nft.CountBlindBoxExchangeResponse
	(*CollectExchangeResponse)(nil),           // 50: nft.CollectExchangeResponse
	(*CheckResponse)(nil),                     // 51: global.CheckResponse
	(*ContractResponse)(nil),                  // 52: global.ContractResponse
	(*ContractsResponse)(nil),                 // 53: global.ContractsResponse
	(*ContractAddressResponse)(nil),           // 54: global.ContractAddressResponse
	(*ContractPaginationResponse)(nil),        // 55: global.ContractPaginationResponse
	(*MemberNftPaginationResponse)(nil),       // 56: nft.MemberNftPaginationResponse
	(*NftMemberPaginationResponse)(nil),       // 57: nft.NftMemberPaginationResponse
}
var file_nft_nft_proto_depIdxs = []int32{
	2,  // 0: nft.NFTService.Author:input_type -> global.InfoPost
	2,  // 1: nft.NFTService.AuthorDetail:input_type -> global.InfoPost
	3,  // 2: nft.NFTService.HotAuthors:input_type -> global.EmptyPost
	3,  // 3: nft.NFTService.CacheAllAuthors:input_type -> global.EmptyPost
	4,  // 4: nft.NFTService.AuthorPagination:input_type -> global.PaginationPost
	5,  // 5: nft.NFTService.CreateAuthor:input_type -> nft.CreateAuthorPost
	6,  // 6: nft.NFTService.UpdateAuthor:input_type -> nft.UpdateAuthorPost
	7,  // 7: nft.NFTService.ChangeAuthorStatus:input_type -> global.ChangeStatusPost
	2,  // 8: nft.NFTService.Work:input_type -> global.InfoPost
	3,  // 9: nft.NFTService.Works:input_type -> global.EmptyPost
	2,  // 10: nft.NFTService.WorkDetail:input_type -> global.InfoPost
	8,  // 11: nft.NFTService.RecommendWorks:input_type -> nft.RecommendWorksPost
	9,  // 12: nft.NFTService.AuthorWorkPagination:input_type -> nft.AuthorWorkPaginationPost
	4,  // 13: nft.NFTService.WorkPagination:input_type -> global.PaginationPost
	10, // 14: nft.NFTService.CreateWork:input_type -> nft.CreateWorkPost
	11, // 15: nft.NFTService.UpdateWork:input_type -> nft.UpdateWorkPost
	7,  // 16: nft.NFTService.ChangeWorkStatus:input_type -> global.ChangeStatusPost
	2,  // 17: nft.NFTService.BlindBox:input_type -> global.InfoPost
	2,  // 18: nft.NFTService.BlindBoxCount:input_type -> global.InfoPost
	3,  // 19: nft.NFTService.BlindBoxTop:input_type -> global.EmptyPost
	3,  // 20: nft.NFTService.BlindBoxTopCount:input_type -> global.EmptyPost
	4,  // 21: nft.NFTService.BlindBoxPagination:input_type -> global.PaginationPost
	12, // 22: nft.NFTService.CreateBlindBox:input_type -> nft.CreateBlindBoxPost
	13, // 23: nft.NFTService.UpdateBlindBox:input_type -> nft.UpdateBlindBoxPost
	7,  // 24: nft.NFTService.StartBlindBox:input_type -> global.ChangeStatusPost
	14, // 25: nft.NFTService.BlindBoxContent:input_type -> nft.BlindBoxContentInfoPost
	15, // 26: nft.NFTService.BlindBoxContentPagination:input_type -> nft.BlindBoxContentPaginationPost
	16, // 27: nft.NFTService.CreateBlindBoxContent:input_type -> nft.CreateBlindBoxContentPost
	17, // 28: nft.NFTService.UpdateBlindBoxContent:input_type -> nft.UpdateBlindBoxContentPost
	14, // 29: nft.NFTService.RemoveBlindBoxContent:input_type -> nft.BlindBoxContentInfoPost
	2,  // 30: nft.NFTService.Collect:input_type -> global.InfoPost
	2,  // 31: nft.NFTService.CollectDetail:input_type -> global.InfoPost
	4,  // 32: nft.NFTService.CollectPagination:input_type -> global.PaginationPost
	4,  // 33: nft.NFTService.SimpleCollectPagination:input_type -> global.PaginationPost
	18, // 34: nft.NFTService.CreateCollect:input_type -> nft.CreateCollectPost
	19, // 35: nft.NFTService.UpdateCollect:input_type -> nft.UpdateCollectPost
	20, // 36: nft.NFTService.ModifyCollect:input_type -> nft.ModifyCollectPost
	7,  // 37: nft.NFTService.ChangeCollectStatus:input_type -> global.ChangeStatusPost
	2,  // 38: nft.NFTService.BlindBoxExchange:input_type -> global.InfoPost
	3,  // 39: nft.NFTService.MemberBlindBoxExchange:input_type -> global.EmptyPost
	21, // 40: nft.NFTService.AddressBlindBoxExchange:input_type -> nft.AddressBlindBoxExchangePost
	2,  // 41: nft.NFTService.GenCollectSnapshot:input_type -> global.InfoPost
	2,  // 42: nft.NFTService.CollectExchange:input_type -> global.InfoPost
	0,  // 43: nft.NFTService.CheckCollectExchangeTx:input_type -> nft.CheckCollectExchangePost
	1,  // 44: nft.NFTService.CheckBlindBoxExchangeTx:input_type -> nft.CheckBlindExchangePost
	2,  // 45: nft.NFTService.NftContract:input_type -> global.InfoPost
	3,  // 46: nft.NFTService.NftContracts:input_type -> global.EmptyPost
	3,  // 47: nft.NFTService.NftContractAddress:input_type -> global.EmptyPost
	4,  // 48: nft.NFTService.NftContractPagination:input_type -> global.PaginationPost
	22, // 49: nft.NFTService.CreateNftContract:input_type -> global.CreateContractPost
	23, // 50: nft.NFTService.UpdateNftContract:input_type -> global.UpdateContractPost
	7,  // 51: nft.NFTService.ChangeNftContractStatus:input_type -> global.ChangeStatusPost
	24, // 52: nft.NFTService.CheckBlindBoxTx:input_type -> nft.CheckBlindBoxTxPost
	25, // 53: nft.NFTService.MemberNftPagination:input_type -> nft.MemberNftPaginationPost
	26, // 54: nft.NFTService.NftMemberPagination:input_type -> nft.NftMemberPaginationPost
	27, // 55: nft.NFTService.Author:output_type -> nft.AuthorResponse
	28, // 56: nft.NFTService.AuthorDetail:output_type -> nft.SimpleAuthorResponse
	29, // 57: nft.NFTService.HotAuthors:output_type -> nft.HotAuthorsResponse
	29, // 58: nft.NFTService.CacheAllAuthors:output_type -> nft.HotAuthorsResponse
	30, // 59: nft.NFTService.AuthorPagination:output_type -> nft.AuthorPaginationResponse
	27, // 60: nft.NFTService.CreateAuthor:output_type -> nft.AuthorResponse
	27, // 61: nft.NFTService.UpdateAuthor:output_type -> nft.AuthorResponse
	27, // 62: nft.NFTService.ChangeAuthorStatus:output_type -> nft.AuthorResponse
	31, // 63: nft.NFTService.Work:output_type -> nft.WorkResponse
	32, // 64: nft.NFTService.Works:output_type -> nft.WorksResponse
	33, // 65: nft.NFTService.WorkDetail:output_type -> nft.WorkDetailResponse
	34, // 66: nft.NFTService.RecommendWorks:output_type -> nft.RecommendWorksResponse
	35, // 67: nft.NFTService.AuthorWorkPagination:output_type -> nft.AuthorWorkPaginationResponse
	36, // 68: nft.NFTService.WorkPagination:output_type -> nft.WorkPaginationResponse
	31, // 69: nft.NFTService.CreateWork:output_type -> nft.WorkResponse
	31, // 70: nft.NFTService.UpdateWork:output_type -> nft.WorkResponse
	31, // 71: nft.NFTService.ChangeWorkStatus:output_type -> nft.WorkResponse
	37, // 72: nft.NFTService.BlindBox:output_type -> nft.BlindBoxResponse
	38, // 73: nft.NFTService.BlindBoxCount:output_type -> nft.BlindBoxCountResponse
	39, // 74: nft.NFTService.BlindBoxTop:output_type -> nft.BlindBoxTopResponse
	38, // 75: nft.NFTService.BlindBoxTopCount:output_type -> nft.BlindBoxCountResponse
	40, // 76: nft.NFTService.BlindBoxPagination:output_type -> nft.BlindBoxPaginationResponse
	37, // 77: nft.NFTService.CreateBlindBox:output_type -> nft.BlindBoxResponse
	37, // 78: nft.NFTService.UpdateBlindBox:output_type -> nft.BlindBoxResponse
	37, // 79: nft.NFTService.StartBlindBox:output_type -> nft.BlindBoxResponse
	41, // 80: nft.NFTService.BlindBoxContent:output_type -> nft.BlindBoxContentResponse
	42, // 81: nft.NFTService.BlindBoxContentPagination:output_type -> nft.BlindBoxContentPaginationResponse
	43, // 82: nft.NFTService.CreateBlindBoxContent:output_type -> global.ResultResponse
	43, // 83: nft.NFTService.UpdateBlindBoxContent:output_type -> global.ResultResponse
	43, // 84: nft.NFTService.RemoveBlindBoxContent:output_type -> global.ResultResponse
	44, // 85: nft.NFTService.Collect:output_type -> nft.CollectResponse
	45, // 86: nft.NFTService.CollectDetail:output_type -> nft.CollectDetailResponse
	46, // 87: nft.NFTService.CollectPagination:output_type -> nft.CollectPaginationResponse
	47, // 88: nft.NFTService.SimpleCollectPagination:output_type -> nft.SimpleCollectPaginationResponse
	44, // 89: nft.NFTService.CreateCollect:output_type -> nft.CollectResponse
	44, // 90: nft.NFTService.UpdateCollect:output_type -> nft.CollectResponse
	43, // 91: nft.NFTService.ModifyCollect:output_type -> global.ResultResponse
	44, // 92: nft.NFTService.ChangeCollectStatus:output_type -> nft.CollectResponse
	48, // 93: nft.NFTService.BlindBoxExchange:output_type -> nft.BlindBoxExchangeResponse
	49, // 94: nft.NFTService.MemberBlindBoxExchange:output_type -> nft.CountBlindBoxExchangeResponse
	49, // 95: nft.NFTService.AddressBlindBoxExchange:output_type -> nft.CountBlindBoxExchangeResponse
	43, // 96: nft.NFTService.GenCollectSnapshot:output_type -> global.ResultResponse
	50, // 97: nft.NFTService.CollectExchange:output_type -> nft.CollectExchangeResponse
	51, // 98: nft.NFTService.CheckCollectExchangeTx:output_type -> global.CheckResponse
	51, // 99: nft.NFTService.CheckBlindBoxExchangeTx:output_type -> global.CheckResponse
	52, // 100: nft.NFTService.NftContract:output_type -> global.ContractResponse
	53, // 101: nft.NFTService.NftContracts:output_type -> global.ContractsResponse
	54, // 102: nft.NFTService.NftContractAddress:output_type -> global.ContractAddressResponse
	55, // 103: nft.NFTService.NftContractPagination:output_type -> global.ContractPaginationResponse
	52, // 104: nft.NFTService.CreateNftContract:output_type -> global.ContractResponse
	52, // 105: nft.NFTService.UpdateNftContract:output_type -> global.ContractResponse
	52, // 106: nft.NFTService.ChangeNftContractStatus:output_type -> global.ContractResponse
	51, // 107: nft.NFTService.CheckBlindBoxTx:output_type -> global.CheckResponse
	56, // 108: nft.NFTService.MemberNftPagination:output_type -> nft.MemberNftPaginationResponse
	57, // 109: nft.NFTService.NftMemberPagination:output_type -> nft.NftMemberPaginationResponse
	55, // [55:110] is the sub-list for method output_type
	0,  // [0:55] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_nft_nft_proto_init() }
func file_nft_nft_proto_init() {
	if File_nft_nft_proto != nil {
		return
	}
	file_global_global_proto_init()
	file_global_contract_proto_init()
	file_nft_author_proto_init()
	file_nft_work_proto_init()
	file_nft_blind_box_proto_init()
	file_nft_blind_box_content_proto_init()
	file_nft_collect_proto_init()
	file_nft_collect_exchange_proto_init()
	file_nft_blind_box_exchange_proto_init()
	file_nft_member_nft_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nft_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCollectExchangePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBlindExchangePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nft_nft_proto_goTypes,
		DependencyIndexes: file_nft_nft_proto_depIdxs,
		MessageInfos:      file_nft_nft_proto_msgTypes,
	}.Build()
	File_nft_nft_proto = out.File
	file_nft_nft_proto_rawDesc = nil
	file_nft_nft_proto_goTypes = nil
	file_nft_nft_proto_depIdxs = nil
}
