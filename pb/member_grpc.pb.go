// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	// 头像
	Avatar(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	Avatars(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*AvatarsResponse, error)
	AvatarPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AvatarPaginationResponse, error)
	CreateAvatar(ctx context.Context, in *CreateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	UpdateAvatar(ctx context.Context, in *UpdateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	ChangeAvatarStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	// 会员卡
	Card(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CardResponse, error)
	// 会员卡 活动（Console）
	MemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberActivityResponse, error)
	MemberActivityPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberActivityPaginationResponse, error)
	CreateMemberActivity(ctx context.Context, in *CreateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error)
	UpdateMemberActivity(ctx context.Context, in *UpdateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error)
	RefreshMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error)
	// 活动白名单
	MemberPreSaleWhiteAddressList(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressListResponse, error)
	CreateMemberPreSaleWhiteAddress(ctx context.Context, in *CreateMemberPreSaleWhiteAddressPost, opts ...grpc.CallOption) (*MessageResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Avatar(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Avatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Avatars(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*AvatarsResponse, error) {
	out := new(AvatarsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Avatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AvatarPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AvatarPaginationResponse, error) {
	out := new(AvatarPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/AvatarPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateAvatar(ctx context.Context, in *CreateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeAvatarStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/ChangeAvatarStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Card(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Card", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberActivityResponse, error) {
	out := new(MemberActivityResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberActivityPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberActivityPaginationResponse, error) {
	out := new(MemberActivityPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberActivityPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateMemberActivity(ctx context.Context, in *CreateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error) {
	out := new(MemberActivityResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberActivity(ctx context.Context, in *UpdateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error) {
	out := new(MemberActivityResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RefreshMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/RefreshMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/DeleteMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberPreSaleWhiteAddressList(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressListResponse, error) {
	out := new(MemberPreSaleWhiteAddressListResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberPreSaleWhiteAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateMemberPreSaleWhiteAddress(ctx context.Context, in *CreateMemberPreSaleWhiteAddressPost, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateMemberPreSaleWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	// 头像
	Avatar(context.Context, *InfoPost) (*AvatarResponse, error)
	Avatars(context.Context, *EmptyPost) (*AvatarsResponse, error)
	AvatarPagination(context.Context, *PaginationPost) (*AvatarPaginationResponse, error)
	CreateAvatar(context.Context, *CreateAvatarPost) (*AvatarResponse, error)
	UpdateAvatar(context.Context, *UpdateAvatarPost) (*AvatarResponse, error)
	ChangeAvatarStatus(context.Context, *ChangeStatusPost) (*AvatarResponse, error)
	// 会员卡
	Card(context.Context, *InfoPost) (*CardResponse, error)
	// 会员卡 活动（Console）
	MemberActivity(context.Context, *InfoPost) (*MemberActivityResponse, error)
	MemberActivityPagination(context.Context, *PaginationPost) (*MemberActivityPaginationResponse, error)
	CreateMemberActivity(context.Context, *CreateMemberActivityPost) (*MemberActivityResponse, error)
	UpdateMemberActivity(context.Context, *UpdateMemberActivityPost) (*MemberActivityResponse, error)
	RefreshMemberActivity(context.Context, *InfoPost) (*MessageResponse, error)
	DeleteMemberActivity(context.Context, *InfoPost) (*MessageResponse, error)
	// 活动白名单
	MemberPreSaleWhiteAddressList(context.Context, *InfoPost) (*MemberPreSaleWhiteAddressListResponse, error)
	CreateMemberPreSaleWhiteAddress(context.Context, *CreateMemberPreSaleWhiteAddressPost) (*MessageResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) Avatar(context.Context, *InfoPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Avatar not implemented")
}
func (UnimplementedMemberServiceServer) Avatars(context.Context, *EmptyPost) (*AvatarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Avatars not implemented")
}
func (UnimplementedMemberServiceServer) AvatarPagination(context.Context, *PaginationPost) (*AvatarPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvatarPagination not implemented")
}
func (UnimplementedMemberServiceServer) CreateAvatar(context.Context, *CreateAvatarPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedMemberServiceServer) UpdateAvatar(context.Context, *UpdateAvatarPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedMemberServiceServer) ChangeAvatarStatus(context.Context, *ChangeStatusPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatarStatus not implemented")
}
func (UnimplementedMemberServiceServer) Card(context.Context, *InfoPost) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Card not implemented")
}
func (UnimplementedMemberServiceServer) MemberActivity(context.Context, *InfoPost) (*MemberActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) MemberActivityPagination(context.Context, *PaginationPost) (*MemberActivityPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivityPagination not implemented")
}
func (UnimplementedMemberServiceServer) CreateMemberActivity(context.Context, *CreateMemberActivityPost) (*MemberActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberActivity(context.Context, *UpdateMemberActivityPost) (*MemberActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) RefreshMemberActivity(context.Context, *InfoPost) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMemberActivity(context.Context, *InfoPost) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) MemberPreSaleWhiteAddressList(context.Context, *InfoPost) (*MemberPreSaleWhiteAddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPreSaleWhiteAddressList not implemented")
}
func (UnimplementedMemberServiceServer) CreateMemberPreSaleWhiteAddress(context.Context, *CreateMemberPreSaleWhiteAddressPost) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberPreSaleWhiteAddress not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_Avatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Avatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Avatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Avatar(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Avatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Avatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Avatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Avatars(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AvatarPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AvatarPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/AvatarPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AvatarPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvatarPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateAvatar(ctx, req.(*CreateAvatarPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvatarPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateAvatar(ctx, req.(*UpdateAvatarPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeAvatarStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeAvatarStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/ChangeAvatarStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeAvatarStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Card_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Card(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Card",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Card(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberActivity(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberActivityPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberActivityPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberActivityPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberActivityPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberActivityPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMemberActivity(ctx, req.(*CreateMemberActivityPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberActivityPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberActivity(ctx, req.(*UpdateMemberActivityPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RefreshMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RefreshMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/RefreshMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RefreshMemberActivity(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/DeleteMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMemberActivity(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberPreSaleWhiteAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberPreSaleWhiteAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddressList(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateMemberPreSaleWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberPreSaleWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMemberPreSaleWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateMemberPreSaleWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMemberPreSaleWhiteAddress(ctx, req.(*CreateMemberPreSaleWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "member.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Avatar",
			Handler:    _MemberService_Avatar_Handler,
		},
		{
			MethodName: "Avatars",
			Handler:    _MemberService_Avatars_Handler,
		},
		{
			MethodName: "AvatarPagination",
			Handler:    _MemberService_AvatarPagination_Handler,
		},
		{
			MethodName: "CreateAvatar",
			Handler:    _MemberService_CreateAvatar_Handler,
		},
		{
			MethodName: "UpdateAvatar",
			Handler:    _MemberService_UpdateAvatar_Handler,
		},
		{
			MethodName: "ChangeAvatarStatus",
			Handler:    _MemberService_ChangeAvatarStatus_Handler,
		},
		{
			MethodName: "Card",
			Handler:    _MemberService_Card_Handler,
		},
		{
			MethodName: "MemberActivity",
			Handler:    _MemberService_MemberActivity_Handler,
		},
		{
			MethodName: "MemberActivityPagination",
			Handler:    _MemberService_MemberActivityPagination_Handler,
		},
		{
			MethodName: "CreateMemberActivity",
			Handler:    _MemberService_CreateMemberActivity_Handler,
		},
		{
			MethodName: "UpdateMemberActivity",
			Handler:    _MemberService_UpdateMemberActivity_Handler,
		},
		{
			MethodName: "RefreshMemberActivity",
			Handler:    _MemberService_RefreshMemberActivity_Handler,
		},
		{
			MethodName: "DeleteMemberActivity",
			Handler:    _MemberService_DeleteMemberActivity_Handler,
		},
		{
			MethodName: "MemberPreSaleWhiteAddressList",
			Handler:    _MemberService_MemberPreSaleWhiteAddressList_Handler,
		},
		{
			MethodName: "CreateMemberPreSaleWhiteAddress",
			Handler:    _MemberService_CreateMemberPreSaleWhiteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member/member.proto",
}
