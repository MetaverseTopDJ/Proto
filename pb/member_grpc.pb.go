// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	// 登录
	MemberHash(ctx context.Context, in *MemberHashPost, opts ...grpc.CallOption) (*MemberHashResponse, error)
	MemberLogin(ctx context.Context, in *MemberLoginPost, opts ...grpc.CallOption) (*MemberLoginResponse, error)
	MemberLogout(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*Response, error)
	// 头像
	Avatar(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	Avatars(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*AvatarsResponse, error)
	CacheAvatars(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*AvatarsResponse, error)
	AvatarPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AvatarPaginationResponse, error)
	CreateAvatar(ctx context.Context, in *CreateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	UpdateAvatar(ctx context.Context, in *UpdateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	ChangeAvatarStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AvatarResponse, error)
	// 会员
	Member(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberResponse, error)
	MemberInfo(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*SimpleMemberResponse, error)
	MemberByAddress(ctx context.Context, in *MemberByAddressPost, opts ...grpc.CallOption) (*MemberResponse, error)
	TopMemberInvitors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*TopMemberInvitorsResponse, error)
	MemberCards(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*SimpleMemberCardsResponse, error)
	MemberPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberPaginationResponse, error)
	// 会员卡
	Card(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CardResponse, error)
	Cards(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CardsResponse, error)
	CardPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*CardPaginationResponse, error)
	CreateCard(ctx context.Context, in *CreateCardPost, opts ...grpc.CallOption) (*CardResponse, error)
	UpdateCard(ctx context.Context, in *UpdateCardPost, opts ...grpc.CallOption) (*CardResponse, error)
	ChangeCardStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*CardResponse, error)
	// 会员卡 活动（Console）
	MemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberActivityResponse, error)
	MemberActivityDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberActivityDetailResponse, error)
	MemberActivities(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MemberActivitiesResponse, error)
	MemberActivityPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberActivityPaginationResponse, error)
	CreateMemberActivity(ctx context.Context, in *CreateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error)
	UpdateMemberActivity(ctx context.Context, in *UpdateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error)
	RefreshMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error)
	// 会员卡 操作
	MemberCardCreate(ctx context.Context, in *MemberCardCreatePost, opts ...grpc.CallOption) (*ResultResponse, error)
	MemberCardTransfer(ctx context.Context, in *MemberCardTransferPost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 会员卡 活动（App）
	CurrentActivity(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CardsResponse, error)
	// MemberContract 会员智能合约
	MemberContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContractResponse, error)
	MemberContractAddress(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractAddressResponse, error)
	CreateMemberContract(ctx context.Context, in *CreateContractPost, opts ...grpc.CallOption) (*ContractResponse, error)
	UpdateMemberContract(ctx context.Context, in *UpdateContractPost, opts ...grpc.CallOption) (*ContractResponse, error)
	ChangeMemberContractStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*ContractResponse, error)
	// MemberContractEvent 会员合约 事件日志
	MemberContractEvent(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberContractEventLogResponse, error)
	MemberContractEventPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberContractEventLogPaginationResponse, error)
	// 活动白名单
	MemberPreSaleWhiteAddress(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressResponse, error)
	MemberPreSaleWhiteAddressList(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressListResponse, error)
	MemberPreSaleWhiteAddressPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressPaginationResponse, error)
	CreateMemberPreSaleWhiteAddress(ctx context.Context, in *CreateMemberPreSaleWhiteAddressPost, opts ...grpc.CallOption) (*MessageResponse, error)
	UpdateMemberPreSaleWhiteAddress(ctx context.Context, in *UpdateMemberPreSaleWhiteAddressPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) MemberHash(ctx context.Context, in *MemberHashPost, opts ...grpc.CallOption) (*MemberHashResponse, error) {
	out := new(MemberHashResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberLogin(ctx context.Context, in *MemberLoginPost, opts ...grpc.CallOption) (*MemberLoginResponse, error) {
	out := new(MemberLoginResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberLogout(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Avatar(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Avatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Avatars(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*AvatarsResponse, error) {
	out := new(AvatarsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Avatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CacheAvatars(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*AvatarsResponse, error) {
	out := new(AvatarsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CacheAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AvatarPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*AvatarPaginationResponse, error) {
	out := new(AvatarPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/AvatarPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateAvatar(ctx context.Context, in *CreateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeAvatarStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*AvatarResponse, error) {
	out := new(AvatarResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/ChangeAvatarStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Member(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberInfo(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*SimpleMemberResponse, error) {
	out := new(SimpleMemberResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberByAddress(ctx context.Context, in *MemberByAddressPost, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) TopMemberInvitors(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*TopMemberInvitorsResponse, error) {
	out := new(TopMemberInvitorsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/TopMemberInvitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberCards(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*SimpleMemberCardsResponse, error) {
	out := new(SimpleMemberCardsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberPaginationResponse, error) {
	out := new(MemberPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Card(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Card", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Cards(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CardsResponse, error) {
	out := new(CardsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/Cards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CardPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*CardPaginationResponse, error) {
	out := new(CardPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CardPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateCard(ctx context.Context, in *CreateCardPost, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateCard(ctx context.Context, in *UpdateCardPost, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeCardStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/ChangeCardStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberActivityResponse, error) {
	out := new(MemberActivityResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberActivityDetail(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberActivityDetailResponse, error) {
	out := new(MemberActivityDetailResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberActivityDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberActivities(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MemberActivitiesResponse, error) {
	out := new(MemberActivitiesResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberActivityPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberActivityPaginationResponse, error) {
	out := new(MemberActivityPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberActivityPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateMemberActivity(ctx context.Context, in *CreateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error) {
	out := new(MemberActivityResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberActivity(ctx context.Context, in *UpdateMemberActivityPost, opts ...grpc.CallOption) (*MemberActivityResponse, error) {
	out := new(MemberActivityResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RefreshMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/RefreshMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMemberActivity(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/DeleteMemberActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberCardCreate(ctx context.Context, in *MemberCardCreatePost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberCardCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberCardTransfer(ctx context.Context, in *MemberCardTransferPost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberCardTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CurrentActivity(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CardsResponse, error) {
	out := new(CardsResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CurrentActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberContract(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberContractAddress(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ContractAddressResponse, error) {
	out := new(ContractAddressResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberContractAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateMemberContract(ctx context.Context, in *CreateContractPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateMemberContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberContract(ctx context.Context, in *UpdateContractPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateMemberContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeMemberContractStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*ContractResponse, error) {
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/ChangeMemberContractStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberContractEvent(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberContractEventLogResponse, error) {
	out := new(MemberContractEventLogResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberContractEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberContractEventPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberContractEventLogPaginationResponse, error) {
	out := new(MemberContractEventLogPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberContractEventPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberPreSaleWhiteAddress(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressResponse, error) {
	out := new(MemberPreSaleWhiteAddressResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberPreSaleWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberPreSaleWhiteAddressList(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressListResponse, error) {
	out := new(MemberPreSaleWhiteAddressListResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberPreSaleWhiteAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberPreSaleWhiteAddressPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressPaginationResponse, error) {
	out := new(MemberPreSaleWhiteAddressPaginationResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/MemberPreSaleWhiteAddressPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CreateMemberPreSaleWhiteAddress(ctx context.Context, in *CreateMemberPreSaleWhiteAddressPost, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/CreateMemberPreSaleWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMemberPreSaleWhiteAddress(ctx context.Context, in *UpdateMemberPreSaleWhiteAddressPost, opts ...grpc.CallOption) (*MemberPreSaleWhiteAddressResponse, error) {
	out := new(MemberPreSaleWhiteAddressResponse)
	err := c.cc.Invoke(ctx, "/member.MemberService/UpdateMemberPreSaleWhiteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	// 登录
	MemberHash(context.Context, *MemberHashPost) (*MemberHashResponse, error)
	MemberLogin(context.Context, *MemberLoginPost) (*MemberLoginResponse, error)
	MemberLogout(context.Context, *EmptyPost) (*Response, error)
	// 头像
	Avatar(context.Context, *InfoPost) (*AvatarResponse, error)
	Avatars(context.Context, *EmptyPost) (*AvatarsResponse, error)
	CacheAvatars(context.Context, *EmptyPost) (*AvatarsResponse, error)
	AvatarPagination(context.Context, *PaginationPost) (*AvatarPaginationResponse, error)
	CreateAvatar(context.Context, *CreateAvatarPost) (*AvatarResponse, error)
	UpdateAvatar(context.Context, *UpdateAvatarPost) (*AvatarResponse, error)
	ChangeAvatarStatus(context.Context, *ChangeStatusPost) (*AvatarResponse, error)
	// 会员
	Member(context.Context, *InfoPost) (*MemberResponse, error)
	MemberInfo(context.Context, *EmptyPost) (*SimpleMemberResponse, error)
	MemberByAddress(context.Context, *MemberByAddressPost) (*MemberResponse, error)
	TopMemberInvitors(context.Context, *EmptyPost) (*TopMemberInvitorsResponse, error)
	MemberCards(context.Context, *EmptyPost) (*SimpleMemberCardsResponse, error)
	MemberPagination(context.Context, *PaginationPost) (*MemberPaginationResponse, error)
	// 会员卡
	Card(context.Context, *InfoPost) (*CardResponse, error)
	Cards(context.Context, *EmptyPost) (*CardsResponse, error)
	CardPagination(context.Context, *PaginationPost) (*CardPaginationResponse, error)
	CreateCard(context.Context, *CreateCardPost) (*CardResponse, error)
	UpdateCard(context.Context, *UpdateCardPost) (*CardResponse, error)
	ChangeCardStatus(context.Context, *ChangeStatusPost) (*CardResponse, error)
	// 会员卡 活动（Console）
	MemberActivity(context.Context, *InfoPost) (*MemberActivityResponse, error)
	MemberActivityDetail(context.Context, *InfoPost) (*MemberActivityDetailResponse, error)
	MemberActivities(context.Context, *EmptyPost) (*MemberActivitiesResponse, error)
	MemberActivityPagination(context.Context, *PaginationPost) (*MemberActivityPaginationResponse, error)
	CreateMemberActivity(context.Context, *CreateMemberActivityPost) (*MemberActivityResponse, error)
	UpdateMemberActivity(context.Context, *UpdateMemberActivityPost) (*MemberActivityResponse, error)
	RefreshMemberActivity(context.Context, *InfoPost) (*MessageResponse, error)
	DeleteMemberActivity(context.Context, *InfoPost) (*MessageResponse, error)
	// 会员卡 操作
	MemberCardCreate(context.Context, *MemberCardCreatePost) (*ResultResponse, error)
	MemberCardTransfer(context.Context, *MemberCardTransferPost) (*ResultResponse, error)
	// 会员卡 活动（App）
	CurrentActivity(context.Context, *EmptyPost) (*CardsResponse, error)
	// MemberContract 会员智能合约
	MemberContract(context.Context, *InfoPost) (*ContractResponse, error)
	MemberContractAddress(context.Context, *EmptyPost) (*ContractAddressResponse, error)
	CreateMemberContract(context.Context, *CreateContractPost) (*ContractResponse, error)
	UpdateMemberContract(context.Context, *UpdateContractPost) (*ContractResponse, error)
	ChangeMemberContractStatus(context.Context, *ChangeStatusPost) (*ContractResponse, error)
	// MemberContractEvent 会员合约 事件日志
	MemberContractEvent(context.Context, *InfoPost) (*MemberContractEventLogResponse, error)
	MemberContractEventPagination(context.Context, *PaginationPost) (*MemberContractEventLogPaginationResponse, error)
	// 活动白名单
	MemberPreSaleWhiteAddress(context.Context, *InfoPost) (*MemberPreSaleWhiteAddressResponse, error)
	MemberPreSaleWhiteAddressList(context.Context, *EmptyPost) (*MemberPreSaleWhiteAddressListResponse, error)
	MemberPreSaleWhiteAddressPagination(context.Context, *PaginationPost) (*MemberPreSaleWhiteAddressPaginationResponse, error)
	CreateMemberPreSaleWhiteAddress(context.Context, *CreateMemberPreSaleWhiteAddressPost) (*MessageResponse, error)
	UpdateMemberPreSaleWhiteAddress(context.Context, *UpdateMemberPreSaleWhiteAddressPost) (*MemberPreSaleWhiteAddressResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) MemberHash(context.Context, *MemberHashPost) (*MemberHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberHash not implemented")
}
func (UnimplementedMemberServiceServer) MemberLogin(context.Context, *MemberLoginPost) (*MemberLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLogin not implemented")
}
func (UnimplementedMemberServiceServer) MemberLogout(context.Context, *EmptyPost) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLogout not implemented")
}
func (UnimplementedMemberServiceServer) Avatar(context.Context, *InfoPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Avatar not implemented")
}
func (UnimplementedMemberServiceServer) Avatars(context.Context, *EmptyPost) (*AvatarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Avatars not implemented")
}
func (UnimplementedMemberServiceServer) CacheAvatars(context.Context, *EmptyPost) (*AvatarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheAvatars not implemented")
}
func (UnimplementedMemberServiceServer) AvatarPagination(context.Context, *PaginationPost) (*AvatarPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvatarPagination not implemented")
}
func (UnimplementedMemberServiceServer) CreateAvatar(context.Context, *CreateAvatarPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedMemberServiceServer) UpdateAvatar(context.Context, *UpdateAvatarPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedMemberServiceServer) ChangeAvatarStatus(context.Context, *ChangeStatusPost) (*AvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatarStatus not implemented")
}
func (UnimplementedMemberServiceServer) Member(context.Context, *InfoPost) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Member not implemented")
}
func (UnimplementedMemberServiceServer) MemberInfo(context.Context, *EmptyPost) (*SimpleMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberInfo not implemented")
}
func (UnimplementedMemberServiceServer) MemberByAddress(context.Context, *MemberByAddressPost) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberByAddress not implemented")
}
func (UnimplementedMemberServiceServer) TopMemberInvitors(context.Context, *EmptyPost) (*TopMemberInvitorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMemberInvitors not implemented")
}
func (UnimplementedMemberServiceServer) MemberCards(context.Context, *EmptyPost) (*SimpleMemberCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberCards not implemented")
}
func (UnimplementedMemberServiceServer) MemberPagination(context.Context, *PaginationPost) (*MemberPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPagination not implemented")
}
func (UnimplementedMemberServiceServer) Card(context.Context, *InfoPost) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Card not implemented")
}
func (UnimplementedMemberServiceServer) Cards(context.Context, *EmptyPost) (*CardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cards not implemented")
}
func (UnimplementedMemberServiceServer) CardPagination(context.Context, *PaginationPost) (*CardPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardPagination not implemented")
}
func (UnimplementedMemberServiceServer) CreateCard(context.Context, *CreateCardPost) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedMemberServiceServer) UpdateCard(context.Context, *UpdateCardPost) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedMemberServiceServer) ChangeCardStatus(context.Context, *ChangeStatusPost) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCardStatus not implemented")
}
func (UnimplementedMemberServiceServer) MemberActivity(context.Context, *InfoPost) (*MemberActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) MemberActivityDetail(context.Context, *InfoPost) (*MemberActivityDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivityDetail not implemented")
}
func (UnimplementedMemberServiceServer) MemberActivities(context.Context, *EmptyPost) (*MemberActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivities not implemented")
}
func (UnimplementedMemberServiceServer) MemberActivityPagination(context.Context, *PaginationPost) (*MemberActivityPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivityPagination not implemented")
}
func (UnimplementedMemberServiceServer) CreateMemberActivity(context.Context, *CreateMemberActivityPost) (*MemberActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberActivity(context.Context, *UpdateMemberActivityPost) (*MemberActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) RefreshMemberActivity(context.Context, *InfoPost) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMemberActivity(context.Context, *InfoPost) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberActivity not implemented")
}
func (UnimplementedMemberServiceServer) MemberCardCreate(context.Context, *MemberCardCreatePost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberCardCreate not implemented")
}
func (UnimplementedMemberServiceServer) MemberCardTransfer(context.Context, *MemberCardTransferPost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberCardTransfer not implemented")
}
func (UnimplementedMemberServiceServer) CurrentActivity(context.Context, *EmptyPost) (*CardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentActivity not implemented")
}
func (UnimplementedMemberServiceServer) MemberContract(context.Context, *InfoPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberContract not implemented")
}
func (UnimplementedMemberServiceServer) MemberContractAddress(context.Context, *EmptyPost) (*ContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberContractAddress not implemented")
}
func (UnimplementedMemberServiceServer) CreateMemberContract(context.Context, *CreateContractPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberContract not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberContract(context.Context, *UpdateContractPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberContract not implemented")
}
func (UnimplementedMemberServiceServer) ChangeMemberContractStatus(context.Context, *ChangeStatusPost) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberContractStatus not implemented")
}
func (UnimplementedMemberServiceServer) MemberContractEvent(context.Context, *InfoPost) (*MemberContractEventLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberContractEvent not implemented")
}
func (UnimplementedMemberServiceServer) MemberContractEventPagination(context.Context, *PaginationPost) (*MemberContractEventLogPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberContractEventPagination not implemented")
}
func (UnimplementedMemberServiceServer) MemberPreSaleWhiteAddress(context.Context, *InfoPost) (*MemberPreSaleWhiteAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPreSaleWhiteAddress not implemented")
}
func (UnimplementedMemberServiceServer) MemberPreSaleWhiteAddressList(context.Context, *EmptyPost) (*MemberPreSaleWhiteAddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPreSaleWhiteAddressList not implemented")
}
func (UnimplementedMemberServiceServer) MemberPreSaleWhiteAddressPagination(context.Context, *PaginationPost) (*MemberPreSaleWhiteAddressPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPreSaleWhiteAddressPagination not implemented")
}
func (UnimplementedMemberServiceServer) CreateMemberPreSaleWhiteAddress(context.Context, *CreateMemberPreSaleWhiteAddressPost) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberPreSaleWhiteAddress not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMemberPreSaleWhiteAddress(context.Context, *UpdateMemberPreSaleWhiteAddressPost) (*MemberPreSaleWhiteAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberPreSaleWhiteAddress not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_MemberHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberHashPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberHash(ctx, req.(*MemberHashPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberLoginPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberLogin(ctx, req.(*MemberLoginPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberLogout(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Avatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Avatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Avatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Avatar(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Avatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Avatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Avatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Avatars(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CacheAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CacheAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CacheAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CacheAvatars(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AvatarPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AvatarPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/AvatarPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AvatarPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvatarPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateAvatar(ctx, req.(*CreateAvatarPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvatarPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateAvatar(ctx, req.(*UpdateAvatarPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeAvatarStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeAvatarStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/ChangeAvatarStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeAvatarStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Member(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberInfo(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberByAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberByAddress(ctx, req.(*MemberByAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_TopMemberInvitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).TopMemberInvitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/TopMemberInvitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).TopMemberInvitors(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberCards(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Card_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Card(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Card",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Card(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Cards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Cards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/Cards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Cards(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CardPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CardPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CardPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CardPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateCard(ctx, req.(*CreateCardPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateCard(ctx, req.(*UpdateCardPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeCardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeCardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/ChangeCardStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeCardStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberActivity(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberActivityDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberActivityDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberActivityDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberActivityDetail(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberActivities(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberActivityPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberActivityPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberActivityPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberActivityPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberActivityPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMemberActivity(ctx, req.(*CreateMemberActivityPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberActivityPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberActivity(ctx, req.(*UpdateMemberActivityPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RefreshMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RefreshMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/RefreshMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RefreshMemberActivity(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMemberActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMemberActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/DeleteMemberActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMemberActivity(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberCardCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCardCreatePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberCardCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberCardCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberCardCreate(ctx, req.(*MemberCardCreatePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberCardTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCardTransferPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberCardTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberCardTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberCardTransfer(ctx, req.(*MemberCardTransferPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CurrentActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CurrentActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CurrentActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CurrentActivity(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberContract(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberContractAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberContractAddress(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateMemberContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMemberContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateMemberContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMemberContract(ctx, req.(*CreateContractPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateMemberContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberContract(ctx, req.(*UpdateContractPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeMemberContractStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeMemberContractStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/ChangeMemberContractStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeMemberContractStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberContractEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberContractEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberContractEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberContractEvent(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberContractEventPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberContractEventPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberContractEventPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberContractEventPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberPreSaleWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberPreSaleWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddress(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberPreSaleWhiteAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberPreSaleWhiteAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddressList(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberPreSaleWhiteAddressPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddressPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/MemberPreSaleWhiteAddressPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberPreSaleWhiteAddressPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CreateMemberPreSaleWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberPreSaleWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMemberPreSaleWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/CreateMemberPreSaleWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMemberPreSaleWhiteAddress(ctx, req.(*CreateMemberPreSaleWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMemberPreSaleWhiteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberPreSaleWhiteAddressPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMemberPreSaleWhiteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/member.MemberService/UpdateMemberPreSaleWhiteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMemberPreSaleWhiteAddress(ctx, req.(*UpdateMemberPreSaleWhiteAddressPost))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "member.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberHash",
			Handler:    _MemberService_MemberHash_Handler,
		},
		{
			MethodName: "MemberLogin",
			Handler:    _MemberService_MemberLogin_Handler,
		},
		{
			MethodName: "MemberLogout",
			Handler:    _MemberService_MemberLogout_Handler,
		},
		{
			MethodName: "Avatar",
			Handler:    _MemberService_Avatar_Handler,
		},
		{
			MethodName: "Avatars",
			Handler:    _MemberService_Avatars_Handler,
		},
		{
			MethodName: "CacheAvatars",
			Handler:    _MemberService_CacheAvatars_Handler,
		},
		{
			MethodName: "AvatarPagination",
			Handler:    _MemberService_AvatarPagination_Handler,
		},
		{
			MethodName: "CreateAvatar",
			Handler:    _MemberService_CreateAvatar_Handler,
		},
		{
			MethodName: "UpdateAvatar",
			Handler:    _MemberService_UpdateAvatar_Handler,
		},
		{
			MethodName: "ChangeAvatarStatus",
			Handler:    _MemberService_ChangeAvatarStatus_Handler,
		},
		{
			MethodName: "Member",
			Handler:    _MemberService_Member_Handler,
		},
		{
			MethodName: "MemberInfo",
			Handler:    _MemberService_MemberInfo_Handler,
		},
		{
			MethodName: "MemberByAddress",
			Handler:    _MemberService_MemberByAddress_Handler,
		},
		{
			MethodName: "TopMemberInvitors",
			Handler:    _MemberService_TopMemberInvitors_Handler,
		},
		{
			MethodName: "MemberCards",
			Handler:    _MemberService_MemberCards_Handler,
		},
		{
			MethodName: "MemberPagination",
			Handler:    _MemberService_MemberPagination_Handler,
		},
		{
			MethodName: "Card",
			Handler:    _MemberService_Card_Handler,
		},
		{
			MethodName: "Cards",
			Handler:    _MemberService_Cards_Handler,
		},
		{
			MethodName: "CardPagination",
			Handler:    _MemberService_CardPagination_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _MemberService_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _MemberService_UpdateCard_Handler,
		},
		{
			MethodName: "ChangeCardStatus",
			Handler:    _MemberService_ChangeCardStatus_Handler,
		},
		{
			MethodName: "MemberActivity",
			Handler:    _MemberService_MemberActivity_Handler,
		},
		{
			MethodName: "MemberActivityDetail",
			Handler:    _MemberService_MemberActivityDetail_Handler,
		},
		{
			MethodName: "MemberActivities",
			Handler:    _MemberService_MemberActivities_Handler,
		},
		{
			MethodName: "MemberActivityPagination",
			Handler:    _MemberService_MemberActivityPagination_Handler,
		},
		{
			MethodName: "CreateMemberActivity",
			Handler:    _MemberService_CreateMemberActivity_Handler,
		},
		{
			MethodName: "UpdateMemberActivity",
			Handler:    _MemberService_UpdateMemberActivity_Handler,
		},
		{
			MethodName: "RefreshMemberActivity",
			Handler:    _MemberService_RefreshMemberActivity_Handler,
		},
		{
			MethodName: "DeleteMemberActivity",
			Handler:    _MemberService_DeleteMemberActivity_Handler,
		},
		{
			MethodName: "MemberCardCreate",
			Handler:    _MemberService_MemberCardCreate_Handler,
		},
		{
			MethodName: "MemberCardTransfer",
			Handler:    _MemberService_MemberCardTransfer_Handler,
		},
		{
			MethodName: "CurrentActivity",
			Handler:    _MemberService_CurrentActivity_Handler,
		},
		{
			MethodName: "MemberContract",
			Handler:    _MemberService_MemberContract_Handler,
		},
		{
			MethodName: "MemberContractAddress",
			Handler:    _MemberService_MemberContractAddress_Handler,
		},
		{
			MethodName: "CreateMemberContract",
			Handler:    _MemberService_CreateMemberContract_Handler,
		},
		{
			MethodName: "UpdateMemberContract",
			Handler:    _MemberService_UpdateMemberContract_Handler,
		},
		{
			MethodName: "ChangeMemberContractStatus",
			Handler:    _MemberService_ChangeMemberContractStatus_Handler,
		},
		{
			MethodName: "MemberContractEvent",
			Handler:    _MemberService_MemberContractEvent_Handler,
		},
		{
			MethodName: "MemberContractEventPagination",
			Handler:    _MemberService_MemberContractEventPagination_Handler,
		},
		{
			MethodName: "MemberPreSaleWhiteAddress",
			Handler:    _MemberService_MemberPreSaleWhiteAddress_Handler,
		},
		{
			MethodName: "MemberPreSaleWhiteAddressList",
			Handler:    _MemberService_MemberPreSaleWhiteAddressList_Handler,
		},
		{
			MethodName: "MemberPreSaleWhiteAddressPagination",
			Handler:    _MemberService_MemberPreSaleWhiteAddressPagination_Handler,
		},
		{
			MethodName: "CreateMemberPreSaleWhiteAddress",
			Handler:    _MemberService_CreateMemberPreSaleWhiteAddress_Handler,
		},
		{
			MethodName: "UpdateMemberPreSaleWhiteAddress",
			Handler:    _MemberService_UpdateMemberPreSaleWhiteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member/member.proto",
}
