// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: nft/block_crontab.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlockCrontab 区块扫描 计划任务
type BlockCrontab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Current    uint64 `protobuf:"varint,3,opt,name=current,proto3" json:"current"`
	Next       uint64 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	Exec       uint64 `protobuf:"varint,5,opt,name=exec,proto3" json:"exec"`
	Interval   uint64 `protobuf:"varint,6,opt,name=interval,proto3" json:"interval"`
	Check      uint64 `protobuf:"varint,7,opt,name=check,proto3" json:"check"`
	Status     uint64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	Checked    bool   `protobuf:"varint,9,opt,name=checked,proto3" json:"checked"`
	CreatedAt  string `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt  string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *BlockCrontab) Reset() {
	*x = BlockCrontab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_block_crontab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCrontab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCrontab) ProtoMessage() {}

func (x *BlockCrontab) ProtoReflect() protoreflect.Message {
	mi := &file_nft_block_crontab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCrontab.ProtoReflect.Descriptor instead.
func (*BlockCrontab) Descriptor() ([]byte, []int) {
	return file_nft_block_crontab_proto_rawDescGZIP(), []int{0}
}

func (x *BlockCrontab) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *BlockCrontab) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BlockCrontab) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BlockCrontab) GetNext() uint64 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *BlockCrontab) GetExec() uint64 {
	if x != nil {
		return x.Exec
	}
	return 0
}

func (x *BlockCrontab) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *BlockCrontab) GetCheck() uint64 {
	if x != nil {
		return x.Check
	}
	return 0
}

func (x *BlockCrontab) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BlockCrontab) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

func (x *BlockCrontab) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BlockCrontab) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// ModifyBlockCrontabPost 编辑计划任务
type ModifyBlockCrontabPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId uint64 `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Current    uint64 `protobuf:"varint,3,opt,name=current,proto3" json:"current"`
	Next       uint64 `protobuf:"varint,4,opt,name=next,proto3" json:"next"`
	Exec       uint64 `protobuf:"varint,5,opt,name=exec,proto3" json:"exec"`
	Interval   uint64 `protobuf:"varint,6,opt,name=interval,proto3" json:"interval"`
	Check      uint64 `protobuf:"varint,7,opt,name=check,proto3" json:"check"`
}

func (x *ModifyBlockCrontabPost) Reset() {
	*x = ModifyBlockCrontabPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_block_crontab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBlockCrontabPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBlockCrontabPost) ProtoMessage() {}

func (x *ModifyBlockCrontabPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_block_crontab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBlockCrontabPost.ProtoReflect.Descriptor instead.
func (*ModifyBlockCrontabPost) Descriptor() ([]byte, []int) {
	return file_nft_block_crontab_proto_rawDescGZIP(), []int{1}
}

func (x *ModifyBlockCrontabPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ModifyBlockCrontabPost) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyBlockCrontabPost) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ModifyBlockCrontabPost) GetNext() uint64 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *ModifyBlockCrontabPost) GetExec() uint64 {
	if x != nil {
		return x.Exec
	}
	return 0
}

func (x *ModifyBlockCrontabPost) GetInterval() uint64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ModifyBlockCrontabPost) GetCheck() uint64 {
	if x != nil {
		return x.Check
	}
	return 0
}

type BlockCrontabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *BlockCrontab `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *BlockCrontabResponse) Reset() {
	*x = BlockCrontabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_block_crontab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCrontabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCrontabResponse) ProtoMessage() {}

func (x *BlockCrontabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_block_crontab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCrontabResponse.ProtoReflect.Descriptor instead.
func (*BlockCrontabResponse) Descriptor() ([]byte, []int) {
	return file_nft_block_crontab_proto_rawDescGZIP(), []int{2}
}

func (x *BlockCrontabResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlockCrontabResponse) GetData() *BlockCrontab {
	if x != nil {
		return x.Data
	}
	return nil
}

type BlockCrontabsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    []*BlockCrontab `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *BlockCrontabsResponse) Reset() {
	*x = BlockCrontabsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_block_crontab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCrontabsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCrontabsResponse) ProtoMessage() {}

func (x *BlockCrontabsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_block_crontab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCrontabsResponse.ProtoReflect.Descriptor instead.
func (*BlockCrontabsResponse) Descriptor() ([]byte, []int) {
	return file_nft_block_crontab_proto_rawDescGZIP(), []int{3}
}

func (x *BlockCrontabsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlockCrontabsResponse) GetData() []*BlockCrontab {
	if x != nil {
		return x.Data
	}
	return nil
}

type BlockCrontabPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                                        `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *BlockCrontabPaginationResponse_BlockCrontabs `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *BlockCrontabPaginationResponse) Reset() {
	*x = BlockCrontabPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_block_crontab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCrontabPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCrontabPaginationResponse) ProtoMessage() {}

func (x *BlockCrontabPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_block_crontab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCrontabPaginationResponse.ProtoReflect.Descriptor instead.
func (*BlockCrontabPaginationResponse) Descriptor() ([]byte, []int) {
	return file_nft_block_crontab_proto_rawDescGZIP(), []int{4}
}

func (x *BlockCrontabPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlockCrontabPaginationResponse) GetData() *BlockCrontabPaginationResponse_BlockCrontabs {
	if x != nil {
		return x.Data
	}
	return nil
}

type BlockCrontabPaginationResponse_BlockCrontabs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*BlockCrontab `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *BlockCrontabPaginationResponse_BlockCrontabs) Reset() {
	*x = BlockCrontabPaginationResponse_BlockCrontabs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_block_crontab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockCrontabPaginationResponse_BlockCrontabs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockCrontabPaginationResponse_BlockCrontabs) ProtoMessage() {}

func (x *BlockCrontabPaginationResponse_BlockCrontabs) ProtoReflect() protoreflect.Message {
	mi := &file_nft_block_crontab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockCrontabPaginationResponse_BlockCrontabs.ProtoReflect.Descriptor instead.
func (*BlockCrontabPaginationResponse_BlockCrontabs) Descriptor() ([]byte, []int) {
	return file_nft_block_crontab_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BlockCrontabPaginationResponse_BlockCrontabs) GetList() []*BlockCrontab {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *BlockCrontabPaginationResponse_BlockCrontabs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_nft_block_crontab_proto protoreflect.FileDescriptor

var file_nft_block_crontab_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6e, 0x66, 0x74, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x66, 0x74, 0x22, 0xa7,
	0x02, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x57, 0x0a, 0x14,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xcf, 0x01, 0x0a, 0x1e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_block_crontab_proto_rawDescOnce sync.Once
	file_nft_block_crontab_proto_rawDescData = file_nft_block_crontab_proto_rawDesc
)

func file_nft_block_crontab_proto_rawDescGZIP() []byte {
	file_nft_block_crontab_proto_rawDescOnce.Do(func() {
		file_nft_block_crontab_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_block_crontab_proto_rawDescData)
	})
	return file_nft_block_crontab_proto_rawDescData
}

var file_nft_block_crontab_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nft_block_crontab_proto_goTypes = []interface{}{
	(*BlockCrontab)(nil),                                 // 0: nft.BlockCrontab
	(*ModifyBlockCrontabPost)(nil),                       // 1: nft.ModifyBlockCrontabPost
	(*BlockCrontabResponse)(nil),                         // 2: nft.BlockCrontabResponse
	(*BlockCrontabsResponse)(nil),                        // 3: nft.BlockCrontabsResponse
	(*BlockCrontabPaginationResponse)(nil),               // 4: nft.BlockCrontabPaginationResponse
	(*BlockCrontabPaginationResponse_BlockCrontabs)(nil), // 5: nft.BlockCrontabPaginationResponse.BlockCrontabs
}
var file_nft_block_crontab_proto_depIdxs = []int32{
	0, // 0: nft.BlockCrontabResponse.data:type_name -> nft.BlockCrontab
	0, // 1: nft.BlockCrontabsResponse.data:type_name -> nft.BlockCrontab
	5, // 2: nft.BlockCrontabPaginationResponse.data:type_name -> nft.BlockCrontabPaginationResponse.BlockCrontabs
	0, // 3: nft.BlockCrontabPaginationResponse.BlockCrontabs.list:type_name -> nft.BlockCrontab
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nft_block_crontab_proto_init() }
func file_nft_block_crontab_proto_init() {
	if File_nft_block_crontab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_block_crontab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCrontab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_block_crontab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBlockCrontabPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_block_crontab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCrontabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_block_crontab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCrontabsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_block_crontab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCrontabPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_block_crontab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockCrontabPaginationResponse_BlockCrontabs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_block_crontab_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nft_block_crontab_proto_goTypes,
		DependencyIndexes: file_nft_block_crontab_proto_depIdxs,
		MessageInfos:      file_nft_block_crontab_proto_msgTypes,
	}.Build()
	File_nft_block_crontab_proto = out.File
	file_nft_block_crontab_proto_rawDesc = nil
	file_nft_block_crontab_proto_goTypes = nil
	file_nft_block_crontab_proto_depIdxs = nil
}
