// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: nft/nft_token.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NFTToken 通证数据结构
type NFTToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId  uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	URL         string `protobuf:"bytes,5,opt,name=URL,proto3" json:"URL"`
	Cover       string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	Properties  string `protobuf:"bytes,7,opt,name=properties,proto3" json:"properties"`
	Status      uint64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	Checked     bool   `protobuf:"varint,9,opt,name=checked,proto3" json:"checked"`
	CreatedAt   string `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt   string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *NFTToken) Reset() {
	*x = NFTToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTToken) ProtoMessage() {}

func (x *NFTToken) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTToken.ProtoReflect.Descriptor instead.
func (*NFTToken) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{0}
}

func (x *NFTToken) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NFTToken) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *NFTToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NFTToken) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NFTToken) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *NFTToken) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NFTToken) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

func (x *NFTToken) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NFTToken) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

func (x *NFTToken) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NFTToken) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// CreateNFTTokenPost 创建通证
type CreateNFTTokenPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId  uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	URL         string `protobuf:"bytes,5,opt,name=URL,proto3" json:"URL"`
	Cover       string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	Properties  string `protobuf:"bytes,7,opt,name=properties,proto3" json:"properties"`
}

func (x *CreateNFTTokenPost) Reset() {
	*x = CreateNFTTokenPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNFTTokenPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNFTTokenPost) ProtoMessage() {}

func (x *CreateNFTTokenPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNFTTokenPost.ProtoReflect.Descriptor instead.
func (*CreateNFTTokenPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNFTTokenPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateNFTTokenPost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNFTTokenPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateNFTTokenPost) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *CreateNFTTokenPost) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *CreateNFTTokenPost) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

// UpdateNFTTokenPost 更新通证
type UpdateNFTTokenPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ContractId  uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	URL         string `protobuf:"bytes,5,opt,name=URL,proto3" json:"URL"`
	Cover       string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	Properties  string `protobuf:"bytes,7,opt,name=properties,proto3" json:"properties"`
}

func (x *UpdateNFTTokenPost) Reset() {
	*x = UpdateNFTTokenPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNFTTokenPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNFTTokenPost) ProtoMessage() {}

func (x *UpdateNFTTokenPost) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNFTTokenPost.ProtoReflect.Descriptor instead.
func (*UpdateNFTTokenPost) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNFTTokenPost) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNFTTokenPost) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateNFTTokenPost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNFTTokenPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateNFTTokenPost) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *UpdateNFTTokenPost) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *UpdateNFTTokenPost) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

// NFTTokenResponse 返回通证
type NFTTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTToken `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTTokenResponse) Reset() {
	*x = NFTTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTokenResponse) ProtoMessage() {}

func (x *NFTTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTokenResponse.ProtoReflect.Descriptor instead.
func (*NFTTokenResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{3}
}

func (x *NFTTokenResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTTokenResponse) GetData() *NFTToken {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTTokensResponse 返回通证列表
type NFTTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    []*NFTToken `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *NFTTokensResponse) Reset() {
	*x = NFTTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTokensResponse) ProtoMessage() {}

func (x *NFTTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTokensResponse.ProtoReflect.Descriptor instead.
func (*NFTTokensResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{4}
}

func (x *NFTTokensResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTTokensResponse) GetData() []*NFTToken {
	if x != nil {
		return x.Data
	}
	return nil
}

// NFTTokenPaginationResponse 返回通证分页
type NFTTokenPaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                                `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data    *NFTTokenPaginationResponse_NFTTokens `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *NFTTokenPaginationResponse) Reset() {
	*x = NFTTokenPaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTokenPaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTokenPaginationResponse) ProtoMessage() {}

func (x *NFTTokenPaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTokenPaginationResponse.ProtoReflect.Descriptor instead.
func (*NFTTokenPaginationResponse) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{5}
}

func (x *NFTTokenPaginationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NFTTokenPaginationResponse) GetData() *NFTTokenPaginationResponse_NFTTokens {
	if x != nil {
		return x.Data
	}
	return nil
}

type NFTTokenPaginationResponse_NFTTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*NFTToken `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
}

func (x *NFTTokenPaginationResponse_NFTTokens) Reset() {
	*x = NFTTokenPaginationResponse_NFTTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nft_nft_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFTTokenPaginationResponse_NFTTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFTTokenPaginationResponse_NFTTokens) ProtoMessage() {}

func (x *NFTTokenPaginationResponse_NFTTokens) ProtoReflect() protoreflect.Message {
	mi := &file_nft_nft_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFTTokenPaginationResponse_NFTTokens.ProtoReflect.Descriptor instead.
func (*NFTTokenPaginationResponse_NFTTokens) Descriptor() ([]byte, []int) {
	return file_nft_nft_token_proto_rawDescGZIP(), []int{5, 0}
}

func (x *NFTTokenPaginationResponse_NFTTokens) GetList() []*NFTToken {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *NFTTokenPaginationResponse_NFTTokens) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_nft_nft_token_proto protoreflect.FileDescriptor

var file_nft_nft_token_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6e, 0x66, 0x74, 0x2f, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x66, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x08, 0x4e,
	0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x4f, 0x0a, 0x10, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x11, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x66, 0x74, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x46,
	0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x44, 0x0a,
	0x09, 0x4e, 0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x4e,
	0x46, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nft_nft_token_proto_rawDescOnce sync.Once
	file_nft_nft_token_proto_rawDescData = file_nft_nft_token_proto_rawDesc
)

func file_nft_nft_token_proto_rawDescGZIP() []byte {
	file_nft_nft_token_proto_rawDescOnce.Do(func() {
		file_nft_nft_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_nft_nft_token_proto_rawDescData)
	})
	return file_nft_nft_token_proto_rawDescData
}

var file_nft_nft_token_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_nft_nft_token_proto_goTypes = []interface{}{
	(*NFTToken)(nil),                             // 0: nft.NFTToken
	(*CreateNFTTokenPost)(nil),                   // 1: nft.CreateNFTTokenPost
	(*UpdateNFTTokenPost)(nil),                   // 2: nft.UpdateNFTTokenPost
	(*NFTTokenResponse)(nil),                     // 3: nft.NFTTokenResponse
	(*NFTTokensResponse)(nil),                    // 4: nft.NFTTokensResponse
	(*NFTTokenPaginationResponse)(nil),           // 5: nft.NFTTokenPaginationResponse
	(*NFTTokenPaginationResponse_NFTTokens)(nil), // 6: nft.NFTTokenPaginationResponse.NFTTokens
}
var file_nft_nft_token_proto_depIdxs = []int32{
	0, // 0: nft.NFTTokenResponse.data:type_name -> nft.NFTToken
	0, // 1: nft.NFTTokensResponse.data:type_name -> nft.NFTToken
	6, // 2: nft.NFTTokenPaginationResponse.data:type_name -> nft.NFTTokenPaginationResponse.NFTTokens
	0, // 3: nft.NFTTokenPaginationResponse.NFTTokens.list:type_name -> nft.NFTToken
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nft_nft_token_proto_init() }
func file_nft_nft_token_proto_init() {
	if File_nft_nft_token_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nft_nft_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_token_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNFTTokenPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_token_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNFTTokenPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_token_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_token_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_token_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTokenPaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nft_nft_token_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFTTokenPaginationResponse_NFTTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nft_nft_token_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nft_nft_token_proto_goTypes,
		DependencyIndexes: file_nft_nft_token_proto_depIdxs,
		MessageInfos:      file_nft_nft_token_proto_msgTypes,
	}.Build()
	File_nft_nft_token_proto = out.File
	file_nft_nft_token_proto_rawDesc = nil
	file_nft_nft_token_proto_goTypes = nil
	file_nft_nft_token_proto_depIdxs = nil
}
